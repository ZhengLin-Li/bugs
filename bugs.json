[
	{
		"date" : "28/5/2019",
		"title" : "String interpreted as a column name when creating an index",
		"links" : {
			"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-April/084283.html"
		},
		"status" : "closed (not a bug)",
		"oracle" : "error",
		"dbms" : "sqlite",
		"test" : "CREATE TABLE test (c0);\nCREATE INDEX index_1 ON test('asdf'); -- Error: no such column: asdf"
	},
	{
		"date" : "28/5/2019",
		"title" : "COLLATE nocase index on a WITHOUT ROWID table malfunctions",
		"links" : {
			"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-April/084293.html",
			"bugtracker" : "https://www.sqlite.org/src/tktview/3182d3879020ef3b2e6db56be2470a0266d3c773",
			"fix" : "https://www.sqlite.org/src/info/1b1dd4d48cd79a58"
		},
		"severity" : "Severe",
		"dbms" : "sqlite",
		"status" : "fixed",
		"comment" : "This bug was classified as \"severe\" and had existed since 2013.",
		"oracle" : "pqs",
		"test" : "CREATE TABLE test (c1 TEXT PRIMARY KEY) WITHOUT ROWID;\nCREATE INDEX index_0 ON test(c1 COLLATE NOCASE);\nINSERT INTO test(c1) VALUES ('A');\nINSERT INTO test(c1) VALUES ('a');\nSELECT * FROM test; -- only one row is fetched"
	},
	{
		"date" : "28/5/2019",
		"title" : "PRAGMA case_sensitive_like can corrupt some databases",
		"links" : {
			"bugtracker" : "https://www.sqlite.org/src/info/a340eef47b0cad5",
			"fix" : "https://www.sqlite.org/src/info/eabe7f2d4ff0e0dd",
			"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-April/084322.html"
		},
		"severity" : "Important",

		"dbms" : "sqlite",
		"status" : "fixed",
		"oracle" : "error (select)",
		"comment" : "The failing test case caused the SQLite developers to realize \"a defect in the design of SQLite, not a defect in the implementation.\" Seven options to address this were outlined. Since it was not very clear how to best address this, the quirk was documented in the documentation and a compile time option to omit the relevant pragma was introduced.",
		"test" : "CREATE TABLE test (c0);\nCREATE INDEX index_0 ON test(c0 LIKE '');\nPRAGMA case_sensitive_like=false;\nVACUUM;\nSELECT * from test; -- Error: malformed database schema (index_0) - non-deterministic functions prohibited in index expressions"
	},
	{
		"date" : "30/5/2019",
		"title" : "Unique index that uses GLOB does not detect duplicate due to REAL conversion",
		"links" : {
			"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-April/084324.html",
			"fix" : "https://www.sqlite.org/src/tktview?name=ae0f637bdd"
		},
		"severity" : "Minor",
		"oracle" : "error (reindex)",
		"status" : "fixed",
		"dbms" : "sqlite",

		"test" : "CREATE TABLE test (c0, c1 REAL);\nCREATE UNIQUE INDEX index_1 ON test(c0 GLOB c1);\nINSERT INTO test(c0, c1) VALUES ('1', '1');\nINSERT INTO test(c0, c1) VALUES ('0', '1');\nREINDEX; -- Error: UNIQUE constraint failed"
	},
	{
		"date" : "28/5/2019",
		"title" : "PRAGMA case_sensitive_like conflicts with LIKE operator when creating an index",
		"severity" : "Important",
		"links" : {
			"bugtracker" : "https://www.sqlite.org/src/tktview?name=a340eef47b",
			"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-April/084299.html"
		},
		"oracle" : "error (create index)",
		"test" : "PRAGMA case_sensitive_like=false;\nCREATE TABLE test (c0);\nCREATE INDEX IF NOT EXISTS index_1 ON test(c0 LIKE 'a'); -- Error: non-deterministic functions prohibited in index expressions",
		"status" : "closed (duplicate)",
		"dbms" : "sqlite"
	},
	{
		"date" : "1/5/2019",
		"title" : "Multi-row insert circumvents index check",
		"links" : {
			"bugtracker" : "https://www.sqlite.org/src/info/3be1295b264be2fa",
			"fix" : "https://www.sqlite.org/src/info/713caa382cf7ddef",
			"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084326.html"
		},
		"severity" : "Important",
		"oracle" : "error (reindex)",
		"test" : "CREATE TABLE test (c0, c1 TEXT);\nCREATE UNIQUE INDEX IF NOT EXISTS index_0 ON test(c1 == FALSE);\nCREATE INDEX IF NOT EXISTS index_1 ON test(c0 || FALSE) WHERE c1;\nINSERT OR IGNORE INTO test(c0, c1) VALUES ('a', TRUE);\nINSERT OR IGNORE INTO test(c0, c1) VALUES ('a', FALSE);\nPRAGMA legacy_file_format=true;\nREINDEX; -- Error: UNIQUE constraint failed: index 'index_0'",
		"status" : "fixed",
		"dbms" : "sqlite"
	},
	{
		"date" : "1/5/2019",
		"title" : "COLLATE NOCASE index on REAL column malfunctions",
		"links" : {
			"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084334.html",
			"fix" : "https://www.sqlite.org/src/timeline?c=b043a54c3de54b28"
		},
		"status" : "fixed",
		"dbms" : "sqlite",
		"oracle" : "pqs",
		"test" : "CREATE TABLE test (c0 REAL);\nCREATE INDEX index_0 ON test(c0 COLLATE NOCASE);\nINSERT INTO test(c0) VALUES ('+/');\nSELECT * FROM test WHERE (c0 LIKE '+/'); -- fetches no row"
	},
	{
		"date" : "2/5/2019",
		"title" : "UPSERT documentation issue",
		"links" : {
			"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084347.html"
		},

		"status" : "fixed (in documentation)",
		"oracle" : "error",
		"dbms" : "sqlite",
		"test" : "CREATE TABLE test (c0 NOT NULL);\nINSERT INTO test(c0) VALUES (NULL) ON CONFLICT DO NOTHING; -- results in an error\nINSERT OR IGNORE INTO test(c0) VALUES (NULL); -- does not result in an error",
		"comment" : "Note that this was not a bug in the code. Rather, the documentation was not very clear on this is."
	},
	{
		"date" : "2/5/2019",
		"title" : "TYPEOF index on REAL column malfunctions",
		"links" : {
			"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084350.html",
			"fix" : "https://www.sqlite.org/src/timeline?c=48889530a9de22fe"
		},

		"status" : "fixed",
		"oracle" : "error (reindex)",
		"dbms" : "sqlite",
		"test" : "CREATE TABLE test (c0 REAL);\nCREATE UNIQUE INDEX index_0 ON test(TYPEOF(c0));\nINSERT OR IGNORE INTO test(c0) VALUES (0.1);\nINSERT OR IGNORE INTO test(c0) VALUES (FALSE);\nREINDEX; -- UNIQUE constraint failed: index 'index_0'"
	},
	{
		"date" : "2/5/2019",
		"title" : "Index on REAL column malfunctions when multiplying with a string",
		"links" : {
			"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084355.html",
			"fix" : "https://www.sqlite.org/src/info/5a8a23ee5f60a31d"
		},
		"status" : "closed (duplicate)",
		"test" : "CREATE TABLE test (c0 REAL);\nCREATE UNIQUE INDEX index_0 ON test(TRIM(('' * c0)));\nINSERT INTO test(c0) VALUES (0.0), (0.1);\nREINDEX; -- UNIQUE constraint failed: index 'index_0'",
		"oracle" : "error (reindex)",
		"dbms" : "sqlite"
	},
	{
		"date" : "3/5/2019",
		"title" : "Problem with REAL values and string functions used in indexes or on expressions",
		"links" : {
			"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084366.html",
			"fix" : "https://www.sqlite.org/src/info/5a8a23ee5f60a31d"
		},

		"status" : "fixed",
		"test" : "CREATE TABLE test (c0 REAL);\nCREATE UNIQUE INDEX index_0 ON test(LENGTH(-c0));\nINSERT INTO test(c0) VALUES (0.0), ('10:');\nREINDEX; -- UNIQUE constraint failed: index 'index_0'",
		"oracle" : "error (reindex)",
		"dbms" : "sqlite",
		"comment" : "As described in one of the commit messages for this fix, addressing this bug required a \"big change\" in the code."
	},
	{
		"date" : "3/5/2019",
		"title" : "GLOB and minus in index and real column",
		"links" : {
			"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084367.html",
			"fix" : "https://www.sqlite.org/src/info/5a8a23ee5f60a31d"
		},
		"status" : "closed (duplicate)",
		"test" : "CREATE TABLE test (c0 REAL);\nCREATE UNIQUE INDEX index_0 ON test(('0' GLOB -c0));\nINSERT INTO test(c0) VALUES (1.0), (0.0);\nREINDEX;",
		"oracle" : "error (reindex)",
		"dbms" : "sqlite"
	},
	{
		"date" : "4/5/2019",
		"title" : "Incorrect result on a table scan of a partial index",
		"links" : {
			"bugtracker" : "https://www.sqlite.org/src/tktview?name=5c6955204c",
			"fix" : "https://www.sqlite.org/src/info/c2e439bccc40825e211bf",
			"email" : "https://www.mail-archive.com/sqlite-users@mailinglists.sqlite.org/msg115136.html"
		},
		"comment" : "This issue was classified as \"severe\", was since 2013 in SQLite, and was a bug in the theorem prover.",

		"status" : "fixed",
		"oracle" : "pqs",
		"dbms" : "sqlite",
		"test" : "CREATE TABLE t0(c0);\nCREATE INDEX index_0 ON t0(c0) WHERE (~c0) NOT NULL;\nINSERT INTO t0(c0) VALUES (NULL);\nSELECT * FROM t0 WHERE (LIKELY(~c0) OR TRUE); -- no row fetched",
		"severity" : "Severe"
	},
	{
		"title" : "REAL PRIMARY KEY and floating point comparison does not work",
		"date" : "5/5/2019",
		"status" : "closed (duplicate)",
		"links" : {
			"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084409.html"
		},
		"oracle" : "pqs",
		"dbms" : "sqlite",
		"test" : "CREATE TABLE t1 (c0, c1 REAL, PRIMARY KEY (c1, c0));\nINSERT INTO t1(c1) VALUES (0X7ffffffffffffff);\nSELECT * FROM t1 WHERE c1 IN (SELECT c1 FROM t1);"
	},
	{
		"title" : "ALTER TABLE fails when renaming an INTEGER PRIMARY KEY column in a WITHOUT ROWID table",
		"date" : "6/5/2019",
		"status" : "fixed",
		"links" : {
			"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084426.html",
			"fix" : "https://sqlite.org/src/info/91f701d39852ef1ddb29"
		},
		"oracle" : "error (alter table)",
		"dbms" : "sqlite",
		"test" : "CREATE TABLE t0 (c0 INTEGER, PRIMARY KEY (c0)) WITHOUT ROWID;\nALTER TABLE t0 RENAME COLUMN c0 TO c1; -- no such column: c0"
	},
	{
		"title" : "INSERT OR FAIL inserts row although it violates a table constraint",
		"date" : "7/5/2019",
		"status" : "fixed",
		"links" : {
			"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084439.html",
			"fix1" : "https://www.sqlite.org/src/info/659c551dcc374a0d",
			"fix2" : "https://www.sqlite.org/src/info/3f1c8051648a341d"
		},
		"oracle" : "pqs",
		"comment" : "As described on the mailing list, this bug report exposed two bugs and required two different fixes.",
		"dbms" : "sqlite",
		"test" : "PRAGMA foreign_keys=true;\nCREATE TABLE t0 (c0 UNIQUE, c1 UNIQUE, FOREIGN KEY(c0) REFERENCES t0(c1));\nINSERT OR FAIL INTO t0(c0, c1) VALUES (0, 1);\nINSERT OR FAIL INTO t0(c0, c1) VALUES (0, 2);\nSELECT * FROM t0; -- returns no row"
	},
	{
		"title" : "Incorrect result for \"<\" and \"<=\" comparison of rowid and non-numeric text value",
		"date" : "7/5/2019",
		"status" : "fixed",
		"links" : {
			"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084460.html",
			"bugtracker" : "https://www.sqlite.org/src/tktview?name=9cf6c9bb51",
			"fix" : "https://www.sqlite.org/src/info/658b84d7"
		},
		"oracle" : "pqs",

		"dbms"  : "sqlite",
		"comment" : "The bug was classified as \"severe\" and existed in SQLite since 2013.",
		"test" : "CREATE TABLE t0(c0);\nCREATE TABLE t1(c0 INTEGER PRIMARY KEY);\nPRAGMA reverse_unordered_selects=true;\nINSERT INTO t1(c0) VALUES (0);\nINSERT INTO t0(c0) VALUES ('a');\nSELECT * FROM t1, t0 WHERE t1.c0 < t0.c0; -- no row is fetched",
		"severity" : "Severe"
	},
	{
		"title" : "'./' LIKE './' does not match",
		"date" : "8/5/2019",
		"status" : "fixed",
		"links" : {
			"fix" : "https://www.sqlite.org/src/info/740201107ae802c1",
			"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084478.html"
		},
		"oracle" : "pqs",

		"dbms" : "sqlite",
		"test" : "CREATE TABLE t0(c0 INT UNIQUE COLLATE NOCASE);\nINSERT INTO t0(c0) VALUES ('./');\nSELECT * FROM t0 WHERE t0.c0 LIKE './'; -- fetches no rows"
	},
	{
		"title" : "Row is not fetched with PRAGMA reverse_unordered_selects=true",
		"date" : "9/5/2019",
		"status" : "fixed",
		"links" : {
			"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084480.html",
			"fix" : "https://www.sqlite.org/src/info/ebe4845cd0ffb96b"
		},
		"oracle" : "pqs",

		"dbms" : "sqlite",
		"test" : "CREATE TABLE t0(c0 INTEGER PRIMARY KEY);\nINSERT INTO t0(c0) VALUES (1);\nPRAGMA reverse_unordered_selects=true;\nSELECT * FROM t0 WHERE ((t0.c0 > 'a') OR (t0.c0 <= 'a')); -- fetches no row\nSELECT ((t0.c0 > 'a') OR (t0.c0 <= 'a')) FROM t0; -- returns 1"
	},
	{
		"date" : "9/5/2019",
		"status" : "fixed",
		"title" : "Malformed database image when using a REAL PRIMARY KEY",
		"links" : {
			"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084483.html",
			"bugtracker" : "https://www.sqlite.org/src/tktview/6c1d3febc00b22d457c7",
			"fix" : "https://www.sqlite.org/src/info/9b0915272f4d4052"
		},
		"oracle" : "error (select)",

		"dbms" : "sqlite",
		"test" : "CREATE TABLE t1 (c0, c1 REAL PRIMARY KEY);\nINSERT INTO t1(c0, c1) VALUES (TRUE, 9223372036854775807), (TRUE, 0);\nUPDATE t1 SET c0 = NULL;\nUPDATE OR REPLACE t1 SET c1 = 1;\nSELECT DISTINCT * FROM t1 WHERE (t1.c0 IS NULL); -- database disk image is malformed",
		"comment" : "This bug was classified as \"severe\" and existed in SQLite since 2015.",
		"severity" : "Severe"
	},
	{
		"date" : "10/5/2019",
		"status" : "fixed",
		"title" : "Incorrect handling of Infinity by the ROUND function",
		"links" : {
			"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084497.html",
			"fix" : "https://www.sqlite.org/src/info/db9acef14d492121"
		},
		"oracle" : "pqs",

		"dbms" : "sqlite",
		"test" : "SELECT 1e500 >= 1,  CAST(1e500 AS INT) >= CAST(1 AS INT), ROUND(1e500) >= ROUND(1); -- 1|1|0"
	},
	{
		"date" : "11/5/2019",
		"status" : "fixed",
		"title" : "Partial NOT NULL index malfunctions with IS NOT/!=",
		"links" : {
			"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084499.html",
			"bugtracker" : "https://sqlite.org/src/tktview/80256748471a01",
			"fix" : "https://sqlite.org/src/info/0ba6d709"
		},
		"oracle" : "pqs",

		"dbms" : "sqlite",
		"test" : "CREATE TABLE IF NOT EXISTS t0 (c0);\nCREATE INDEX IF NOT EXISTS i0 ON t0(1) WHERE c0 NOT NULL;\nINSERT INTO t0(c0) VALUES(NULL);\nSELECT * FROM t0 WHERE t0.c0 IS NOT 1; -- returns no row",
		"comment" : "This bug was classified as \"critical\" and was in SQLite since 2013.",
		"severity" : "Critical"
	},
  {
	  "date" : "13/5/2019",
	  "status" : "closed (not a bug)",
	  "title" : "Mixing main and temp databases in foreign keys is not supported",
	  "links" : {
		  "email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084515.html"
	  },
	  "oracle" : "error",
	  "dbms" : "sqlite",
	  "test" : "PRAGMA foreign_keys=true;\nCREATE TABLE t0 (c0 PRIMARY KEY);\nCREATE TEMP TABLE t1 (c0, FOREIGN KEY(c0) REFERENCES t0(c0));\nINSERT INTO t1(c0) VALUES (1); -- no such table: temp.t0"
  },
  {
	"date" : "13/5/2019",
	"status" : "fixed",
	"title" : "REINDEX causes rows not to be fetched in a WITHOUT ROWIDs table and PRIMARY KEY DESC",
	"links" : {
		"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084528.html",
		"bugtracker" : "https://www.sqlite.org/src/tktview?name=bba7b69f98",
		"fix" : "https://www.sqlite.org/src/info/f7aadfab3bb8eb8e"
	},
	"oracle" : "pqs",

	"dbms" : "sqlite",
	"test" : "CREATE TABLE t0 (c0 PRIMARY KEY DESC, c1 UNIQUE DEFAULT NULL) WITHOUT ROWID;\nINSERT INTO t0(c0) VALUES (1), (2), (3), (4), (5);\nREINDEX;\nSELECT * FROM t0 WHERE t0.c0 IN (SELECT c0 FROM t0) AND t0.c1 ISNULL; -- fetches only one row instead of all five rows",
	"comment" : "The bug highlights a conceptual issue in SQLite and cannot be fixed without breaking backward compatibility. The issue received its own name, namely the \"WITHOUT ROWID DESC PRIMARY KEY UNIQUE constraint index anomaly\". Nevertheless, as stated in the bug report, it is unlikely that real-world applications are affected.",
	"severity" : "Important"
  },
  {
  "date" : "14/5/2019",
  "status" : "fixed",
  "title" : "PRAGMA reverse_unordered_selects=true results in row not being fetched",
  "links" : {
	"email" : "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084539.html",
	"fix" : "https://www.sqlite.org/src/info/bc7d2c1656396bb4"
  },
  "comment" : "This bug was introduced while fixing another bug that I had previously found.",
  "dbms" : "sqlite",
  "oracle" : "pqs",
  "test" : "PRAGMA reverse_unordered_selects=true;\nCREATE TABLE t1 (c0, c1); CREATE TABLE t2 (c0 INT UNIQUE);\nINSERT INTO t1(c0, c1) VALUES (0, 0), (0, NULL);\nINSERT INTO t2(c0) VALUES (1);\nSELECT 1, NULL INTERSECT SELECT * FROM (SELECT t2.c0, t1.c1 FROM t1, t2 WHERE ((t2.rowid <= 'a')) OR (t1.c0 <= t2.c0) ORDER BY 'a' DESC LIMIT 100); -- no row is fetched"
 },
 {
	 "title" : "REAL rounding seems to depend on FROM clause",
	"date" : "16/5/2019",
	"status" : "fixed",
	"links" : {
		"bugtracker" : "https://www.sqlite.org/src/tktview?name=3c27b97e31",
		"fix" : "https://www.sqlite.org/src/info/14c00b1016ba53ab"
	},
	"dbms" : "sqlite",
	"oracle" : "pqs",
	"test" : "CREATE TABLE t0 (c0);\nCREATE TABLE t1 (c1 REAL);\nINSERT INTO t1(c1) VALUES (8366271098608253588);\nINSERT INTO t0(c0) VALUES ('a');\nSELECT * FROM t1 WHERE (t1.c1 = CAST(8366271098608253588 AS REAL)); -- fetches row\nSELECT * FROM t0, t1 WHERE (t1.c1 = CAST(8366271098608253588 AS REAL)); -- fetches no row\nSELECT * FROM t0, t1 WHERE (t1.c1 >= CAST(8366271098608253588 AS REAL) AND t1.c1 <= CAST(8366271098608253588 AS REAL)); -- fetches row",
	"severity" : "Important"
 },
 {
	 "title" : "Malformed image when using no journal mode, zero cache size, and failing when creating an index",
	 "date" : "16/5/2019",
	 "status" : "fixed (in documentation)",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview?name=f4ec250930",
		 "fix" : "https://www.sqlite.org/src/info/a0f5eb5c79cc33b7"
	 },

	 "oracle" : "error (reindex)",
	 "test" : "PRAGMA journal_mode=OFF;\nPRAGMA main.cache_size=0;\nCREATE TABLE IF NOT EXISTS t0 (c0);\nCREATE INDEX i0 ON t0(1);\nDROP INDEX \"i0\";\nINSERT OR IGNORE INTO t0(c0) VALUES (1), (2);\nCREATE UNIQUE INDEX i0 ON t0(1); -- UNIQUE constraint failed: index 'i0'\nCREATE UNIQUE INDEX i0 ON t0(1); -- database disk image is malformed",
	 "dbms" : "sqlite",
	 "comment" : "Although this was not recognized as a bug, the bug report resulted in a documentation update and change in the default options for SQLite's defensive configuration.",
	 "severity" : "Minor"
 },
 {
	 "title" : "Query results in a SEGFAULT",
	 "date" : "18/5/2019",
	 "status" : "fixed",
	 "links" : {
		 "bugtracker" : "https://sqlite.org/src/info/787fa716be3a7f650c",
		 "fix" : "https://sqlite.org/src/info/778b1224a318d013"
	 },

	 "oracle" : "segfault",
	 "test" : "CREATE TABLE t0 (c0, c1, PRIMARY KEY (c0, c1));\nCREATE TABLE t1 (c0);\nINSERT INTO t1 VALUES (2);\nSELECT * FROM t0, t1 WHERE (t0.c1 >= 1 OR t0.c1 < 1) AND t0.c0 IN (1, t1.c0) ORDER BY 1; -- results in a segfault",
	 "dbms" : "sqlite",
	 "severity" : "Severe"
 },
 {
	 "title" : "Index on non-existing column results in a fabricated value being fetched",
	 "test" : "CREATE TABLE t0(c1, c2);\nINSERT INTO t0(c1, c2) VALUES  ('a', 1);\nCREATE INDEX i0 ON t0(\"C3\");\nALTER TABLE t0 RENAME COLUMN c1 TO c3;\nSELECT DISTINCT * FROM t0; -- fetches C3|1 rather than a|1",
	 "date" : "19/5/2019",
	 "status" : "fixed",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview/9b78184be266fd7084e9e8038ad631a21b37eb9e",
		 "fix1" : "https://www.sqlite.org/src/info/1685610e",
		 "fix2" : "https://www.sqlite.org/src/info/3e1b55f3ab85710e"
	 },

	 "oracle" : "pqs",
	 "dbms" : "sqlite",
	 "comment" : "This bug report resulted in a change of the accepted SQL dialect, disallowing strings in double quotes when creating indexes.",
	 "severity" : "Cosmetic"
 },
 {
	 "date" : "19/5/2019",
	 "title" : "Nested boolean formula with IN operator computes an incorrect result",
	 "test" : "CREATE TABLE t0(c0);\nINSERT INTO t0(c0) VALUES ('val');\nSELECT * FROM t0 WHERE (((0 IS NOT FALSE) OR NOT (0 IS FALSE OR (t0.c0 IN (-1)))) IS 0); -- fetches no row",
	 "dbms" : "sqlite",
	 "oracle" : "pqs",
	 "status" : "fixed",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview?name=d3e7f2ba5b",
		 "fix" : "https://www.sqlite.org/src/info/99eba69b3a64741c"
	 },
	 "comment" : "This bug uncovered that the compiler somtimes confuses x IS TRUE with x IS FALSE, and the other way around.",
	 "severity" : "Important"
 },
 {
	 "date" : "21/5/2019",
	 "title" : "\"Malformed database schema\" when creating a failing index within a transaction",
	 "status" : "fixed",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview/b5ca442af9fadf5eff5b2bf64839516ab82cfc3d",
		 "fix" : "https://www.sqlite.org/src/info/b8071d10cba8f6c1"
	 },

	 "oracle" : "error (CREATE INDEX)",
	 "dbms" : "sqlite",
	 "test" : "CREATE TABLE IF NOT EXISTS t0(c0);\nINSERT INTO t0(c0) VALUES (-9223372036854775808);\nBEGIN TRANSACTION;\nCREATE INDEX i0 ON t0(ABS(c0)); -- integer overflow (expected)\nCOMMIT; -- unexpected: the index is still created\nCREATE INDEX i0 ON t0(1); -- malformed database schema (i0) - index i0 already exists",
	 "severity" : "Cosmetic"
 },
 {
	 "date" : "25/5/2019",
	 "title" : "CAST('-' AS NUMERIC) computes 0.0",
	 "status" : "fixed",

	 "oracle" : "pqs",
	 "dbms" : "sqlite",
	 "test" : "SELECT CAST('-' AS NUMERIC); -- unexpected: computes 0.0 rather than 0",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview?name=4c2d7639f0",
		 "fix" : "https://www.sqlite.org/src/info/67a68af5578f08d2"
	 },
	 "severity" : "Minor"
 },
 {
	 "date" : "25/5/2019",
	 "title" : "Incorrect result when subtracting a large integer number from a TEXT value",
	 "status" : "fixed",

	 "oracle" : "pqs",
	 "dbms" : "sqlite",
	 "test" : "SELECT '' - 2851427734582196970; -- actual: -2851427734582196736, expected: -2851427734582196970",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview?name=e8bedb2a18",
		 "fix" : "https://www.sqlite.org/src/info/67a68af5578f08d2"
	 },
	 "severity" : "Minor"
 },
 {
	 "date" : "08/06/2019",
	 "title" : "CAST to NUMERIC no longer converts to INTEGER",
	 "status" : "fixed",

	 "oracle" : "pqs",
	 "dbms" : "sqlite",
	 "test" : "CREATE TABLE t0 (c0 TEXT);\nINSERT INTO t0(c0) VALUES ('1.0');\nSELECT CAST(c0 AS NUMERIC) FROM t0; -- expected: 1, actual: 1.0",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview/dd6bffbfb6e61db9ecc9ea833d586427961ccc9d",
		 "fix" : "https://www.sqlite.org/src/info/c0c90961b4fa1c11"
	 },
	 "severity" : "Minor"
 },
 {
	 "date" : "10/06/2019",
	 "title" : "TEXT value interpreted as column name in an index with empty list in an IN expression",
	 "status" : "fixed",

	 "oracle" : "error (ALTER TABLE)",
	 "dbms" : "sqlite",
	 "test" : "CREATE TABLE t0(c0);\nCREATE INDEX i0 ON t0('1' IN ());\nALTER TABLE t0 RENAME TO t1; -- error in index i0: no such column: 1",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview/fd76310a5e843e074a30ed98b859dd0be11d0276",
		 "fix" : "https://sqlite.org/src/info/567b13093956185b"
	 },
	"severity" : "Critical"
 },
 {
	 "date" : "10/06/2019",
	 "title" : "LIKE malfunctions for INT PRIMARY KEY COLLATE NOCASE column",
	 "status" : "fixed",

	 "oracle" : "pqs",
	 "dbms" : "sqlite",
	 "test" : "CREATE TABLE t0(c0 INT PRIMARY KEY COLLATE NOCASE);\nINSERT INTO t0 VALUES (' 1-');\nSELECT * FROM t0 WHERE t0.c0 LIKE ' 1-'; -- expected: ' 1-', actual: no row is fetched",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview?name=b1d8c79314",
		 "fix" : "https://sqlite.org/src/info/94b58ab059cba977"
	 },
	 "severity" : "Critical"
 },
 {
	 "date" : "10/06/2019",
	 "title" : "Illegal argument to LIKELIHOOD() does not result in error when combined with \"IN ()\"",
	 "status" : "fixed",

	 "oracle" : "error (ALTER TABLE)",
	 "dbms" : "sqlite",
	 "test" : "CREATE TABLE t1 (c0);\nCREATE INDEX i0 ON t1((LIKELIHOOD(c0, 100) IN ())); -- unexpected: no error\nALTER TABLE t1 RENAME COLUMN c0 TO c1; -- error occurs only here: second argument to likelihood() must be a constant between 0.0 and 1.0",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview?name=533010b8ca",
		 "fix" : "https://www.sqlite.org/src/info/71643deb"
	 },
	 "severity" : "Critical"
 },
 {
	 "date" : "10/06/2019",
	 "title" : "CAST('.' AS NUMERIC) computes 0.0 rather than 0",
	 "status" : "fixed",

	 "oracle" : "pqs",
	 "dbms" : "sqlite",
	 "test" : "SELECT -'.'; -- expected: 0, actual: 0.0",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview?name=412bba9b22",
		 "fix" : "https://www.sqlite.org/src/info/57050162294efec9"
	 },
	 "severity" : "Minor"
 },
 {
	 "date" : "10/06/2019",
	 "title" : "COLLATE expression has an affinity",
	 "status" : "fixed (in documentation)",

	 "oracle" : "pqs",
	 "dbms" : "sqlite",
	 "test" : "SELECT ((CAST(1 as INT)) COLLATE BINARY) == '1'; -- expected: 0, actual: 1",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview/d60b3cd7cb0bdff8ff39f76c9faf16ba2efa442f",
		 "fix" : "https://www.sqlite.org/docsrc/info/722f0828b3074e89"
	 },
	 "severity" : "Minor"
 },
 {
	 "date" : "10/06/2019",
	 "title" : "Another case of Illegal argument to LIKELIHOOD() does not result in error when combined with \"IN ()\"",
	 "status" : "fixed",

	 "oracle" : "error (ALTER TABLE)",
	 "dbms" : "sqlite",
	 "test" : "CREATE TABLE t0(c0);\nCREATE INDEX i0 ON t0(((LIKELIHOOD(1, 2)) AND ((1 IN ())))); -- unexpected: no error\nALTER TABLE t0 RENAME TO t1; -- -- error occurs only here: second argument to likelihood() must be a constant between 0.0 and 1.0",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview/533010b8cacebe82533a8cd4e230fbb819565115",
		 "fix" : "https://www.sqlite.org/src/info/04bd5cb73287f926"
	 },
	"severity" : "Critical"
 },
 {
	 "date" : "11/06/2019",
	 "title" : "-'1.0' computes -1.0 rather than -1",
	 "status" : "fixed (in documentation)",

	 "oracle" : "pqs",
	 "dbms" : "sqlite",
	 "test" : "SELECT -'1.0'; -- expected: -1, actual: -1.0",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview?name=1819598c09",
		 "fix" : "https://www.sqlite.org/docsrc/info/e0f700bb6c8142c5"
	 },
	 "severity" : "Critical"
 },
 {
	 "date" : "11/06/2019",
	 "title" : "COLLATE expression in the right side of an IN operator results in an affinity conversion",
	 "status" : "fixed",

	 "oracle" : "pqs",
	 "dbms" : "sqlite",
	 "test" : "SELECT (1 IN (CAST('1' as TEXT) COLLATE NOCASE)); -- expected: 0, actual: 1",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview?name=57353f8243",
		 "fix" : "https://www.sqlite.org/src/info/0f748fe58bbbb7ce"
	 },
	 "severity" : "Minor"
 },
 {
	 "date" : "11/06/2019",
	 "title" : "Lossless conversion when casting a large TEXT number to NUMERIC is not performed",
	 "status" : "fixed (in documentation)",

	 "oracle" : "pqs",
	 "dbms" : "sqlite",
	 "test" : "SELECT CAST('8.2250617031974513E18' AS NUMERIC); -- expected: 8225061703197451300, unexpected: 8.22506170319745e+18",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview?name=afdc5a29dc",
		 "fix" : "https://www.sqlite.org/docsrc/info/7a51b32537ac7e95"
	 },
	 "severity" : "Minor"
 },
 {
	 "date" : "11/06/2019",
	 "title" : "LIKELY(), UNLIKELY() and LIKELIHOOD() have affinities",
	 "status" : "fixed",
	 "oracle" : "pqs",

	 "dbms" : "sqlite",
	 "test" : "SELECT LIKELY(CAST(1 AS INT)) = '1'; -- expected: 0, actual: 1\nSELECT UNLIKELY(CAST(1 AS INT)) = '1'; -- expected: 0, actual: 1\nSELECT LIKELIHOOD(CAST(1 AS INT), 0.5) = '1'; -- expected: 0, actual: 1",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview?name=0c620df60b",
		 "fix" : "https://www.sqlite.org/src/info/614ecb0af4703884"
	 },
	 "severity" : "Minor"
 },
 {
	 "date" : "12/06/2019",
	 "title" : "IS TRUE operator malfunctions with COLLATE and REAL value",
	 "status" : "fixed",

	 "oracle" : "pqs",
	 "dbms" : "sqlite",
	 "test" : "SELECT 0.5 IS TRUE COLLATE NOCASE; -- expected: 1, actual: 0\nSELECT 0.5 IS TRUE COLLATE RTRIM; -- expected: 1, actual: 0\nSELECT 0.5 IS TRUE COLLATE BINARY; -- expected: 1, actual: 0",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview?name=4d01eda811",
		 "fix" : "https://www.sqlite.org/src/info/5c6146b56a75a94f"
	 },
	 "severity" : "Critical"
 },
 {
	 "date" : "12/06/2019",
	 "title" : "CAST('-0.0' AS NUMERIC) computes 0.0 rather than 0",
	 "status" : "fixed",

	 "oracle" : "pqs",
	 "dbms" : "sqlite",
	 "test" : "SELECT CAST('-0.0' AS NUMERIC); -- expected: 0, unexpected: 0.0",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview/674385aeba91c774d47736f1aefd259b074dc5d3",
		 "fix" : "https://www.sqlite.org/src/info/491f0f9bbddb6302"
	 },
	 "comment" : "Opening this bug report also (indirectly) caused a discussion on the mailing list on how -0.0 should be printed by SQLite, with over 50 replies (see http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-June/084857.html).",
	 "severity" : "Minor"
 },
 {
	 "date" : "12/06/2019",
	 "title" : "CAST takes implicit COLLATE of its operand",
	 "status" : "fixed (in documentation)",

	 "dbms" : "sqlite",
	 "oracle" : "pqs",
	 "test" : "CREATE TABLE t0(c0 COLLATE NOCASE);\nINSERT INTO t0(c0) VALUES ('a');\nSELECT * FROM t0 WHERE CAST(t0.c0 AS TEXT) = 'A'; -- expected: no row is fetched, actual: a",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview?name=b148fa6105",
		 "fix" : "https://www.sqlite.org/docsrc/info/9f887f15e57978df"
	 },
	 "severity" : "Minor"
 },
 {
	 "date" : "14/06/2019",
	 "title" : "LIKE malfunctions for UNIQUE COLLATE NOCASE column",
	 "status" : "fixed",

	 "dbms" : "sqlite",
	 "oracle" : "pqs",
	 "test" : "CREATE TABLE t0(c0 INT UNIQUE COLLATE NOCASE);\nINSERT INTO t0(c0) VALUES ('.1%');\nSELECT * FROM t0 WHERE t0.c0 LIKE '.1%'; -- expected: '.1%', actual: no row is fetched",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview?name=ce8717f088",
		 "fix" : "https://www.sqlite.org/src/info/b4a9e09e60213ccf"
	 },
	 "severity" : "Severe"
 },
 {
	 "date" : "14/06/2019",
	 "title" : "Built-in RTRIM collating sequence yields incorrect comparisons",
	 "status" : "fixed",

	 "dbms" : "sqlite",
	 "oracle" : "pqs",
	 "test" : "CREATE TABLE t0(c0 COLLATE RTRIM, c1 BLOB UNIQUE, PRIMARY KEY (c0, c1)) WITHOUT ROWID;\nINSERT INTO t0 VALUES (123, 3), (' ', 1), ('\t', 2), ('', 4);\nSELECT * FROM t0 WHERE c1 = 1; -- expected: ' ', 1, actual: no row is fetched",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview?name=f1580ba1b5",
		 "fix" : "https://www.sqlite.org/src/info/86fa0087cd1f5c79"
	 },
	 "comment" : "This problem has existing in the RTRIM collating sequence since it was first introduced in 2008.",
	 "severity" : "Important"
 },
 {
	"date" : "15/06/2019",
	"title" : "REPAIR TABLE on a functional table marks it as crashed",
	"status" : "verified",

	"dbms" : "mysql",
	"test" : "CREATE TABLE t0(c0 INT UNIQUE, c1 INT, c2 INT UNIQUE) ENGINE = MyISAM;\nINSERT INTO t0(c0) VALUES(DEFAULT), (\"\");\nINSERT IGNORE INTO t0(c2) VALUES(\"a\");\nREPLACE INTO t0(c1, c0, c2) VALUES(1, DEFAULT, DEFAULT), (DEFAULT, \"a\", \"a\");\nREPAIR TABLE t0 QUICK EXTENDED USE_FRM;\nSELECT * FROM t0; -- unexpected: Table 'to' is marked as crashed and last (automatic?) repair failed",
	"oracle" : "error (SELECT)",
	"links" : {
		"bugtracker" : "https://bugs.mysql.com/bug.php?id=95820"
	}
 },
 {
	 "date" : "16/06/2019",
	 "title" : "COLLATE in BETWEEN expression is ignored",
	 "status" : "fixed",

	 "dbms" : "sqlite",
	 "oracle" : "pqs",
	 "test" : "CREATE TABLE t0 (c3 TEXT);\nINSERT INTO t0(c3) VALUES ('0');\nSELECT * FROM t0 WHERE (t0.c3 COLLATE NOCASE) BETWEEN 1 AND '5'; -- expected: no row is fetched, actual: row is fetched",
	 "links" : {
		 "bugtracker" : "https://www.sqlite.org/src/tktview?name=e1e07ef202",
		 "fix" : "https://www.sqlite.org/src/info/54110870487f7801"
	 },
	 "severity" : "Important"
 },
 {
	 "date" : "18/06/2019",
	 "title" : "\"Can't find record\" error in SELECT statement 1 (MyISAM engine)",
	 "status" : "verified",
	 "oracle" : "error (SELECT)",

	 "dbms" : "mysql",
	 "test" : "CREATE TABLE t0(c0 INT UNIQUE, c1 INT, c2 INT, c3 INT UNIQUE) ENGINE = MyISAM;\nINSERT INTO t0(c0) VALUES(DEFAULT), (\"a\");\nINSERT IGNORE INTO t0(c3) VALUES(\"a\"), (1);\nREPLACE INTO t0(c1, c0, c3) VALUES(1, 2, 3), (1, \"a\", \"a\");\nSELECT (NULL) IN (SELECT t0.c3 FROM t0 WHERE t0.c0);",
	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95856"
	 }
 },
 {
	 "date" : "18/06/2019",
	 "title" : "\"Can't find record\" error in SELECT statement 2 (HEAP engine)",
	 "status" : "verified",
	 "oracle" : "error (SELECT)",

	 "dbms" : "mysql",
	 "test" : "CREATE TABLE t0(c0 INT UNIQUE) ENGINE = HEAP;\nINSERT INTO t0(c0) VALUES (DEFAULT), (\"a\"), (\"a\");\nSELECT (NULL) IN (SELECT t0.c0 FROM t0 WHERE ((t0.c0) OR TRUE) IS NULL); -- unexpected: ERROR 1032 (HY000): Can't find record in 't0'",
	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95866"
	 }
 },
 {
	 "date" : "20/06/2019",
	 "title" : "Functional index seems to malfunction with UNSIGNED column",
	 "status" : "fixed",
	 "oracle" : "error (CREATE INDEX)",

	 "dbms" : "mysql",
	 "test" : "CREATE TABLE t0(c0 INT UNSIGNED);\nINSERT INTO t0(c0) VALUES(4294967294);\nCREATE INDEX i0 ON t0((ABS(t0.c0))); -- unexpected: ERROR 3752 (22003): Value is out of range for functional index 'i0'",
	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95889"
	 }
 },
 {
	 "date" : "20/06/2019",
	 "title" : "DROP PRIMARY KEY on UNIQUE PRIMARY KEY does not update information_schema.column",
	 "status" : "verified",
	 "oracle" : "error (ALTER TABLE)",

	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95894"
	 },
	 "dbms" : "mysql",
	 "test" : "CREATE TABLE t0(c0 INT PRIMARY KEY UNIQUE);\nALTER TABLE t0 DROP PRIMARY KEY;\nselect COLUMN_KEY, COLUMN_NAME from information_schema.columns where table_schema = 'a' and TABLE_NAME = 't0'; -- unexpected: c0 is still shown as PRI\nALTER TABLE t0 DROP PRIMARY KEY; -- ERROR 1091 (42000): Can't DROP 'PRIMARY'; check that column/key exists"
 },
 {
	 "date" : "20/06/2019",
	 "title" : "DROP COLUMN error on INVISIBLE UNIQUE INDEX that refers to constant expression",
	 "false_positive" : "yes",
	 "status" : "closed (not a bug)",
	 "oracle" : "error (ALTER TABLE)",

	 "dbms" : "mysql",
	 "test" : "CREATE TABLE t0(c0 INT, c1 INT PRIMARY KEY);\nCREATE UNIQUE INDEX i0 ON t0((TRUE)) INVISIBLE;\nALTER TABLE t0 DROP c1; -- unexpected: ERROR 3522 (HY000): A primary key index cannot be invisible",
	 "links" : {
		"bugtracker" : "https://bugs.mysql.com/bug.php?id=95897"
	 }
 },
 {
	 "date" : "20/06/2019",
	 "title" : "Applying NOT twice on an integer results in wrong result in WHERE condition",
	 "status" : "closed (duplicate)",
	 "oracle" : "pqs",
	 "fix_version" : "8.0.17",

	 "dbms" : "mysql",
	 "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0(c0) VALUES(1);\nSELECT * FROM t0 WHERE 123 != (NOT (NOT 123)); -- expected: row is fetched, actual: row is not fetched",
	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95900"
	 },
	 "comment" : "We found this bug on the latest public version of MySQL. The bug report was closed, since the bug had already been fixed internally."
 },
 {
	 "date" : "21/06/2019",
	 "title" : "The negation of a \"<=>\" comparison malfunctions depending on the column's type",
	 "status" : "fixed",
	 "fix_version" : "8.0.17",
	 "oracle" : "pqs",

	 "dbms" : "mysql",
	 "test" : "CREATE TABLE t0(c0 TINYINT);\nINSERT INTO t0(c0) VALUES(NULL);\nSELECT * FROM t0 WHERE NOT(t0.c0 <=> 2035382037); -- expected: row is fetched, actual: no row is fetched",
	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95908"
	 }
 },
 {
	 "date" : "22/06/2019",
	 "title" : "Row is not fetched when using a function expression that should yield TRUE",
	 "status" : "fixed",
	 "fix_version" : "8.0.17",
	 "oracle" : "pqs",

	 "dbms" : "mysql",
	 "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0(c0) VALUES(1);\nSELECT * FROM t0 WHERE IF(FALSE, t0.c0, 0.1); -- expected: row is fetched, actual: row is not fetched",
	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95926"
	 },
	 "comment" : "The bug was fixed in 8.0.17, but not necessarily based on our bug report, since it was not referenced."
 },
 {
	 "date" : "22/06/2019",
	 "title" : "XOR operator returns incorrect result for strings with a floating-point number",
	 "status" : "fixed",
	 "oracle" : "pqs",

	 "dbms" : "mysql",
	 "test" : "SELECT FALSE XOR '0.5'; -- expected: 1, actual: 0",
	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95927"
	 }
 },
 {
	 "date" : "22/06/2019",
	 "title" : "Duplicate entry for key 'PRIMARY' when querying information_schema.TABLES",
	 "status" : "fixed",
	 "oracle" : "error (SELECT)",
	 "fix_version" : "8.0.20",

	 "dbms" : "mysql",
	 "test" : "CREATE TABLE t0(c0 INT) ENGINE = MyISAM;\nselect * from information_schema.TABLES; -- unexpected (when executed with multiple threads): Duplicate entry 'triggerbug21-t0' for key 'PRIMARY'",
	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95929"
	 }
 },
 {
	 "date" : "23/06/2019",
	 "title" : "CHECK TABLE FOR UPGRADE crashes server (segfault)",
	 "status" : "fixed",
	 "fix_version" : "8.0.17",
	 "oracle" : "segfault",

	 "dbms" : "mysql",
	 "test" : "DROP DATABASE IF EXISTS test;\nCREATE DATABASE test;\nUSE test;\nCREATE TABLE t0(c0 INT);\nCREATE INDEX i0 ON t0((t0.c0 || 1));\nINSERT INTO t0(c0) VALUES(1);\nCHECK TABLE t0 FOR UPGRADE; -- results in a segfault when executed with multiple threads",
	 "cve" : "CVE-2019-2879",
	 "comment" : "This bug report revealed a security vulnerability that was fixed in a Critical Patch Update (CVSSv3.0 Base Score: 4.9)"
 },
 {
	 "date" : "24/06/2019",
	 "title" : "BENCHMARK() returns NULL in some cases but is documented to always return 0",
	 "status" : "fixed (in documentation)",
	 "oracle" : "pqs",

	 "dbms" : "mysql",
	 "test" : "SELECT BENCHMARK(NULL, 1); -- expected: 0, actual: NULL\nSELECT BENCHMARK(-1, 1); -- expected: 0, actual: NULL",
	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95937"
	 }
 },
 {
	 "date" : "24/06/2019",
	 "title" : "Function return value with newline yields wrong result when used as a boolean",
	 "status" : "fixed",
	 "fix_version" : "8.0.17",
	 "oracle" : "pqs",

	 "dbms" : "mysql",
	 "test" : "CREATE TABLE t0(c0 TEXT);\nINSERT IGNORE INTO t0(c0) VALUES(\"\\n123\");\nSELECT * FROM t0 WHERE COALESCE(t0.c0); -- expected: row is fetched, actual: no row is fetched\nSELECT * FROM t0 WHERE IFNULL(t0.c0, 1); -- expected: row is fetched, actual: no row is fetched",
	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95938"
	 }
 },
 {
	 "date" : "24/06/2019",
	 "title" : "TEXT column used as boolean incorrectly evaluates to false",
	 "status" : "fixed",
	 "fix_version" : "8.0.17",
	 "oracle" : "pqs",

	 "dbms" : "mysql",
	 "test" : "CREATE TABLE t0(c0 TEXT);\nINSERT INTO t0(c0) VALUES(0.9);\nSELECT * FROM t0 WHERE t0.c0; -- expected: row is fetched, actual: row is not fetched",
	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95942"
	 }
 },
 {
	 "date" : "24/06/2019",
	 "title" : "CAST of negative function return value to UNSIGNED malfunctions with BIGINT",
	 "status" : "fixed",
	 "oracle" : "pqs",
	 "fix_version" : "8.0.18",

	 "dbms" : "mysql",
	 "test" : "CREATE TABLE t0(c0 BIGINT UNSIGNED);\nINSERT INTO t0(c0) VALUES(NULL);\nSELECT * FROM t0 WHERE CAST(COALESCE(t0.c0, -1) AS UNSIGNED); -- expected: row is selected, actual: no row is selected\nSELECT * FROM t0 WHERE CAST(IFNULL(t0.c0, -1) AS UNSIGNED); -- expected: row is selected, actual: no row is selected",
	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95954"
	 }
 },
 {
	 "date" : "24/06/2019",
	 "title" : "IN operator issue when comparing signed column and the column cast to unsigned",
	 "status" : "verified",
	 "oracle" : "pqs",

	 "dbms" : "mysql",
	 "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0(c0) VALUES(-1);\nSELECT t0.c0 IN (1, CAST(t0.c0 AS UNSIGNED)) from t0; -- expected: 0, actual: 1",
	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95957"
	 }
 },
 {
	 "date" : "24/06/2019",
	 "title" : "AND/OR/XOR compute wrong result for small floating-point numbers in TEXT columns",
	 "status" : "fixed",
	 "fix_version" : "8.0.17",
	 "oracle" : "pqs",

	 "dbms" : "mysql",
	 "test" : "CREATE TABLE t0(c0 TEXT);\nINSERT INTO t0(c0) VALUES(\"0.5\");\nSELECT * FROM t0 WHERE t0.c0 AND 1; -- expected: 0.5, actual: no row is fetched\nSELECT * FROM t0 WHERE t0.c0 OR 0; -- expected: 0.5, actual: no row is fetched\nSELECT * FROM t0 WHERE t0.c0 XOR 0;  -- expected: 0.5, actual: no row is fetched",
	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95958"
	 }
 },
 {
	 "date" : "24/06/2019",
	 "title" : "The logical operators &, |, and ^ do not ignore newlines in TEXT",
	 "status" : "fixed",
	 "oracle" : "pqs",

	 "dbms" : "mysql",
	 "test" : "SELECT '\\n1' & 1; -- expected: 1, actual: 0\nSELECT '\\n1' | 0; -- expected: 1, actual: 0\nSELECT '\\n1' ^ 1; -- expected: 0, actual: 1",
	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95960"
	 }
 },
 {
	 "date" : "25/06/2019",
	 "title" : "Compare that uses UNSIGNED cast and function malfunctions in the MEMORY engine",
	 "status" : "fixed",
	 "oracle" : "pqs",

	 "dbms" : "mysql",
	 "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT) ENGINE = MEMORY;\nINSERT INTO t0(c0) VALUES(0);\nINSERT INTO t1(c0) VALUES(-1);\nSELECT * FROM t0, t1 WHERE (CAST(t1.c0 AS UNSIGNED)) > (IFNULL(\"u\", t0.c0)); -- expected: row is fetched, actual: no row is fetched",
	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95964"
	 }
 },
 {
	 "date" : "25/06/2019",
	 "title" : "Setting sort_buffer_size to a large value causes query to go out of memory",
	 "status" : "fixed",
	 "oracle" : "error (SELECT)",

	 "dbms" : "mysql",
	 "fix_version" : "8.0.18",
	 "test" : "SET SESSION sort_buffer_size = 18446744073709551615;\nCREATE TABLE t0(c0 INT UNIQUE, c1 INT UNIQUE);\nINSERT INTO t0(c0) VALUES(1), (2), (3);\nSELECT * FROM t0 WHERE NOT((t0.c1 IS NULL) AND ((t0.c0) != (1))); -- unexpected: ERROR 5 (HY000): Out of memory (Needed 24 bytes)",
	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95969"
	 }
 },
 {
	 "date" : "25/06/2019",
	 "title" : "Unexpected result for IN operator and constants",
	 "status" : "fixed (in documentation)",
	 "oracle" : "pqs",

	 "dbms" : "mysql",
	 "test" : "SELECT \"a\" IN (0); -- expected: 0, actual: 1",
	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95975"
	 }
 },
 {
	 "date" : "25/06/2019",
	 "title" : "Query involving &, <, and AND operators computes incorrect result",
	 "status" : "fixed",
	 "oracle" : "pqs",

	 "dbms" : "mysql",
	 "test" : "CREATE TABLE t0(c0 INT, c1 TEXT);\nINSERT INTO t0(c0, c1) VALUES(-1, \"a\");\nSELECT * FROM t0 WHERE t0.c1 < (t0.c0 & t0.c0) AND t0.c0 = -1; -- expected: fetches row, actual: does not fetch the row",
	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95983"
	 }
 },
 {
	 "date" : "25/06/2019",
	 "title" : "SET GLOBAL on rbr_exec_mode fails",
	 "status" : "verified",
	 "oracle" : "error (SET GLOBAL)",

	 "dbms" : "mysql",
	 "test" : "SET GLOBAL rbr_exec_mode = STRICT; -- unexpected: ERROR 1228 (HY000): Variable 'rbr_exec_mode' is a SESSION variable and can't be used with SET GLOBAL",
	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95985"
	 }
 },
 {
	 "date" : "26/06/2019",
	 "title" : "SET key_cache_* and key_buffer_* variables fails nondeterministically",
	 "status" : "verified",
	 "oracle" : "error (SET)",

	 "dbms" : "mysql",
	 "test" : "SET GLOBAL key_cache_division_limit = 100; -- unexpected: fails nondeterministically with ERROR 1210 (HY000): Incorrect arguments to SET",
	 "links" : {
		 "bugtracker" : "https://bugs.mysql.com/bug.php?id=95987"
	 }
  },
  {
	  "date" : "26/06/2019",
	  "title" : "Index makes DELETE fail with \"Truncated incorrect DOUBLE value\"",
	  "status" : "closed (not a bug)",
	  "oracle" : "error (DELETE)",

	  "dbms" : "mysql",
	  "test" : "CREATE TABLE t0(c0 VARCHAR(5));\nCREATE INDEX i0 ON t0((t0.c0 > 0));\nINSERT IGNORE INTO t0(c0) VALUES(\"a\");\nDELETE FROM t0; -- unexpected: ERROR 1292 (22007): Truncated incorrect DOUBLE value: 'a'",
	  "links" : {
		  "bugtracker" : "https://bugs.mysql.com/bug.php?id=95997"
	  }
  },
  {
	  "date" : "26/06/2019",
	  "title" : "Non-unique functional index prevents PRIMARY KEY from being dropped",
	  "status" : "closed (duplicate)",
	  "oracle" : "error (DROP INDEX)",

	  "dbms" : "mysql",
	  "test" : "CREATE TABLE t0(c3 INT PRIMARY KEY);\nCREATE INDEX i0 ON t0((\"a\" | 0));\nINSERT IGNORE INTO t0(c3) VALUES(1);\nDROP INDEX `PRIMARY` ON t0; -- unexpected: ERROR 1292 (22007): Truncated incorrect INTEGER value: 'a'",
	  "links" : {
		  "bugtracker" : "https://bugs.mysql.com/bug.php?id=96010"
	  }
  },
  {
	  "date" : "26/06/2019",
	  "title" : "Query with GREATEST function malfunctions",
	  "status" : "fixed",
	  "fix_version" : "8.0.18",
	  "oracle" : "pqs",

	  "dbms" : "mysql",
	  "test" : "CREATE TABLE t0(c0 TEXT);\nINSERT INTO t0(c0) VALUES (\"a\");\nSELECT * FROM t0 WHERE GREATEST((-1) & (-1), -t0.c0); -- expected: row is fetched, actual: row is not fetched",
	  "links" : {
		  "email" : "https://bugs.mysql.com/bug.php?id=96012"
	  }
  },
  {
	"date" : "29/06/2019",
	"title" : "VACUUM FULL results in deadlock",
	"status" : "closed (not a bug)",

	"dbms" : "postgres",
	"oracle" : "error (VACUUM)",
	"test" : "VACUUM FULL -- unexpected: ERROR: deadlock detected when executed with multiple threads",
	"links" : {
		"email" : "https://www.postgresql.org/message-id/CA%2Bu7OA6pL%2B7Xm_NXHLenxffe3tCr3gTamVdr7zPjcWqW0RFM-A%40mail.gmail.com"
	}
  },
  {
	"date" : "02/06/2019",
	"title" : "ALTER TABLE SET WITH OIDS fails after failed CONCURRENTLY index creation",
	"status" : "closed (not a bug)",

	"dbms" : "postgres",
	"oracle" : "error (ALTER TABLE)",
	"test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0(c0) VALUES(0), (0);\nCREATE UNIQUE INDEX CONCURRENTLY i0 ON t0(c0);\nALTER TABLE t0 SET WITH OIDS; -- expected: no error, actual: ERROR:\ncould not create unique index \"i0\" DETAIL:  Key (c0)=(0) is duplicated.",
	"links" : {
		"email" : "https://www.postgresql.org/message-id/CA%2Bu7OA4XYhc-qyCgJqwwgMGZDWAyeH821oa5oMzm_HEifZ4BeA%40mail.gmail.com"
	}
  },
  {
	  "date" : "02/07/2019",
	  "title" : "GROUP BY and inheritance issue",
	  "status" : "fixed",

	  "dbms" : "postgres",
	  "oracle" : "pqs",
	  "test" : "CREATE TABLE t0(c0 INT PRIMARY KEY, c1 INT);\nCREATE TABLE t1(c0 INT) INHERITS (t0);\nINSERT INTO t0(c0, c1) VALUES(0, 0);\nINSERT INTO t1(c0, c1) VALUES(0, 1);\nSELECT c0, c1 FROM t0 GROUP BY c0, c1; -- expected: 0|0 and 0|1, actual: 0|0",
		"links" : {
			"email" : "https://www.postgresql.org/message-id/CA%2Bu7OA7VLKf_vEr6kLF3MnWSA9LToJYncgpNX2tQ-oWzYCBQAw%40mail.gmail.com",
			"fix" : "https://github.com/postgres/postgres/commit/a5be4062f7bf2ae9487c5a31ee337a56425cdc84"
		}
  },
  {
	  "date" : "02/07/2019",
	  "title" : "SELECT results in \"ERROR: index key does not match expected index column\"",
	  "status" : "verified",

	  "dbms" : "postgres",
	  "oracle" : "error (SELECT)",
	  "test" : "CREATE TABLE t0(c0 boolean UNIQUE);\nCREATE INDEX i0 ON t0((nullif(FALSE, TRUE)));\nINSERT INTO t0(c0) VALUES(TRUE);\nSELECT * FROM t0 WHERE nullif(FALSE, TRUE) OR t0.c0; -- expected: row is fetched, actual: ERROR:  index key does not match expected index column",
	  "links" : {
		"email" : "https://www.postgresql.org/message-id/CA%2Bu7OA4CV21mUfwjQj3va7MWvqB2EAdJT31%3Duf_yArBRVzQjYw%40mail.gmail.com"  
	  },
	  "comment" : "This bug was reproduced to occur in \"v11 and quite a large number of branches before that\". The bug was fixed \"somewhat accidentally\" for v12, but backporting the relevant patch was declared to be too invasive."
  },
  {
	  "date" : "4/07/2019",
	  "title" : "DISCARD TEMP results in \"ERROR: cache lookup failed for type 0\"",
	  "status" : "fixed",

	  "dbms" : "postgres",
	  "oracle" : "error (DISCARD)",
	  "test" : "CREATE TEMP TABLE t0(c0 INT GENERATED ALWAYS AS IDENTITY) PARTITION BY HASH((t0.c0));\nVACUUM FULL;\nDISCARD TEMP; -- unexpected: ERROR: cache lookup failed for type 0",
	  "links" : {
		  "email" : "https://www.postgresql.org/message-id/CA%2Bu7OA4JKCPFrdrAbOs7XBiCyD61XJxeNav4LefkSmBLQ-Vobg%40mail.gmail.com",
		  "email 2" : "https://www.postgresql.org/message-id/31920.1562526703%40sss.pgh.pa.us",
		  "fix" : "https://github.com/postgres/postgres/commit/a0555ddab9b672a04681ce0d9f6c94104c01b15f"
	  }
  },
  {
	  "date" : "4/07/2019",
	  "title" : "ALTER TABLE results in \"ERROR: could not open relation with OID 43707388\"",
	  "status" : "verified",

	  "dbms" : "postgres",
	  "oracle" : "error (ALTER TABLE)",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE UNIQUE INDEX i0 ON t0(c0);\nALTER TABLE t0 ADD PRIMARY KEY USING INDEX i0, ALTER c0 TYPE BIGINT;\n-- unexpected: ERROR: could not open relation with OID 43707388",
	  "links" : {
		  "email" : "https://www.postgresql.org/message-id/CA%2Bu7OA4hkFSV_Y%3DsW_vNcYgKFEoq0WL5GtrBWEHUZnCqSqjhAA%40mail.gmail.com"
	  },
	  "comment" : "A fix for this seemed to be non-trivial and it was put on the \"back burner until we have some consensus how to proceed on that\"."
  },
  {
	  "date" : "07/07/2019",
	  "title" : "VACUUM FULL results in ERROR: integer out of range",
	  "status" : "closed (not a bug)",

	  "dbms" : "postgres",
	  "oracle" : "error (VACUUM FULL)",
	  "test" : "-- thread 1:\n\\c db1;\nCREATE TABLE t1(c0 int);\nINSERT INTO t1(c0) VALUES(2147483647);\nUPDATE t1 SET c0 = 0;\nCREATE INDEX i0 ON t1((1 + t1.c0));\nVACUUM FULL; -- unexpected: ERROR: integer out of range\n\n-- thread 2:\nDROP DATABASE db2;\nCREATE DATABASE db2;",
	  "links" : {
		  "email" : "https://www.postgresql.org/message-id/CA%2Bu7OA7VT2YvyRz1FWXtr%2Bp9ayUxGEqB8xJOsJT%2BsywXVKVvGw%40mail.gmail.com"
	  }
  },
  {
		"date" : "07/07/2019",
		"title" : "Issue with CHAR column and \"column LIKE column\" condition",
		"status" : "closed (not a bug)",

		"dbms" : "postgres",
		"oracle" : "pqs",
		"test" : "CREATE TABLE t0(c0 CHAR(2));\nINSERT INTO t0(c0) VALUES('a');\nSELECT * FROM t0 WHERE c0 LIKE c0; -- expected: fetches the row, actual: does not fetch the row",
		"links" : {
			"email" : "https://www.postgresql.org/message-id/CA%2Bu7OA7mwhq7Xu9ZsaYOZ6aeodMiomKX0aMm8bbtYE%3DSyqSs_Q%40mail.gmail.com"
		}
  },
  {
	  "date" : "10/07/2019",
	  "title" : "Generated column and string concatenation issue",
	  "status" : "closed (not a bug)",

	  "dbms" : "postgres",
	  "oracle" : "error",
	  "test" : "CREATE TABLE t0(c0 TEXT GENERATED ALWAYS AS (('abc' || 1)) STORED); -- unexpected: generation expression is not immutable",
	  "links" : {
		  "email" : "https://www.postgresql.org/message-id/CA%2Bu7OA6AD9OLziFW%2Bio1HgN8q_XH0o1Y5RyufXYO5%3D0fnhG5zQ%40mail.gmail.com"
	  }
  },
  {
	  "date" : "10/07/2019",
	  "title" : "ERROR: found unexpected null value in index",
	  "status" : "fixed",
	  "dbms" : "postgres",

	  "oracle" : "error",
	  "test" : "-- requires another open transaction holding a snapshot\nCREATE TABLE t0(c0 TEXT);\nINSERT INTO t0(c0) VALUES('b'), ('a');\nANALYZE;\nINSERT INTO t0(c0) VALUES (NULL);\nUPDATE t0 SET c0 = 'a';\nCREATE INDEX i0 ON t0(c0);\nSELECT * FROM t0 WHERE 'baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' > t0.c0; -- unexpected: ERROR: found unexpected null value in index \"i0\"",
	  "comment" : "Tom Lane commented this find with \"nifty\". :-)",
	  "links" : {
		  "email" : "https://www.postgresql.org/message-id/CA%2Bu7OA7W4NWEhCvftdV6_8bbm2vgypi5nuxfnSEJQqVKFSUoMg%40mail.gmail.com",
		  "fix" : "https://github.com/postgres/postgres/commit/d3751adcf14d3baacc9738ee9ce869dc1c31d7ad"
	  }
  },
  {
	  "date" : "10/07/2019",
	  "title" : "ERROR: negative bitmapset member not allowed in SELECT",
	  "status" : "fixed",
	  "dbms" : "postgres",
	  "oracle" : "error",

	  "version" : "12beta2",
	  "test" : "CREATE TABLE t0(c0 BOOLEAN, c1 BOOLEAN, UNIQUE(c1));\nCREATE STATISTICS s1 ON c0, c1 FROM t0;\nINSERT INTO t0(c0) VALUES(TRUE);\nANALYZE t0;\nSELECT * FROM t0 WHERE (t0.c0 AND t0.c1) >= TRUE; -- ERROR:  negative bitmapset member not allowed",
	  "links" : {
		  "email" : "https://www.postgresql.org/message-id/CA%2Bu7OA7fmtm3kR%2BY6Mgr9djU3WeOsMzQLWtNPMvoEVSm%3Dr9XaQ%40mail.gmail.com"
	  },
	  "comment" : "Later on this day, another bug report was opened on this: https://www.postgresql.org/message-id/flat/20190711150822.z7cirna2fjtrfcnu%40development#d05c216fb9f3d27e3b69520666b043c6. Although we reported the bug first, the second bug reporter, rather than us, was credited. Although we asked for a clarification on the mailing list (see https://www.postgresql.org/message-id/CA%2Bu7OA6RsonbT1S06TaO99QDL2H8zS-N2jO%3DwSuqAOJLX5yQSg%40mail.gmail.com), we did not receive any response."
  },
  {
	  "date" : "10/07/2019",
	  "title" : "SEGFAULT in 12beta2 release",
	  "test" : "-- 16 threads create and drop databases, the other threads execute the following:\nCREATE TABLE t0(c1 integer);\nINSERT INTO t0(c1) VALUES(0), (0), (0), (0), (0);\nBEGIN;\nDELETE FROM t0;\nINSERT INTO t0(c1) VALUES (0);\nANALYZE;",
	  "status" : "closed (duplicate)",
	  "dbms" : "postgres",
	  "oracle" : "segfault",

	  "version" : "12beta2",
	  "comment" : "We received a response that this had already been fixed in commit 2322456."
  },
  {
	  "date" : "11/07/2019",
	  "title" : "Stack buffer overflow in 12beta2 release",
	  "status" : "closed (duplicate)",
	  "dbms" : "postgres",
	  "oracle" : "segfault",

	  "version" : "12beta2",
	  "test" : "CREATE TABLE t0(c0 INTEGER, c1 BIGINT, c2 SERIAL);\nINSERT INTO t0(c1, c0) VALUES(-1709938800, 945157321), (9427841, -1121735885), (-462902431, -1516553180), (-1182718924, 567434112), (77957572, -1630604045);\nINSERT INTO t0(c1) VALUES(1396592526);\nINSERT INTO t0(c2) VALUES(690098393), (1277882261), (1624303238);\nCREATE STATISTICS s0 ON c1, c0 FROM t0;\nCREATE STATISTICS s1 ON c2, c1 FROM t0;\nINSERT INTO t0(c2, c1, c0) VALUES(1047328172, -928052494, -1495150353), (1594411273, -1849045190, -1504843935);\nINSERT INTO t0(c0, c1) VALUES(-2024782141, -1507193801), (307326616, 1000588716);\nINSERT INTO t0(c0) VALUES(-1390942911);\nANALYZE;\nCREATE STATISTICS s2 ON c2, c1 FROM t0;\nANALYZE;\nCREATE STATISTICS s3 ON c0, c1 FROM t0;\nANALYZE;\nCREATE STATISTICS s4 ON c2, c0 FROM t0;\nUPDATE t0 SET c1 = -17924667, c0 = DEFAULT WHERE FALSE;\nCREATE STATISTICS s5 ON c0, c1 FROM t0;\nTRUNCATE TABLE t0;\nCREATE STATISTICS s6 ON c2, c0 FROM t0;\nINSERT INTO t0(c1) VALUES(-1891295280), (337846372), (-376532870), (-1428386312), (815718779);\nINSERT INTO t0(c1, c0, c2) VALUES(-1750298826, -1400767611, 1631979167), (197446074, -2025988029, 965481790);\nINSERT INTO t0(c0, c1, c2) VALUES(-343412265, 1761686185, 478065767), (-1200264761, 1389476944, -848006704);\nCREATE STATISTICS s7 ON c0, c1 FROM t0;\nANALYZE;\nANALYZE;\nBEGIN;\nANALYZE;",
	  "comment" : "We received a response that this had already been fixed in commit 2322456."
  },
  {
	  "date" : "14/07/2019",
	  "title" : "SELECT with COLLATE results in segfault on trunk and 12 Beta 2",
	  "version" : "12beta2",
	  "status" : "closed (duplicate)",
	  "dbms" : "postgres",
	  "oracle" : "segfault",

	  "version" : "12beta2",
	  "test" : "CREATE TABLE t0(c0 BOOLEAN, c1 TEXT);\nCREATE STATISTICS s1 ON c0, c1 FROM t0;\nINSERT INTO t0(c0) VALUES (FALSE);\nVACUUM ANALYZE t0;\nSELECT * FROM t0 WHERE t0.c0 OR '' >= t0.c1 COLLATE \"C\"; -- unexpected: segfault",
	  "links" : {
		  "email" : "https://www.postgresql.org/message-id/CA%2Bu7OA40Fe9%3DA3wQ2PHWy8VZg8%3DGpD6dxQXeXVDx6HAhRSPeRA%40mail.gmail.com"
	  }
  },
  {
	  "date" : "15/07/2019",
	  "title" : "UPDATE causes segfault on trunk",
	  "version" : "12beta2",
	  "status" : "closed (duplicate)",
	  "dbms" : "postgres",
	  "oracle" : "segfault",

	  "version" : "12beta2",
	  "test" : "CREATE TABLE t0(c0 TEXT, c1 TEXT, PRIMARY KEY(c0, c1));\nCREATE TABLE t1(c0 TEXT, c1 TEXT, FOREIGN KEY (c0, c1) REFERENCES t0(c0, c1));\nCREATE STATISTICS s0 ON c0, c1 FROM t0;\nINSERT INTO t0(c1, c0) VALUES('a', 'a'), ('b', 'a'), ('c', 'a'), ('d', 'a'), ('e', 'a'), ('f', 'a');\nANALYZE;\nUPDATE t0 SET c0 = 'b';",
	  "links" : {
			"email" : "https://www.postgresql.org/message-id/CA%2Bu7OA4XKjVv86MTUHZYzzdQAgPOPJDSuA5HrD8%2BxkNQsnAsAQ%40mail.gmail.com"
	  }
  },
  {
	  "date" : "16/07/2019",
	  "title" : "BETWEEN SYMMETRIC condition results in \"row is too big: ..., maximum size 8160\"",
	  "test" : "CREATE TABLE t0(c0 TEXT);\nCREATE INDEX i0 ON t0(c0) WHERE ((FALSE BETWEEN SYMMETRIC TRUE AND (t0.c0 || t0.c0 IN (t0.c0, t0.c0, '1', t0.c0 || t0.c0, t0.c0 || t0.c0 || t0.c0))) BETWEEN SYMMETRIC TRUE AND TRUE) BETWEEN SYMMETRIC TRUE AND TRUE; -- ERROR:  row is too big: size 8440, maximum size 8160",
	  "status" : "closed (not a bug)",
	  "version" : "13trunk",
	  "dbms" : "postgres",
	  "oracle" : "error",

	  "links" : {
		"email" : "https://www.postgresql.org/message-id/CA%2Bu7OA6zYX7qfkGGDfqeFwuh6HbD4B-0fmOfx13Jm4xsp3s%3D-Q%40mail.gmail.com"
	  } 
  },
  {
	  "date" : "17/07/2019",
	  "title" : "REINDEX CONCURRENTLY causes ALTER TABLE to fail",
	  "test" : "CREATE TABLE t0(c0 INTEGER , c1 BOOLEAN);\nINSERT INTO t0(c0, c1) VALUES(1369652450, FALSE), (414515746, TRUE), (897778963, FALSE);\nCREATE UNIQUE INDEX i0 ON t0((1 / t0.c0)) WHERE ('-H') >= (t0.c1::TEXT) COLLATE \"C\";\nREINDEX TABLE CONCURRENTLY t0;\nALTER TABLE t0 ALTER c1 TYPE TEXT; -- could not create unique index \"i0\" DETAIL:  Key ((1 / c0))=(0) is duplicated.",
	  "status" : "fixed",
	  "version" : "13trunk",
	  "dbms" : "postgres",
	  "oracle" : "error",

	  "links" : {
		  "email" : "https://www.postgresql.org/message-id/CA%2Bu7OA5Hp0ra235F3czPom_FyAd-3%2BXwSJmX95r1%2BsRPOJc9VQ%40mail.gmail.com",
		  "fix" : "https://github.com/postgres/postgres/commit/a904abe2e284f570168839e52e18ef0b7f26179d"
	  }
  },
  {
	  "date" : "23/07/2019",
	  "title" : "CAST of STRING with newlines to SIGNED/UNSIGNED returns unexpected result",
	  "test" : "SELECT CAST('\\n1' AS UNSIGNED); -- expected: 1, actual: 0\n-- also see the examples below:\n-- SELECT CAST('\\n1' AS SIGNED); -- expected: 1, actual: 0\n-- SELECT CAST('\\t  1' AS SIGNED); -- 1\n-- SELECT CAST('\\n1' AS REAL); -- 1\n-- SELECT CAST('\\n1' AS FLOAT); -- 1\n-- SELECT CAST('\\n1' AS DECIMAL); -- 1",
	  "version" : "8.0.17",
	  "status" : "closed (duplicate)",
	  "dbms" : "mysql",
	  "oracle" : "error",

	  "links" : {
			"bugtracker" : "https://bugs.mysql.com/bug.php?id=96294"
	  }
  },
  {
	  "date" : "23/07/2019",
	  "title" : "DISABLE KEYS, DELAY_KEY_WRITE results in \"Data truncated for functional index\"",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE INDEX i0 ON t0(('a' = t0.c0));\nINSERT IGNORE INTO t0(c0) VALUES(1);\nALTER TABLE t0 DISABLE KEYS, DELAY_KEY_WRITE 0; -- ERROR 3751 (01000): Data truncated for functional index 'i0'",
	  "version" : "8.0.17",
	  "status" : "closed (duplicate)",
	  "dbms" : "mysql",
	  "oracle" : "error",

	  "links" : {
		"bugtracker" : "https://bugs.mysql.com/bug.php?id=96295"
	  }
  },
  {
	  "date" : "24/07/2019",
	  "title" : "ANALYZE on parent table results in an error \"tuple already updated by self\"",
	  "test" : "CREATE TABLE t0(c0 boolean , c1 integer);\nCREATE TABLE t1(c0 boolean, c1 integer) INHERITS(t0);\nINSERT INTO t0(c1) VALUES (0);\nCREATE STATISTICS s0 ON c0, c1 FROM t0;\nANALYZE t0; -- unexpected: ERROR:  tuple already updated by self",
	  "dbms" : "postgres",
	  "oracle" : "error",
	  "status" : "closed (duplicate)",

	  "links" : {
		  "bugtracker" : "https://www.postgresql.org/message-id/CA%2Bu7OA69sgyCE0VhEpgZLBkR4X0frA2%3Dar8brntoH1vcvi-%2BWA%40mail.gmail.com"
	  }
  },
  {
	  "date" : "24/07/2019",
	  "title" : "Attribute has wrong type in ALTER TABLE",
	  "test" : "CREATE TABLE t0(c0 VARCHAR(10));\nINSERT INTO t0(c0) VALUES('');\nALTER TABLE t0 ALTER c0 SET DATA TYPE TEXT, ADD EXCLUDE (('a' LIKE t0.c0) WITH =); -- unexpected: ERROR:  attribute 1 of type t0 has wrong type",
	  "dbms" : "postgres",
	  "oracle" : "error",
	  "status" : "closed (duplicate)",

	  "links" : {
		  "bugtracker" : "https://www.postgresql.org/message-id/flat/CA%2Bu7OA6RmQLwvXGxx0nGt3T79Ka5MkOJs4_qcdx6X5c-rR_yNg%40mail.gmail.com"
	  }
  },
  {
	  "date" : "24/07/2019",
	  "title" : "ADD CHECK fails for parent table if column used in CHECK is fully-qualified",
	  "test" : "CREATE TABLE t0(c0 boolean);\nCREATE TABLE t1(c0 boolean) INHERITS(t0);\nALTER TABLE t0 ADD CHECK(t0.c0); -- unexpected: ERROR:  missing FROM-clause entry for table \"t0\"",
	  "dbms" : "postgres",
	  "oracle" : "error",
	  "status" : "closed (not a bug)",

	  "links" : {
		  "email" : "https://www.postgresql.org/message-id/flat/CA%2Bu7OA6Zs6bZmuakbLv4%3D7VBOYpBsyswpb7A3hN%3Dn%2BKO0_z0pQ%40mail.gmail.com"
	  }
  },
  {
	  "date" : "27/07/2019",
	  "title" : "Multiple inheritance and ALTER TABLE issue",
	  "test" : "CREATE TABLE t0(c0 boolean);\nCREATE TABLE t1(c0 boolean);\nCREATE TABLE t2(c0 boolean) INHERITS(t0, t1);\nALTER TABLE t0 ALTER c0 TYPE TEXT;\nUPDATE t1 SET c0 = TRUE; -- ERROR:  attribute \"c0\" of relation \"t2\"does not match parent's type",
	  "dbms" : "postgres",
	  "oracle" : "error",
	  "status" : "verified",

	  "links" : {
		  "email" : "https://www.postgresql.org/message-id/flat/CA%2Bu7OA4qogDv9rz1HAb-ADxttXYPqQdUdPY_yd4kCzywNxRQXA%40mail.gmail.com"
	  }
  },
  {
	  "date" : "29/07/2019",
	  "title" : "Issue with DISTINCT and COLLATE",
	  "test" : "CREATE TABLE t0(c0 COLLATE RTRIM);\nINSERT INTO t0(c0) VALUES (' ');\nSELECT DISTINCT(t0.c0) != '' FROM t0; -- expected: 1, actual: 0",
	  "dbms" : "sqlite",
	  "oracle" : "pqs",
	  "status" : "closed (not a bug)",

	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=18ab5da2c0"
	  },
	  "severity" : "Critical"
  },
  {
	  "date" : "29/07/2019",
	  "title" : "Query with ORDER BY results in \"database disk image is malformed\" error",
	  "test" : "CREATE TABLE t0 (c0 REAL, c1);\nCREATE UNIQUE INDEX i0 ON t0(c1, 0 | c0);\nINSERT INTO t0(c0) VALUES (4750228396194493326), (0);\nUPDATE OR REPLACE t0 SET c0 = 'a', c1 = '';\nSELECT * FROM t0 ORDER BY t0.c1; -- unexpected: database disk image is malformed",
	  "dbms" : "sqlite",
	  "status" : "fixed",
	  "oracle" : "error (SELECT)",

	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=ba2f4585cf",
		  "fix" : "https://www.sqlite.org/src/info/2b221bb15fd2b9f6"
	  },
	  "severity" : "Severe"
  },
  {
	  "date" : "29/07/2019",
	  "title" : "ANALYZE causes DISTINCT to malfunction in CROSS JOIN",
	  "test" : "CREATE TABLE t0 (c0, c1, c2, PRIMARY KEY (c0, c1));\nCREATE TABLE t1 (c2);\nINSERT INTO t0(c2) VALUES (0), (1), (3), (4), (5), (6), (7), (8), (9), (10), (11);\nINSERT INTO t0(c1) VALUES ('a');\nINSERT INTO t1(c2) VALUES (0);\nANALYZE;\nSELECT DISTINCT t0.c0, t1._rowid_, t0.c1 FROM t1 CROSS JOIN t0 ON TRUE ORDER BY t0.c0; -- expected: |1|, |1|a, actual: |1|",
	  "dbms" : "sqlite",
	  "status" : "fixed",
	  "oracle" : "pqs",

	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=ccbe5759fb",
		  "fix" : "https://www.sqlite.org/src/info/6ac0f822450b26c7"
	  },
	  "severity" : "Critical"
  },
  {
	  "date" : "30/07/2019",
	  "title" : "Query with DISTINCT does not fetch all distinct rows",
	  "test" : "CREATE TABLE t1 (c1 , c2, c3, c4 , PRIMARY KEY (c4, c3));\nINSERT INTO t1(c3) VALUES (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (NULL), (1), (0);\nUPDATE t1 SET c2 = 0;\nINSERT INTO t1(c1) VALUES (0), (0), (NULL), (0), (0);\nANALYZE t1;\nUPDATE t1 SET c3 = 1;\nSELECT DISTINCT * FROM t1 WHERE t1.c3 = 1; -- expected: |0|1|, 0||1|, ||1|, actual: |0|1|",
	  "dbms" : "sqlite",
	  "status" : "fixed",
	  "oracle" : "pqs",

	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=ced41c7c7d",
		  "fix" : "https://www.sqlite.org/src/info/a871d69c6de65038"
	  },
	  "severity" : "Severe"
  },
  {
	  "date" : "02/07/2019",
	  "title" : "MIN() malfunctions for UNIQUE column",
	  "test" : "CREATE TABLE t0(c0 UNIQUE, c1);\nINSERT INTO t0(c0, c1) VALUES (NULL, 1);\nSELECT MIN(t0.c0), t0.c1 FROM t0; -- expected: NULL | 1, actual: NULL | NULL",
	  "dbms" : "sqlite",
	  "status" : "fixed",
	  "oracle" : "pqs",

	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=41866dc373",
		  "fix" : "https://www.sqlite.org/src/info/faaaae4940b5f4f7"
	  },
	  "severity" : "Critical"
  },
  {
	  "date" : "03/08/2019",
	  "title" : "MIN() malfunctions for a query with ISNULL condition",
	  "test" : "CREATE TABLE t0 (c0, c1);\nCREATE INDEX i0 ON t0(c1, c1 + 1 DESC);\nINSERT INTO t0(c0) VALUES (1);\nSELECT MIN(t0.c1), t0.c0 FROM t0 WHERE t0.c1 ISNULL; -- expected: NULL | 1, actual: NULL | NULL",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "pqs",
	  "severity" : "Important",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=71e183cab6",
		  "fix" : "https://www.sqlite.org/src/info/d465c3ee"
	  },
	  "comment" : "This bug was fixed 11 years after it was introduced."
  },
  {
	  "date" : "05/08/2019",
	  "title" : "Unexpected affinity conversion in view",
	  "test" : "CREATE TABLE t0(c0, c1 TEXT);\nCREATE VIEW v0(c0) AS SELECT SUM(t0.c1) FROM t0;\nINSERT INTO t0(c0, c1) VALUES ('a', 1);\nSELECT * FROM v0, t0 WHERE t0.c1 <= v0.c0; -- unexpected: row is not fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "pqs",
	  "severity" : "Important",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=d52a29a9e6",
		  "fix" : "https://sqlite.org/docsrc/info/07b7749da88d54e5"
	  }
  },
  {
	  "date" : "05/08/2019",
	  "title" : "Row is not fetched in SELECT from VIEW",
	  "test" : "CREATE TABLE t0(c0 TEXT, c1);\nINSERT INTO t0(c0, c1) VALUES (-1, 0);\nCREATE VIEW v0(c0, c1) AS SELECT t0.c0, AVG(t0.c1) FROM t0;\nSELECT * FROM v0 WHERE v0.c1 < v0.c0; -- unexpected: row is not fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "pqs",
	  "severity" : "Important",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=61c853857f",
		  "fix1" : "https://www.sqlite.org/src/info/09cd0c0c6e6c963e",
		  "fix2" : "https://www.sqlite.org/src/info/470ac8d50ce2f7cc",
		  "fix3" : "https://www.sqlite.org/src/info/e15a0977ddfad3d0"
	  }
  },
  {
	  "date" : "06/08/2019",
	  "title" : "Unexpected affinity conversion for view column in IN operator",
	  "test" : "CREATE TABLE t0(c0 TEXT);\nCREATE VIEW v0(c0) AS SELECT t0.c0 FROM t0;\nINSERT INTO t0(c0) VALUES ('0');\nSELECT 0 IN (c0) FROM v0; -- expected: 0, actual: 1",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "pqs",
	  "severity" : "Important",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=0a5e2c1dcb",
		  "fix" : "https://www.sqlite.org/src/info/17b3d2218c02a400"
	  }
  },
  {
	  "date" : "07/08/2019",
	  "title" : "Incorrect result for query that uses MIN() and a CAST on rowid",
	  "test" : "CREATE TABLE t0(c0 UNIQUE, c1);\nINSERT INTO t0(c1) VALUES (0);\nINSERT INTO t0(c0) VALUES (0);\nCREATE VIEW v0(c0, c1) AS SELECT t0.c1, t0.c0 FROM t0 WHERE CAST(t0.rowid AS INT) = 1;\nSELECT v0.c0, MIN(v0.c1) FROM v0; -- expected: 0|, actual: |",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "pqs",
	  "severity" : "Critical",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=f8a7060ece",
		  "fix" : "https://www.sqlite.org/src/info/94085fb3"
	  }
  },
  {
	  "date" : "10/08/2019",
	  "title" : "Constant expression in partial index results in row not being fetched",
	  "test" : "CREATE TABLE t0(c0);\nINSERT INTO t0(c0) VALUES (0);\nCREATE INDEX i0 ON t0(NULL > c0) WHERE (NULL NOT NULL);\nSELECT * FROM t0 WHERE ((NULL IS FALSE) IS FALSE); -- expected: row is fetched: actual: row is not fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "pqs",
	  "severity" : "Important",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=9080b6227f",
		  "fix" : "https://www.sqlite.org/src/info/da01ba4fa47c6508"
	  }
  },
  {
	  "date" : "14/08/2019",
	  "title" : "Unexpected error in DELETE with existing trigger",
	  "test" : "CREATE TABLE t0(c0);\nCREATE TRIGGER tr0 AFTER DELETE ON t0 WHEN c0 BEGIN DELETE FROM t0; END;\nDELETE FROM t0; -- unexpected: no such column: c0",
	  "dbms" : "sqlite",
	  "status" : "closed (not a bug)",

	  "oracle" : "error",
	  "severity" : "Critical",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=17db54d744"
	  }
  },
  {
	  "date" : "15/08/2019",
	  "title" : "Null pointer dereference caused by window functions in result-set of EXISTS(SELECT ...)",
	  "test" : "CREATE TABLE t0(c0);\nINSERT INTO t0(c0) VALUES (0);\nSELECT * FROM t0 WHERE EXISTS (SELECT MIN(c0)  OVER (), CUME_DIST() OVER () FROM t0) BETWEEN 1 AND 1;",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "segfault",
	  "severity" : "Critical",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=256741a16b",
		  "fix" : "https://www.sqlite.org/src/info/4f5b2d938194fab7"
	  }
  },
  {
	  "date" : "17/08/2019",
	  "title" : "LEFT JOIN fails to fetch row",
	  "test" : "CREATE TABLE t0(c0);\nCREATE VIEW v0(c0) AS SELECT TYPEOF(1) FROM t0;\nINSERT INTO t0(c0) VALUES (0), (1);\nSELECT * FROM t0 LEFT JOIN v0 ON t0.c0 WHERE NOT(v0.c0 = 'a'); -- unexpected: fetches no row",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "pqs",
	  "severity" : "Important",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=6710d2f7a1",
		  "fix" : "https://www.sqlite.org/src/info/500c9152daaf11cf"
	  }
  },
  {
	  "date" : "17/08/2019",
	  "title" : "WHERE clause erroneously influences value of fetched column from view",
	  "test" : "CREATE TABLE t0(c0);\nCREATE VIEW v0(c0) AS SELECT LOWER(CAST('1e500' AS TEXT)) FROM t0;\nINSERT INTO t0(c0) VALUES (NULL);\nSELECT v0.c0 FROM v0, t0 WHERE t0.rowid NOT IN (0, 0, v0.c0); -- expected: '1e500', actual: Inf",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "pqs",
	  "severity" : "Critical",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=c7a1171907",
		  "fix" : "https://www.sqlite.org/src/info/43e8b143"
	  }
  },
  {
	  "date" : "20/08/2019",
	  "title" : "INDEXED BY results in row not being fetched",
	  "test" : "CREATE TABLE t0 (c0, c1);\nCREATE INDEX i0 ON t0(CAST(c0 AS NUMERIC));\nINSERT INTO t0(c0, c1) VALUES ('a', -1);\nSELECT * FROM t0 INDEXED BY i0 WHERE CAST(t0.c0 AS NUMERIC) > LOWER(t0.c1) GROUP BY t0.rowid; -- expected: row is fetched, actual: no row is fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "pqs",
	  "severity" : "Critical",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=f043b1130b",
		  "fix" : "https://www.sqlite.org/src/info/511da081"
	  }
  },
  {
	  "date" : "21/08/2019",
	  "title" : "DISTINCT malfunctions for IS NULL",
	  "test" : "CREATE TABLE t0 (c0, c1 NOT NULL DEFAULT 1, c2, PRIMARY KEY (c0, c1));\nINSERT INTO t0(c2) VALUES (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL);\nINSERT INTO t0(c2) VALUES ('a');\nANALYZE t0;\nSELECT DISTINCT * FROM t0 WHERE NULL IS t0.c0; -- unexpected: |1|a is not part of the result set",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "pqs",
	  "severity" : "Critical",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=b86894020e",
		  "fix" : "https://www.sqlite.org/src/info/d02490a2"
	  }
  },
  {
	  "date" : "22/08/2019",
	  "title" : "Row is not fetched in table with INTEGER PRIMARY KEY",
	  "test" : "CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1 TEXT);\nINSERT INTO t0(c0, c1) VALUES (1, 'a');\nSELECT * FROM t0 WHERE '-1' BETWEEN 0 AND t0.c0; -- expected: 1|a, actual: no row is fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "pqs",
	  "severity" : "Important",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=d9f584e936",
		  "fix" : "https://www.sqlite.org/src/info/81b9f0f55042777b"
	  }
  },
  {
	  "date" : "22/08/2019",
	  "title" : "Row with comparison on TEXT UNIQUE column is not fetched",
	  "test" : "CREATE TABLE t0(c0 TEXT UNIQUE, c1);\nINSERT INTO t0(c0) VALUES (-1);\nSELECT * FROM t0 WHERE - x'ce' >= t0.c0; -- unexpected: row is not fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "pqs",
	  "severity" : "Important",
	  "links" : {
			"bugtracker" : "https://www.sqlite.org/src/tktview?name=ac184eb571",
			"fix" : "https://www.sqlite.org/src/info/e62eddbb048cbc2c"
	  }
  },
  {
	  "date" : "22/08/2019",
	  "title" : "LIKELY() seems to cause unexpected affinity conversion for rowid",
	  "test" : "CREATE TABLE t0 (c0);\nINSERT INTO t0(c0) VALUES ('a');\nSELECT * FROM t0 WHERE LIKELY(t0.rowid) <= '0'; -- unexpected: row is not fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "pqs",
	  "severity" : "Important",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=7e07a3dbf5",
		  "fix" : "https://www.sqlite.org/src/info/44578865fa7baf97"
	  }
  },
  {
	  "date" : "27/08/2019",
	  "title" : "Unexpected affinity conversion is performed for the IN operator",
	  "test" : "CREATE TABLE t0(c0 INT UNIQUE);\nINSERT INTO t0(c0) VALUES (1);\nSELECT * FROM t0 WHERE '1' IN (t0.c0); -- unexpected: fetches row",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "metamorphic",
	  "severity" : "Important",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=dbaf8a6820",
		  "fix" : "https://www.sqlite.org/src/info/7f5168a76a400fc2"
	  }
  },
  {
	  "date" : "28/08/2019",
	  "title" : "Short-circuit evaluation issue",
	  "test" : "CREATE TABLE t0 (c0);\nINSERT INTO t0(c0) VALUES (-9223372036854775808);\nSELECT FALSE AND ABS(t0.c0) FROM t0; -- unexpected: integer overflow",
	  "dbms" : "sqlite",
	  "status" : "closed (not a bug)",

	  "oracle" : "metamorphic",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=51f5b6e427"
	  }
  },
  {
	  "date" : "30/08/2019",
	  "title" : "Partial index causes row to not be fetched",
	  "test" : "CREATE TABLE t0(c0);\nINSERT INTO t0(c0) VALUES (NULL);\nCREATE INDEX i0 ON t0(1) WHERE c0 NOT NULL;\nSELECT * FROM t0 WHERE (t0.c0 IS FALSE) IS FALSE; -- unexpected: row is not fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "metamorphic",
	  "severity" : "Important",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=a6408d42b9",
		  "fix" : "https://www.sqlite.org/src/info/45ff2b1f2693bb02"
	  }
  },
  {
	  "date" : "30/08/2019",
	  "title" : "Partial index causes row to not be fetched in BETWEEN expression",
	  "test" : "CREATE TABLE t0(c1);\nCREATE INDEX i0 ON t0(1) WHERE c1 NOTNULL;\nINSERT INTO t0(c1) VALUES (NULL);\nSELECT * FROM t0 WHERE t0.c1 IS FALSE BETWEEN FALSE AND TRUE; -- unexpected: row is not fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "metamorphic",
	  "severity" : "Important",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=fba33c8b1d",
		  "fix" : "https://www.sqlite.org/src/info/057fb8b1809b8b9c"
	  }
  },
  {
	  "date" : "30/08/2019",
	  "title" : "Partial index and BETWEEN issue",
	  "test" : "CREATE TABLE t0 (c0);\nCREATE INDEX i0 ON t0(1) WHERE c0 NOT NULL;\nINSERT INTO t0(c0) VALUES (NULL);\nSELECT * FROM t0 WHERE '' BETWEEN t0.c0 AND 1 IN (FALSE); -- unexpected: row is not fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "metamorphic",
	  "severity" : "Important",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=f8f472cbc7",
		  "fix" : "https://www.sqlite.org/src/info/dd66134817ecbda0"
	  }
  },
  {
	  "date" : "30/08/2019",
	  "title" : "REINDEX causes \"UNIQUE constraint failed\" error",
	  "test" : "CREATE TABLE t0(c0 REAL UNIQUE, c1);\nCREATE UNIQUE INDEX i0 ON t0(0 || c1);\nINSERT INTO t0(c0, c1) VALUES (1, 2),  (2, 1);\nINSERT INTO t0(c0) VALUES (1) ON CONFLICT(c0) DO UPDATE SET c1=excluded.c0;\nREINDEX; -- unexpected: UNIQUE constraint failed: index 'i0'",
	  "dbms" : "sqlite",
	  "status" : "fixed",
	  "severity" : "Critical",

	  "oracle" : "error",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=5a3dba8104",
		  "fix" : "https://www.sqlite.org/src/info/67381dadede98a55"
	  }
  },
  {
	  "date" : "02/09/2019",
	  "title" : "Expression computed on row yields incorrect result",
	  "test" : "CREATE TABLE t0(c0 REAL, c1 TEXT);\nCREATE INDEX i0 ON t0(+c0, c0);\nINSERT INTO t0(c0) VALUES(0);\nSELECT CAST(+ t0.c0 AS BLOB) LIKE 0 FROM t0; -- expected: 0, actual: 1",
	  "dbms" : "sqlite",
	  "status" : "fixed",
	  "severity" : "Important",

	  "oracle" : "metamorphic",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=57af00b664",
		  "fix" : "https://www.sqlite.org/src/info/0658c16e311393c8"
	  }
  },
  {
	  "date" : "02/09/2019",
	  "title" : "Different rounding when converting TEXT to REAL",
	  "test" : "CREATE TABLE t0(c0 REAL UNIQUE);\nINSERT INTO t0(c0) VALUES(2.07093491255203046E18);\nSELECT * FROM t0 WHERE c0 IN ('2070934912552030444'); -- unexpected: row is fetched",
	  "dbms" : "sqlite",
	  "status": "fixed",
	  "severity" : "Important",

	  "oracle" : "metamorphic",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=2841e99d10",
		  "fix" : "https://www.sqlite.org/src/info/88833a9c2849c959"
	  }
  },
  {
	  "date" : "03/09/2019",
	  "title" : "IS NULL unexpectedly evaluates to TRUE",
	  "test" : "CREATE TABLE t0(c0 TEXT, c1 REAL, c2, PRIMARY KEY(c2, c0, c1));\nCREATE INDEX i0 ON t0(c1 IN (c0));\nINSERT INTO t0(c0, c2) VALUES (0, NULL) ON CONFLICT(c2, c1, c0) DO NOTHING;\nUPDATE t0 SET c2 = x'';\nSELECT * FROM t0 WHERE t0.c2 IS NULL; -- unexpected: row is fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",
	  "severity" : "Important",

	  "oracle" : "metamorphic",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=29f635e0af",
		  "fix" : "https://www.sqlite.org/src/info/6e7b4527d32cc1be"
	  }
  },
  {
	  "date" : "03/09/2019",
	  "title" : "COLLATE NOCASE string comparison yields incorrect result",
	  "test" : "CREATE TABLE t0(c0 COLLATE NOCASE, c1);\nCREATE INDEX i0 ON t0(0) WHERE c0 >= c1;\nREPLACE INTO t0 VALUES('a', 'B');\nSELECT * FROM t0 WHERE t0.c1 <= t0.c0; -- unexpected: row is not fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",
	  "severity" : "Important",

	  "oracle" : "metamorphic",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=767a8cbc6d",
		  "fix" : "https://www.sqlite.org/src/info/5351e920f489562f"
	  }
  },
  {
	  "date" : "09/09/2019",
	  "title" : "BETWEEN issue in view",
	  "test" : "CREATE TABLE t0(c0);\nINSERT INTO t0(c0) VALUES('');\nCREATE VIEW v2(c0, c1) AS SELECT 'B' COLLATE NOCASE, 'a' FROM t0 ORDER BY t0.c0;\nSELECT SUM(count) FROM (SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2); -- expected: 0, actual: 1",
	  "dbms" : "sqlite",
	  "status" : "fixed",
	  "severity" : "Critical",

	  "oracle" : "metamorphic",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=a7debbe0ad",
		  "fix" : "https://www.sqlite.org/src/info/b9ec72203c19c2b9"
	  }
  },
  {
	  "date" : "10/09/2019",
	  "title" : "DISTINCT malfunctions for VIEW",
	  "test" : "CREATE TABLE t0(c0);\nINSERT INTO t0(c0) VALUES (0.0), (0);\nCREATE VIEW v0(c0) AS SELECT DISTINCT c0 FROM t0;\nSELECT * FROM v0; -- expected: 0.0, 0, actual: 0.0",
	  "dbms" : "sqlite",
	  "status" : "closed (not a bug)",

	  "oracle" : "metamorphic",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=c4130c33be"
	  }
  },
  {
	  "date" : "11/09/2019",
	  "title" : "COLLATE issue in view",
	  "test" : "CREATE TABLE t0(c0 COLLATE NOCASE);\nINSERT INTO t0(c0) VALUES ('B');\nCREATE VIEW v0(c0, c1) AS SELECT DISTINCT t0.c0, 'a' FROM t0;\nSELECT v0.c1 >= v0.c0 FROM v0; -- actual: 1, expected: 0",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "severity" : "Important",
	  "oracle" : "metamorphic",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=18458b1ad6",
		  "fix" : "https://www.sqlite.org/src/info/36997c4ade2ef3a2"
	  }
  },
  {
	  "date" : "16/09/2019",
	  "title" : "GLOB unexpectedly does not match",
	  "test" : "CREATE TABLE t0(c0 UNIQUE);\nINSERT INTO t0 VALUES (-1);\nSELECT * FROM t0 WHERE t0.c0 GLOB '-*'; -- unexpected: row is not fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "severity" : "Important",
	  "oracle" : "metamorphic",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=0f0428096f",
		  "fix" : "https://www.sqlite.org/src/info/6fe0367f9a337b7c"
	  }
  },
  {
	  "date" : "17/09/2019",
	  "title" : "Row is not fetched when using WHERE clause with INSTR()",
	  "test" : "CREATE TABLE t0(c0 PRIMARY KEY, c1);\nINSERT INTO t0(c0) VALUES (x'bb'), (0);\nSELECT COUNT(*) FROM t0 WHERE INSTR(x'aabb', t0.c0) ORDER BY t0.c0, t0.c1; -- 1\nSELECT * FROM t0 WHERE INSTR(x'aabb', t0.c0) ORDER BY t0.c0, t0.c1; -- no row is fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "severity" : "Important",
	  "oracle" : "metamorphic",
	  "links" : {
			"bugtracker" : "https://www.sqlite.org/src/tktview?name=587791f926",
			"fix" : "https://www.sqlite.org/src/info/3fb40f518086c1e8"
	  }
  },
  {
	  "date" : "24/09/2019",
	  "title" : "INSERT INTO causes segfault on trunk",
	  "test" : "CREATE TABLE t0(c0 integer, c1 integer GENERATED ALWAYS AS (t0.c0) STORED);\nCREATE TABLE t1(LIKE t0 INCLUDING DEFAULTS);\nINSERT INTO t1(c0) VALUES(NULL);",
	  "dbms" : "postgres",
	  "status" : "fixed",

	  "oracle" : "segfault",
	  "comment" : "We reported this bug on the security mailing list where it was stated that \"next week it'd have been a security issue [since a new PostgreSQL version would have been released], perhaps, but since v12 isn't formally released yet I don't think we need to treat it as one."
  },
  {
	  "date" : "07/10/2019",
	  "title" : "Comparison on view malfunctions",
	  "test" : "CREATE TABLE t0(c0);\nINSERT INTO t0(c0) VALUES (0);\nCREATE VIEW v0(c0) AS SELECT t0.rowid FROM t0 ORDER BY 1;\nSELECT COUNT(*) FROM v0 WHERE ABS('1') = v0.c0; -- expected: 1, actual: 0",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "metamorphic",
	  "severity" : "Important",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=b2d4edaffd",
		  "fix" : "https://www.sqlite.org/src/info/3cde82c86b963fa7"
	  }
  },
  {
	  "date" : "07/10/2019",
	  "title" : "FTS integrity-check malfunctions",
	  "test" : "CREATE TABLE t0(c0);\nCREATE VIRTUAL TABLE vt0 USING fts5(c0);\nBEGIN TRANSACTION;\nINSERT INTO vt0(c0) VALUES (NULL);\nALTER TABLE t0 ADD COLUMN c5 REAL;\nINSERT INTO vt0(vt0) VALUES('integrity-check'); -- unexpected: database disk image is malformed",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "error",
	  "severity" : "Critical",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=8fe768e9c9",
		  "fix" : "https://www.sqlite.org/src/info/31e85fbbc4cfd09a"
	  },
	  "comment" : "After we reported this bug, a test case for the same bug was found using a fuzzer and reported on the SQLite mailing list"
  },
  {
	  "date" : "07/10/2019",
	  "title" : "FTS pgsz option results in \"database disk image is malformed\" error",
	  "test" : "CREATE VIRTUAL TABLE vt0 USING fts5(a);\nPRAGMA reverse_unordered_selects = true;\nINSERT INTO vt0 VALUES('365062398'), (0), (0);\nINSERT INTO vt1(vt1, rank) VALUES('pgsz', '38');\nUPDATE vt0 SET a = 399905135; -- unexpected: database disk image is malformed\nINSERT INTO vt1(vt1) VALUES('integrity-check');",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "error",
	  "severity" : "Critical",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=265e935b26",
		  "fix" : "https://www.sqlite.org/src/info/8ab0aebdb3c2d6fb"
	  }
  },
  {
	  "date" : "07/10/2019",
	  "title" : "FTS rebuild in transaction causes integrity-check to fail",
	  "test" : "CREATE VIRTUAL TABLE vt0 USING fts5(c0);\nINSERT INTO vt0(c0) VALUES (NULL);\nBEGIN TRANSACTION;\nINSERT INTO vt0(vt0) VALUES('rebuild');\nINSERT INTO vt0(vt0) VALUES('rebuild');\nINSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "error",
	  "severity" : "Critical",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=e258f008ce",
		  "fix" : "https://www.sqlite.org/src/info/238e0835714696ab"
	  }
  },
  {
	  "date" : "01/10/2019",
	  "title" : "DROP DATABASE seems to leave behind a table when using the \"tables\" configuration option",
	  "test" : "CREATE DATABASE db tables 1;\nUSE db;\nCREATE TABLE t0(c0 TIMESTAMP, c1 int);\nCREATE TABLE t1(c0 TIMESTAMP, c1 int);\nDROP DATABASE db;\nCREATE DATABASE db;\nUSE db;\nCREATE TABLE t0(c0 TIMESTAMP, c1 int);\nCREATE TABLE t1(c0 TIMESTAMP, c1 int);",
	  "dbms" : "tdengine",
	  "status" : "fixed",

	  "oracle" : "error",
	  "links": {
		  "bugtracker" : "https://github.com/taosdata/TDengine/issues/586"
	  }
  },
  {
	  "date" : "02/10/2019",
	  "title" : "Inserting the \"+\" and \"-\" strings fails",
	  "test" : "CREATE TABLE t0(c0 TIMESTAMP, c1 BINARY(1));\nINSERT INTO t0(c0, c1) VALUES (0, \"-\");",
	  "dbms" : "tdengine",
	  "status" : "verified",

	  "oracle" : "error",
	  "links" : {
		  "bugtracker" : "https://github.com/taosdata/TDengine/issues/589"
	  }
  },
  {
	  "date" : "03/10/2019",
	  "title" : "The \"<>\" and \"=\" operators do not work for NCHAR columns",
	  "test" : "CREATE TABLE t0(c0 TIMESTAMP, c1 NCHAR(1));\nINSERT INTO t0(c0, c1) VALUES(0, \"a\");\nSELECT * FROM t0 WHERE c1 = \"a\";",
	  "dbms" : "tdengine",
	  "status" : "open",

	  "oracle" : "error",
	  "links" : {
		  "bugtracker" : "https://github.com/taosdata/TDengine/issues/590"
	  }
  },
  {
	  "date" : "03/10/2019",
	  "title" : "Unexpected result when using arithmetic expressions in WHERE clause",
	  "test" : "CREATE TABLE t0(c0 TIMESTAMP, c1 INT);\nINSERT INTO t0 VALUES(0, 1);\nSELECT * FROM t0 WHERE c1=(c1*1);",
	  "dbms" : "tdengine",
	  "status" : "open",

	  "oracle" : "pqs",
	  "links" : {
		  "bugtracker" : "https://github.com/taosdata/TDengine/issues/591"
	  }
  },
  {
	  "date" : "09/10/2019",
	  "title" : "FTS integrity-check indicates that the database disk image is malformed",
	  "test" : "CREATE VIRTUAL TABLE vt0 USING fts5(c0, c1);\nINSERT INTO vt0(vt0, rank) VALUES('pgsz', '70000');\nINSERT INTO vt0(c0) VALUES (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0);\nUPDATE vt0 SET c1 = 'T,D&p^y/7#3*v<b<4j7|f';\nINSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "error",
	  "severity" : "Critical",
	  "links" : {
		"bugtracker" : "https://www.sqlite.org/src/tktview?name=81a7f7b9e2",
		"fix" : "https://www.sqlite.org/src/info/75775c5ab44e497c"
	  }
  },
  {
	  "date" : "09/10/2019",
	  "title" : "FTS rebuild in combination with crisismerge results in error \"database or disk is full\"",
	  "test" : "PRAGMA reverse_unordered_selects = true;\nCREATE VIRTUAL TABLE vt0 USING fts5(c0);\nINSERT INTO vt0(vt0, rank) VALUES('crisismerge', 2000);\nINSERT INTO vt0(vt0, rank) VALUES('automerge', 0);\nINSERT INTO vt0(c0) VALUES (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0),(0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0);\nINSERT INTO vt0(vt0) VALUES('rebuild'); -- database or disk is full",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "error",
	  "severity" : "Critical",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=d392017c8e",
		  "fix" : "https://www.sqlite.org/src/info/86e497209217abb7"
	  }
  },
  {
	  "date" : "09/10/2019",
	  "title" : "LEFT JOIN in view malfunctions",
	  "test" : "CREATE TABLE t0(c1);\nCREATE TABLE t1(c0);\nCREATE VIEW v0 AS SELECT c1 FROM t1 LEFT JOIN t0;\nINSERT INTO t1 VALUES (1);\nSELECT * FROM v0 WHERE NOT(v0.c1 IS FALSE); -- expected: row is fetched, actual: no row is fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "metamorphic",
	  "severity" : "Critical",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=a976c487d1",
		  "fix" : "https://www.sqlite.org/src/info/eb7ed90b8a65748f"
	  }
  },
  {
	  "date" : "10/10/2019",
	  "title" : "LEFT JOIN in view malfunctions with NOTNULL",
	  "test" : "CREATE TABLE t0(c0);\nCREATE TABLE t1(c1);\nINSERT INTO t0(c0) VALUES(0);\nCREATE VIEW v0(c0) AS SELECT t1.c1 FROM t0 LEFT JOIN t1;\nSELECT * FROM v0 WHERE v0.c0 NOTNULL NOTNULL; -- expected: row is fetched, actual: no row is fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "metamorphic",
	  "severity" : "Critical",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=c31034044b",
		  "fix" : "https://www.sqlite.org/src/info/7833feecfe745e23"
	  }
  },
  {
	  "date" : "11/10/2019",
	  "title" : "FTS order=DESC results into integrity-check failing",
	  "test" : "CREATE VIRTUAL TABLE vt0 USING fts4(c0, order=DESC);\nINSERT INTO vt0(c0) VALUES (0), (0);\nINSERT INTO vt0(vt0) VALUES('integrity-check'); database disk image is malformed",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "error",
	  "severity" : "Critical",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=8a6fa2bb22",
		  "fix" : "https://www.sqlite.org/src/info/5863546df99abd1a"
	  }
  },
  {
	  "date" : "11/10/2019",
	  "title" : "FTS integrity-check malfunctions for transaction and the prefix option",
	  "test" : "CREATE VIRTUAL TABLE vt0 USING fts4(c0, prefix=1);\nBEGIN;\nINSERT INTO vt0 VALUES (0);\nINSERT INTO vt0(vt0) VALUES('optimize');\nINSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed",
	  "dbms" : "sqlite",
	  "status" : "fixed",
	  "oracle" : "error",
	  "severity" : "Critical",

	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=745f1abcdc",
		  "fix" : "https://www.sqlite.org/src/info/4ed905b18847d4db"
	  }
  },
  {
	  "date" : "11/10/2019",
	  "title" : "FTS integrity_check fails when inserting x'00'",
	  "test" : "CREATE VIRTUAL TABLE vt0 USING fts4(c0);\nINSERT INTO vt0 VALUES (x'00');\nINSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "error",
	  "severity" : "minor",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=278ac14262",
		  "fix" : "https://www.sqlite.org/src/info/629e20c9880acc2c"
	  }
  },
  {
	  "date" : "16/10/2019",
	  "title" : "Trigger inserts duplicate value in UNIQUE column",
	  "test" : "PRAGMA recursive_triggers = true;\nCREATE TABLE t0(c0 UNIQUE);\nCREATE TRIGGER tr0 AFTER DELETE ON t0 BEGIN INSERT INTO t0 VALUES(0); END;\nINSERT OR REPLACE INTO t0(c0) VALUES(0), (0);\nREINDEX; -- UNIQUE constraint failed: t0.c0",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "error",
	  "severity" : "Important",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=a8a4847a2d",
		  "fix" : "https://www.sqlite.org/src/info/eea1e7aa57e74c43"
	  }
  },
  {
	  "date" : "17/10/2019",
	  "title" : "FTS merge does not terminate",
	  "test" : "CREATE VIRTUAL TABLE vt0 USING fts4(c0, order=DESC);\nINSERT INTO vt0(c0) VALUES (0);\nINSERT INTO vt0(c0) VALUES (0);\nUPDATE vt0 SET c0 = NULL;\nINSERT INTO vt0(vt0) VALUES('merge=1,4'); -- unexpected: does not terminate",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "hang",
	  "severity" : "Critical",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=bf1aab8978",
		  "fix" : "https://www.sqlite.org/src/info/35beaee059a6ccce"
	  }
  },
  {
	  "date" : "21/10/2019",
	  "title" : "INSERT into table with two triggers does not terminate",
	  "test" : "CREATE TABLE t0(c0, c1, PRIMARY KEY (c0, c1));\nINSERT INTO t0(c0) VALUES (0), (1), (2), (3), (4), (5);\nCREATE TRIGGER tr1 BEFORE DELETE ON t0 FOR EACH ROW BEGIN\n\tDELETE FROM t0 WHERE t0.c1;\n\tINSERT INTO t0(c0) VALUES (6), (7), (8), (9), (10);\nEND;\nCREATE TRIGGER tr0 BEFORE INSERT ON t0 BEGIN\n\tDELETE FROM t0;\n\tDELETE FROM t0;\n\tDELETE FROM t0;\nEND;\nINSERT INTO t0(c1) VALUES (0), (1), (2); -- unexpected: does not terminate",
	  "dbms" : "sqlite",
	  "status" : "closed (not a bug)",

	  "oracle" : "hang",
	  "severity" : "Critical",
	  "links" : {
			"bugtracker" : "https://www.sqlite.org/src/tktview?name=7fc8e5ff25"
	 }
  },
  {
	  "date" : "22/10/2019",
	  "title" : "Comparison of row values results in incorrect result",
	  "test" : "CREATE TABLE t0(c0 COLLATE NOCASE, c1);\nINSERT INTO t0 VALUES('a', 'A');\nSELECT * FROM t0 WHERE (+ t0.c1, 1) >= (t0.c0, 1); -- expected: row is not fetched, actual: row is fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "metamorphic",
	  "severity" : "Critical",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=b47e3627ec",
		  "fix" : "https://www.sqlite.org/src/info/90f7c477354d67d2"
	  }
  },
  {
	  "date" : "22/10/2019",
	  "title" : "Comparison of row values results in incorrect result (incomplete fix)",
	  "test" : "CREATE TABLE t0(c0 COLLATE NOCASE, c1);\nINSERT INTO t0 VALUES('a', 'A');\nSELECT * FROM t0 WHERE (+ t0.c1, 1) >= (t0.c0, 1); -- expected: row is not fetched, actual: row is fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "metamorphic",
	  "severity" : "Critical",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=b47e3627ec",
		  "fix" : "https://www.sqlite.org/src/info/c7da1c01f1f239e6"
	  }
  },
  {
	  "date" : "22/10/2019",
	  "title" : "Row value comparison yields incorrect result",
	  "test" : "CREATE TABLE t0(c0 TEXT PRIMARY KEY);\nINSERT INTO t0(c0) VALUES ('');\nSELECT * FROM t0 WHERE (t0.c0, TRUE) > (CAST('' AS REAL), FALSE); -- unexpected: row is not fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "metamorphic",
	  "severity" : "Critical",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=6ef984af89",
		  "fix" : "https://www.sqlite.org/src/info/5c118617cf08e17a"
	  }
  },
  {
	  "date" : "23/10/2019",
	  "title" : "Comparison of row values with COLLATE NOCASE yields incorrect result",
	  "test" : "CREATE TABLE t0(c0 UNIQUE);\nINSERT INTO t0(c0) VALUES('a');\nSELECT * FROM t0 WHERE (t0.c0, 0) < ('B' COLLATE NOCASE, 0); -- unexpected: row is not fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "metamorphic",
	  "severity" : "Important",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=135c9da751",
		  "fix" : "https://www.sqlite.org/src/info/978b2d20cf95d0b7"
	  }
  },
  {
	  "date" : "24/10/2019",
	  "title" : "Crash on REPLACE INTO of a table with an AFTER DELETE trigger",
	  "test" : "PRAGMA recursive_triggers = true;\nCREATE TABLE t0(c0, c1, c2 UNIQUE);\nCREATE UNIQUE INDEX i0 ON t0(c1) WHERE c0;\nCREATE TRIGGER tr0 AFTER DELETE ON t0 BEGIN DELETE FROM t0; END;\nINSERT INTO t0(c2) VALUES(-1572226132);\nINSERT INTO t0(c0) VALUES(1), (1);\nREPLACE INTO t0(c0, c1, c2) VALUES(2, 0, 0xffffffffa249bbac) -- unexpected: SEGFAULT",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "crash",
	  "severity" : "Severe",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=50c09fc2cf",
		  "fix" : "https://www.sqlite.org/src/info/521f1d3628254948"
	  }
  },
  {
	  "date" : "24/10/2019",
	  "title" : "FTS integrity-check malfunctions nondeterministically with tokenize=\"ascii\"",
	  "test" : "CREATE VIRTUAL TABLE vt0 USING fts5(c0, tokenize = \"ascii\", prefix = 1);\nINSERT INTO vt0(c0) VALUES (x'd1');\nINSERT INTO vt0(vt0) VALUES('integrity-check'); -- unexpected error: database disk image is malformed",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "error",
	  "severity" : "minor",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=dd1f67bf25",
		  "fix" : "https://www.sqlite.org/src/info/8d964e1c21d4cea6"
	  }
  },
  {
	  "date" : "25/10/2019",
	  "title" : "Trigger causes query to compute incorrect result",
	  "test" : "PRAGMA temp.recursive_triggers = true;\nCREATE TABLE t0(c0, c1 UNIQUE);\nCREATE TRIGGER c DELETE ON t0\n\tBEGIN INSERT INTO t0(c1) VALUES(1);\nEND;\nINSERT INTO t0(c1) VALUES(0);\nREPLACE INTO t0(c1) VALUES (0);\nSELECT t0.c1 BETWEEN 0 AND (CASE WHEN 1 THEN 1 ELSE t0.c0 END NOT NULL) FROM t0; -- expected: 1 and 1, actual: 1",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "metamorphic",
	  "severity" : "Severe",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=c1e19e1204",
		  "fix" : "https://www.sqlite.org/src/info/fbac0c65d8464b12"
	  }
  },
  {
	  "date" : "26/10/2019",
	  "title" : "REINDEX causes \"UNIQUE constraint failed\" error for generated column",
	  "test" : "CREATE TABLE t0(c0, c1 TEXT GENERATED ALWAYS AS (1) UNIQUE);\nINSERT INTO t0(c0) VALUES (1);\nREINDEX;\nINSERT INTO t0(c0) VALUES (0);\nREINDEX; -- unexpected: UNIQUE constraint failed",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "error",
	  "severity" : "Important",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=3ea1755124",
		  "fix" : "https://www.sqlite.org/src/info/5b4c0f2ddc6f324e"
	  }
  },
  {
	  "date" : "27/10/2019",
	  "title" : "Segfault in table with generated columns",
	  "test" : "CREATE TABLE t0(c0 INTEGER PRIMARY KEY GENERATED ALWAYS AS(1), c1 UNIQUE GENERATED ALWAYS AS(1), c2 UNIQUE);\nINSERT INTO t0 VALUES(NULL); -- Segmentation fault",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "crash",
	  "severity" : "Important",
	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=91e8695101",
		  "fix" : "https://www.sqlite.org/src/info/6d1bbba9a004a249"
	  }
  },
  {
	  "date" : "29/10/2019",
	  "title" : "Segfault when updating table with generated columns",
	  "test" : "PRAGMA temp_store = MEMORY;\nCREATE TEMP TABLE t0(c0, c1 AS(1) CHECK(NULL) UNIQUE NOT NULL, c2 CHECK(1.0) PRIMARY KEY) WITHOUT ROWID;\nCREATE UNIQUE INDEX e ON t0(CAST(0.0 AS INT)) WHERE 0;\nREINDEX;\nINSERT INTO t0(c2) VALUES (0), (1);\nREPLACE INTO t0(c2, c0) VALUES (0, 0), (x'9b', NULL);\nUPDATE t0 SET c2 = 0 -- Segmentation fault",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "crash",
	  "severity" : "Critical",
	  "links" : {
		  "bugtracker" : "https://sqlite.org/src/tktview?name=9621dd78a0",
		  "fix" : "https://sqlite.org/src/tktview?name=9621dd78a0"
	  }
  },
  {
	  "date" : "29/10/2019",
	  "title" : "VACUUM issue on table with generated column",
	  "test" : "CREATE TABLE t0(c0 AS(1));\nCREATE INDEX i0 ON t0(0 DESC);\nPRAGMA legacy_file_format = true;\nVACUUM; -- table vacuum_db.t0 has 0 columns but 1 values were supplied",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "error",
	  "severity" : "Important",
	  "links" : {
		  "bugtracker" : "https://sqlite.org/src/tktview?name=166347c6fc",
		  "fix" : "https://sqlite.org/src/info/4fba090e678ef184"
	  }
  },
  {
	  "date" : "29/10/2019",
	  "title" : "VACUUM on table with generated column results in an error",
	  "test" : "CREATE TABLE t0(c0 AS(1), c1);\nPRAGMA legacy_file_format = true;\nCREATE INDEX i0 ON t0(0 DESC);\nVACUUM; -- table vacuum_db.t0 has 1 columns but 2 values were supplied",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "error",
	  "severity" : "Minor",
	  "links" : {
		  "bugtracker" : "https://sqlite.org/src/tktview?name=6484e6ce67",
		  "fix" : "https://sqlite.org/src/info/4d424f3047b48fc4"
	  },
	  "comment" : "This bug report made the SQLite developers remove the PRAGMA legacy_file_format option."
  },
  {
	  "date" : "31/10/2019",
	  "title" : "VACUUM on table with generated column that uses TYPEOF results in an error",
	  "test" : "CREATE TABLE t0(c0 AS(TYPEOF(c1)), c1);\nINSERT INTO t0(c1) VALUES(0);\nVACUUM; -- table vacuum_db.t0 has 1 columns but 2 values were supplied",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "error",
	  "severity" : "Minor",
	  "links" : {
		  "bugtracker" : "https://sqlite.org/src/tktview?name=1d2a8efc6c",
		  "fix" : "https://sqlite.org/src/info/329820673a12ff6a"
	  }
  },
  {
	  "date" : "31/10/2019",
	  "title" : "Segfault in table with generated column and foreign key",
	  "test" : "CREATE TABLE t0(c0, c1, c2 AS(1), PRIMARY KEY(c0) FOREIGN KEY(c2) REFERENCES t0);\nCREATE VIRTUAL TABLE vt0 USING fts4;\nCREATE INDEX i0 ON t0(c2, 0 BETWEEN '' AND c1 COLLATE BINARY, CASE '' WHEN c3 THEN 0 WHEN 0 THEN 0 WHEN '' THEN 0 WHEN 0 THEN c0 ELSE c1 END);\nINSERT INTO t0 VALUES (0, 0), ('', 0);\nPRAGMA foreign_keys = true;\nANALYZE;\nUPDATE t0 SET c1 = c0; -- unexpected: Segmentation fault",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "crash",
	  "severity" : "Minor",
	  "links" : {
		  "bugtracker" : "https://sqlite.org/src/tktview?name=b9befa4b83",
		  "fix" : "https://sqlite.org/src/info/40d3282ec285d9f7"
	  }
  },
  {
	  "date" : "1/11/2019",
	  "title" : "REPLACE causes segfault in table with generated column and foreign key",
	  "test" : "CREATE TABLE t0 (c0, c1 a UNIQUE AS (1), c2, c3, FOREIGN KEY(c3) REFERENCES t0(c1));\nCREATE VIRTUAL TABLE vt0 USING fts4(c0);\nPRAGMA foreign_keys = true;\nINSERT INTO vt0 VALUES (0);\nREPLACE INTO t0(c3, c2, c0) VALUES (0, 0, 0), (0, 0, 0); -- Segmentation fault",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "crash",
	  "severity" : "Minor",
	  "links" : {
		  "bugtracker" : "https://sqlite.org/src/tktview?name=c28a01da72",
		  "fix" : "https://sqlite.org/src/info/bc6a43e7ee6353b9"
	  }
  },
  {
	  "date" : "2/11/2019",
	  "title" : "Incorrect result for GLOB operator",
	  "test" : "CREATE TABLE t0(c0);\nCREATE INDEX i0 ON t0(0) WHERE c0 GLOB c0;\nINSERT INTO t0 VALUES (0);\nCREATE UNIQUE INDEX i1 ON t0(0);\nCREATE UNIQUE INDEX i2 ON t0(0);\nREPLACE INTO t0 VALUES(0);\nSELECT COUNT(*) FROM t0 WHERE t0.c0 GLOB t0.c0; -- expected: 1, actual: 2",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "metamorphic",
	  "severity" : "Severe",
	  "links" : {
		  "bugtracker" : "https://sqlite.org/src/tktview?name=a9efb42811",
		  "fix" : "https://sqlite.org/src/info/17e9f65814264de9"
	  }
  },
  {
	  "date" : "3/11/2019",
	  "title" : "LEFT JOIN in view malfunctions with partial index on table",
	  "test" : "CREATE TABLE t0(c0);\nCREATE TABLE t1(c0);\nINSERT INTO t1(c0) VALUES (0);\nCREATE INDEX i0 ON t0(0) WHERE NULL IN (c0);\nCREATE VIEW v0(c0) AS SELECT t0.c0 FROM t1 LEFT JOIN t0;\nSELECT COUNT(*) FROM v0 WHERE NULL IN (v0.c0); -- expected: 0, actual: 1",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "metamorphic",
	  "severity" : "Important",
	  "links" : {
		  "bugtracker" : "https://sqlite.org/src/tktview?name=623eff57e7",
		  "fix" : "https://sqlite.org/src/info/3be19e1151af1850"
	  }
  },
  {
	  "date" : "3/11/2019",
	  "title" : "PRAGMA integrity_check fails due to CHECK constraint even without records",
	  "test" : "CREATE TABLE t0(c0 CHECK(ABS(-9223372036854775808)));\nPRAGMA integrity_check; -- unexpected: integer overflow",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "error",
	  "severity" : "Minor",
	  "links" : {
		  "bugtracker" : "https://sqlite.org/src/tktview?name=3c9eadd2a6",
		  "fix" : "https://www.sqlite.org/src/info/c5f96a085db9688a"
	  }
  },
  {
	  "date" : "4/11/2019",
	  "title" : "Row value comparison malfunctions on view with left join",
	  "test" : "CREATE TABLE t0(c0);\nCREATE TABLE t1(c0);\nCREATE VIEW v0(c0) AS SELECT t0.c0 FROM t1 LEFT JOIN t0;\nINSERT INTO t1(c0) VALUES (0);\nSELECT * FROM v0 WHERE (v0.c0, x'') != (NULL, 0); -- unexpected: row is not fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "oracle" : "metamorphic",
	  "severity" : "Important",
	  "links" : {
		  "bugtracker" : "https://sqlite.org/src/tktview?name=02aa2bd02f",
		  "fix" : "https://sqlite.org/src/info/ea20068e6d97c934"
	  }
  },
  {
	  "date" : "5/11/2019",
	  "title" : "UNLIKELY in query causes row to not be fetched",
	  "test" : "CREATE TABLE t0(c0, c1, c2, PRIMARY KEY(c2)) WITHOUT ROWID;\nCREATE INDEX i0 ON t0(CAST(c1 AS INT));\nCREATE VIEW v0 AS SELECT 0, c0 FROM t0 GROUP BY 1 HAVING c2;\nINSERT INTO t0(c2) VALUES('');\nINSERT INTO t0(c1, c2) VALUES(1, 1);\nSELECT * FROM v0 WHERE UNLIKELY(1); -- unexpected: no row is fetched",
	  "dbms" : "sqlite",
	  "status" : "closed (not a bug)",
	  "oracle" : "metamorphic",
	  "severity" : "Critical",

	  "links" : {
		  "bugtracker" : "https://sqlite.org/src/tktview?name=1cda8f4b54"
	  }
  },
  {
	  "date" : "6/11/2019",
	  "title" : "REPLACE on table with generated NOT NULL column results in segfault",
	  "test" : "CREATE TABLE t0(c0 NOT NULL AS(c1), c1);\nREPLACE INTO t0(c1) VALUES(NULL); -- Segmentation fault",
	  "dbms" : "sqlite",
	  "status" : "fixed",
	  "oracle" : "crash",
	  "severity" : "Important",

	  "links" : {
		  "bugtracker" : "https://sqlite.org/src/tktview?name=2399f59861",
		  "fix" : "https://sqlite.org/src/info/77b1c90add514050"
	  }
  },
  {
	  "date" : "6/11/2019",
	  "title" : "NULL WHERE condition unexpectedly results in row being fetched",
	  "test" : "CREATE TABLE t0 (c0 GENERATED ALWAYS AS (1), c1 UNIQUE, c2 UNIQUE);\nINSERT INTO t0(c1) VALUES (1);\nSELECT * FROM t0 WHERE 0 = t0.c2 OR t0.c1 BETWEEN t0.c2 AND 1; -- unexpected: row is fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",
	  "oracle" : "metamorphic",
	  "severity": "Important",

	  "links" : {
		  "bugtracker" : "https://sqlite.org/src/tktview?name=ce22a07731",
		  "fix" : "https://sqlite.org/src/info/36c11ad51fe9ab1b"
	  }
  },
  {
	  "date" : "6/11/2019",
	  "title" : "Segfault when inserting into table with generated columns",
	  "test" : "CREATE TABLE t0(c0 AS ((c4, 9, c4) < ('a', c1, 1)), c1 AS (1) NOT NULL, c2, c3 CHECK  ((x'56', 0) = (c1, 0)), c4 NOT NULL);\nPRAGMA integrity_check;\nINSERT INTO t0 VALUES (0, 0, 0), (0, 0, 0); -- unexpected: Segmentation fault",
	  "dbms" : "sqlite",
	  "status" : "fixed",
	  "oracle" : "crash",
	  "severity" : "Important",

	  "links" : {
		  "bugtracker" : "https://sqlite.org/src/tktview?name=4fc08501f4",
		  "fix" : "https://www.sqlite.org/src/info/9e07b48934e9a972"
	  }
  },
  {
	  "date" : "7/11/2019",
	  "title" : "UPDATE on table with two generated columns and CHECK clause results in segfault",
	  "test" : "CREATE TABLE t0(c0, c1 AS(c0 + c2), c2 AS(c1) CHECK(c2));\nUPDATE t0 SET c0 = NULL; -- Segmentation fault",
	  "dbms" : "sqlite",
	  "status" : "fixed",
	  "oracle" : "crash",
	  "severity" : "Important",

	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=299b50ba81",
		  "fix" : "https://www.sqlite.org/src/info/104a2beb57037f93"
	  }
  },
  {
	  "date" : "7/11/2019",
	  "title" : "VACUUM results in \"database disk image is malformed\" for PRIMARY KEY with duplicate column",
	  "test" : "CREATE TABLE t0(c0, c1 UNIQUE COLLATE NOCASE, PRIMARY KEY(c1, c1)) WITHOUT ROWID;\nINSERT INTO t0(c1) VALUES(0);\nVACUUM; -- unexpected: database disk image is malformed",
	  "dbms" : "sqlite",
	  "status" : "fixed",
	  "oracle" : "error",
	  "severity" : "Important",

	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=302027baf1",
		  "fix" : "https://www.sqlite.org/src/info/34f64f11ca481996"
	  }
  },
  {
	  "date" : "7/11/2019",
	  "title" : "DISTINCT malfunctions for VIEW with virtual table",
	  "test" : "CREATE TABLE t0(c0);\nCREATE VIRTUAL TABLE vt0 USING fts5(c0);\nINSERT INTO t0(c0) VALUES (1), (0);\nINSERT INTO vt0(c0) VALUES (0), (0);\nCREATE VIEW v0 AS SELECT DISTINCT t0.c0 FROM vt0, t0 ORDER BY vt0.rowid;\nSELECT * FROM v0; -- unexpected: 4 rows are fetched",
	  "dbms" : "sqlite",
	  "status" : "fixed",
	  "oracle" : "metamorphic",
	  "severity" : "Severe",

	  "links" : {
		  "bugtracker" : "https://www.sqlite.org/src/tktview?name=7e59041f9c",
		  "fix" : "https://www.sqlite.org/src/info/b59f94e4da9b1653"
	  }
	  
  },
  {
	  "date" : "13/11/2019",
	  "title" : "REINDEX CONCURRENTLY unexpectedly fails",
	  "test" : "CREATE TEMP TABLE t0(c1 INT PRIMARY KEY) ON COMMIT DELETE ROWS;\nREINDEX TABLE CONCURRENTLY t0; -- unexpected: ERROR:  index \"t0_pkey_ccnew\" already contains data",
	  "dbms" : "postgres",
	  "status" : "verified",
	  "oracle" : "error",

	  "links" : {
		  "email" : "https://www.postgresql.org/message-id/flat/CA%2Bu7OA6gP7YAeCguyseusYcc%3DuR8%2BypjCcgDDCTzjQ%2Bk6S9ksQ%40mail.gmail.com"
	  }
  },
  {
	  "date" : "13/11/2019",
	  "title" : "Unexpected \"cache lookup failed for collation 0\" failure",
	  "test" : "CREATE TABLE t0(c0 CHAR(2) COLLATE \"C\", c1 CHAR(2) COLLATE \"POSIX\");\nINSERT INTO t0 VALUES('', '');\nSELECT * FROM t0 WHERE t0.c1 NOT IN (t0.c0); -- unexpected: cache lookup failed for collation 0",
	  "dbms" : "postgres",
	  "status" : "fixed",
	  "oracle" : "error",

	  "links" : {
		  "email" : "https://www.postgresql.org/message-id/flat/CA%2Bu7OA4HOjtymxAbuGNh4-X_2R0Lw5n01tzvP8E5-i-2gQXYWA%40mail.gmail.com",
		  "fix" : "https://github.com/postgres/postgres/commit/d57d61533a2b5b27b60cc9024c54688390871bf6"
	  }
  },
  {
	  "date" : "16/11/2019",
	  "title" : "ALTER TABLE results in \"could not find cast from 3904 to 3831\"",
	  "test" : "CREATE TABLE t0(c0 int4range UNIQUE, FOREIGN KEY (c0) REFERENCES t0(c0));\nALTER TABLE t0 ALTER c0 SET DATA TYPE int4range; -- ERROR:  could not find cast from 3904 to 3831",
	  "dbms" : "postgres",
	  "status" : "open",
	  "oracle" : "error",

	  "links" : {
		  "email" : "https://www.postgresql.org/message-id/flat/CA%2Bu7OA4n2Q8G1DD5MEp%2Bmu08ayB%2BULRFrG4s_v3LhOj8f4bX-g%40mail.gmail.com"
	  }
  },
  {
	  "date" : "19/11/2019",
	  "title" : "Failed assertion clauses != NIL",
	  "test" : "CREATE TABLE t0(c0 boolean, c1 boolean, c2 boolean);\nINSERT INTO t0 VALUES(FALSE, FALSE, FALSE);\nCREATE STATISTICS s0 ON c0, c2 FROM t0;\nANALYZE;\nSELECT * FROM t0 WHERE t0.c2 OR t0.c1 OR t0.c0; -- TRAP: FailedAssertion(\"clauses != NIL\", File: \"mcv.c\", Line: 1551)",
	  "dbms" : "postgres",
	  "status" : "fixed",

	  "oracle" : "crash",
	  "links" : {
		  "email" : "https://www.postgresql.org/message-id/flat/CA%2Bu7OA7H5rcE2%3D8f263w4NZD6ipO_XOrYB816nuLXbmSTH9pQQ%40mail.gmail.com",
		  "fix" : "https://github.com/postgres/postgres/commit/c676e659b246f94d571b57b559f80cb2dc03e73b"
	  }
  },
  {
	  "date" : "19/11/2019",
	  "title" : "No = operator for opfamily 426",
	  "test" : "CREATE TABLE t0(c0 TEXT);\nCREATE INDEX i0 ON t0(c0 bpchar_ops);\nSELECT * FROM t0 WHERE t0.c0 LIKE ''; -- ERROR:  no = operator for opfamily 426",
	  "dbms" : "postgres",
	  "status" : "fixed",

	  "oracle" : "error",
	  "links" : {
		  "email" : "https://www.postgresql.org/message-id/flat/CA%2Bu7OA7nnGYy8rY0vdTe811NuA%2BFrr9nbcBO9u2Z%2BJxqNaud%2Bg%40mail.gmail.com",
		  "fix" : "https://github.com/postgres/postgres/commit/b3c265d7be42484bd0ab4a9c0a920289e8f5c995",
		  "improvement 1" : "https://github.com/postgres/postgres/commit/2ddedcafca116c99e08c777ab2ab3a4de6f00c7e",
		  "improvement 2" : "https://github.com/postgres/postgres/commit/9ff5b699ed3e2d922ff6f5660e53b51bb5db983c"
	  }
  },
  {
	"date" : "20/11/2019",
	"title" : "ALTER TABLE fails when changing column type due to index with bit_ops opclass",
	"test" : "CREATE TABLE t0(c0 BIT VARYING(1));\nCREATE INDEX i0 ON t0(c0 bit_ops);\nALTER TABLE t0 ALTER c0 TYPE TEXT; -- ERROR:  operator class \"bit_ops\" does not accept data type text",
	"dbms" : "postgres",
	"status" : "closed (not a bug)",

	"oracle" : "error",
	"links" : {
		"email" : "https://www.postgresql.org/message-id/flat/CA%2Bu7OA4%3Dvs9LjjP_643kgLRENv2eW%2B8v%2B5M8QGsY3Sg1K_18fg%40mail.gmail.com"
	}  
  },
  {
	  "date" : "20/11/2019",
	  "title" : "Fetching from information_schema.tables results in segfault",
	  "test" : "CREATE TABLE t0(c0 int);\nCREATE VIEW v0 AS SELECT * FROM t0;\nCREATE OR REPLACE VIEW v0 AS SELECT * FROM v0;\nSELECT * FROM information_schema.tables; -- server process (PID 2461) was terminated by signal 11: Segmentation fault",
	  "dbms" : "postgres",
	  "status" : "fixed",

	  "oracle" : "crash",
	  "links" : {
		  "fix" : "https://github.com/postgres/postgres/commit/4a0aab14dcb35550b55e623a3c194442c5666084"
	  }
  },
  {
	  "date" : "11/11/2019",
	  "title" : "Incorrect result for expression with the <=> operator and IS NULL",
	  "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0 VALUES (1);\nSELECT (c0 > (NULL <=> 0)) IS NULL FROM t0; -- expected: 0, actual: 1",
	  "dbms" : "mariadb",
	  "status" : "verified",

	  "oracle" : "metamorphic",
	  "links" : {
		  "bugtracker" : "https://jira.mariadb.org/browse/MDEV-21029"
	  }
  },
  {
	  "date" : "11/11/2019",
	  "title" : "Index causes incorrect result when comparing float-point number with INT",
	  "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0 VALUES (1);\nCREATE INDEX i0 ON t0(c0);\nSELECT * FROM t0 WHERE 0.5 = c0; -- unexpected: row is fetched",
	  "dbms" : "mariadb",
	  "status" : "verified",

	  "oracle" : "metamorphic",
	  "links" : {
		  "bugtracker" : "https://jira.mariadb.org/browse/MDEV-21032"
	  }
  },
  {
	  "date" : "11/11/2019",
	  "title" : "GREATEST() and LEAST() malfunction for NULL",
	  "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0 VALUES (1);\nSELECT * FROM t0 WHERE GREATEST(c0, NULL); -- unexpected: row is fetched",
	  "dbms" : "mariadb",
	  "status" : "verified",

	  "oracle" : "metamorphic",
	  "links" : {
		  "bugtracker" : "https://jira.mariadb.org/browse/MDEV-21034"
	  }
  },
  {
	  "date" : "14/11/2019",
	  "title" : "CREATE UNIQUE INDEX USING HASH malfunctions for engine=Aria table",
	  "test" : "CREATE TABLE t0(c0 INT) engine=Aria;\nCREATE UNIQUE INDEX i0 USING HASH ON t0(c0); -- Key/Index cannot be defined on a virtual generated column",
	  "dbms" : "mariadb",
	  "status" : "closed (duplicate)",

	  "oracle" : "error",
	  "links" : {
		  "bugtracker" : "https://jira.mariadb.org/browse/MDEV-21057"
	  }
  },
  {
	  "date" : "14/11/2019",
	  "title" : "CREATE TABLE with generated column and RLIKE results in segfault",
	  "test" : "CREATE TABLE t0(c0 INT AS(('' RLIKE '['))); -- segfault",
	  "dbms" : "mariadb",
	  "status" : "verified",

	  "oracle" : "crash",
	  "links" : {
		  "bugtracker" : "https://jira.mariadb.org/browse/MDEV-21058"
	  }
  },
  {
	  "date" : "15/11/2019",
	  "title" : "UNIQUE constraint causes a query with string comparison to omit a row in the result set",
	  "test" : "CREATE TABLE t0(c0 INT UNIQUE);\nINSERT INTO t0 VALUES (NULL), (NULL), (NULL), (NULL), (1), (0);\nSELECT * FROM t0 WHERE c0 < '\\n2'; -- expected rows with c0=0 and c0=1, actual: only row with c0=0 is fetched",
	  "dbms" : "mariadb",
	  "status" : "fixed",

	  "oracle" : "metamorphic",
	  "links" : {
		  "bugtracker" : "https://jira.mariadb.org/browse/MDEV-21065",
		  "fix" : "https://github.com/mariadb/server/commit/fc860d3fa3bc854fbe6aab9179d7a4aaf6eb9edf"
	  }
  },
  {
	  "date" : "18/11/2019",
	  "title" : "NOT NULL and UNIQUE constraints cause SUM() to yield an incorrect result",
	  "test" : "CREATE TABLE t0(c0 INT NOT NULL, c1 CHAR UNIQUE);\nINSERT INTO t0 VALUES (0, 1);\nINSERT INTO t0 VALUES (0, '');\nSELECT SUM(a.t) FROM (SELECT (c1 RLIKE c1) = (c0 IS NULL) as t FROM t0) as a; -- expected: 1, actual: 0",
	  "dbms" : "mariadb",
	  "status" : "verified",

	  "oracle" : "metamorphic",
	  "links" : {
		  "bugtracker" : "https://jira.mariadb.org/browse/MDEV-21076"
	  }
  },
  {
	  "date" : "22/11/2019",
	  "title" : "Segfault when creating constant bit_length() index on TEMP table",
	  "test" : "CREATE TEMP TABLE t0(c0 int) ON COMMIT DELETE ROWS;\nCREATE INDEX i0 ON t0(bit_length('')); -- Segmentation fault",
	  "dbms" : "postgres",
	  "status" : "fixed",

	  "oracle" : "crash",
	  "links" : {
		  "fix" : "https://github.com/postgres/postgres/commit/c35b714caff008c875b484656de7d168a7bc45f9"
	  }
  },
  {
	  "date" : "30/11/2019",
	  "title" : "LEFT JOIN malfunctions with partial ISNULL index",
	  "test" : "CREATE TABLE t0(c0);\nCREATE TABLE t1(c0);\nCREATE INDEX i0 ON t0(1) WHERE c0 ISNULL;\nINSERT INTO t0(c0) VALUES (1);\nINSERT INTO t1(c0) VALUES (1);\nSELECT * FROM t1 LEFT JOIN t0 WHERE t0.c0 ISNULL; -- unexpected: row is fetched",
	  "oracle" : "metamorphic",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=7f39060a24",
		  "fix" : "https://www.sqlite.org/src/info/4066a34da7bcdcec"
	  },
	  "severity" : "Important"
  },
  {
	"date" : "02/12/2019",
	"title" : "FailedAssertion(\"!OidIsValid(def->collOid)\", File: \"view.c\", Line: 89)",
	"test" : "CREATE TABLE t0(c0 TEXT COLLATE \"POSIX\");\nCREATE VIEW v0(c0) AS (SELECT (t0.c0 COLLATE \"C\")::INT FROM t0); -- FailedAssertion(\"!OidIsValid(def->collOid)\", File: \"view.c\", Line: 89)",
	"oracle" : "crash",
	"dbms" : "postgres",
	"status" : "verified",

	"links" : {
		"email" : "https://www.postgresql.org/message-id/flat/CA%2Bu7OA5TwqWTrvRoFOF1Vipf5WpfcbQYwtLGzNVXGwa6Ptor9w%40mail.gmail.com"
	}
  },
  {
	  "date" : "04/12/2019",
	  "title" : "Incorrect result for TEXT comparison on rtree table",
	  "test" : "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);\nINSERT INTO rt0(c2) VALUES(NULL);\nSELECT * FROM rt0 WHERE rt0.c2 >= 'a'; -- unexpected: fetches row",
	  "oracle" : "metamorphic",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "severity" : "Important",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=a55ab6d97d",
		  "fix" : "https://www.sqlite.org/src/info/f898d04cf272ef01"
	  }
  },
  {
	  "date" : "05/12/2019",
	  "title" : "column = NULL predicate evaluates to TRUE for rtree table",
	  "test" : "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);\nINSERT INTO rt0(c0) VALUES(0);\nSELECT * FROM rt0 WHERE rt0.c0 = NULL; -- unexpected: row is fetched",
	  "oracle" : "metamorphic",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=30e2c183b6",
		  "fix" : "https://www.sqlite.org/src/info/d43e0efb9642037d"
	  }
  },
  {
	  "date" : "05/12/2019",
	  "title" : "Join on two rtree tables malfunctions",
	  "test" : "CREATE VIRTUAL TABLE rt0 USING rtree(c0, a, b);\nCREATE VIRTUAL TABLE rt1 USING rtree(c0, a, b);\nINSERT INTO rt1(c0) VALUES (x'00');\nINSERT INTO rt0(c0) VALUES ('a');\nSELECT * FROM rt1, rt0 WHERE rt0.c0 = CAST(rt1.c0 AS TEXT); -- unexpected: row is fetched",
	  "oracle" : "metamorphic",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=9fe487ba3c",
		  "fix" : "https://www.sqlite.org/src/info/7ae8c0d52f6aa7f2"
	  }
  },
  {
	  "date" : "05/12/2019",
	  "title" : "Row value comparison malfunctions with rtree table",
	  "test" : "CREATE TABLE t0(c0);\nCREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);\nINSERT INTO rt0(c2) VALUES(NULL);\nINSERT INTO t0 VALUES(0);\nSELECT * FROM rt0, t0 WHERE (t0.c0, 0) > (rt0.c2, 0); -- unexpected: row is fetched",
	  "oracle" : "metamorphic",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "severity" : "Important",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=f096d191b6",
		  "fix" : "https://www.sqlite.org/src/info/b7810062ec2489e1"
	  }
  },
  {
	  "date" : "06/12/2019",
	  "title" : "Comparison on INT column in rtree table malfunctions",
	  "test" : "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2 INT);\nINSERT INTO rt0(c2) VALUES(0);\nSELECT * FROM rt0 WHERE '0' = rt0.c2; -- unexpected: row is not fetched",
	  "oracle" : "metamorphic",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=aa573a787b",
		  "fix" : "https://www.sqlite.org/src/info/32772dfd50b602c0"
	  }
  },
  {
	  "date" : "06/12/2019",
	  "title" : "Incorrect result for predicate on rtree table",
	  "test" : "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);\nINSERT INTO rt0(c1) VALUES(0);\nSELECT * FROM rt0 WHERE rt0.c1 > '-1'; -- unexpected: row is fetched",
	  "oracle" : "metamorphic",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=367a86e288",
		  "fix" : "https://www.sqlite.org/src/info/97fb5a72f91a44d5",
		  "docs fix" : "https://www.sqlite.org/docsrc/info/8199b59a39c017c7"
	  }
  },
  {
	  "date" : "06/12/2019",
	  "title" : "NOT NULL auxiliary column in rtree table malfunctions",
	  "test" : "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2, +c3 NOT NULL);\nINSERT INTO rt0(c3) VALUES(NULL); -- unexpected: inserting NULL succeeds\nSELECT 0 in (rt0.c3) ISNULL FROM rt0; -- expected: 1, actual: 0",
	  "oracle" : "metamorphic",
	  "dbms" : "sqlite",
	  "status"  : "fixed (in documentation)",

	  "severity" : "Cosmetic",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=8bf76328ac",
		  "docs fix" : "https://www.sqlite.org/docsrc/info/c3ab325994a8f495"
	  }
  },
  {
	  "date" : "06/12/2019",
	  "title" : "CREATE VIRTUAL TABLE causes segfault",
	  "test" : "CREATE VIRTUAL TABLE vt0 USING rtree;",
	  "oracle" : "crash",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "comment" : "We reported this bug via a private email.",
	  "links" : {
		  "fix" : "https://www.sqlite.org/src/info/ef73107f475e40e6"
	  }
  },
  {
	  "date" : "06/12/2019",
	  "title" : "Generated column and foreign key causes a segfault",
	  "test" : "PRAGMA cache_size = 100000;\nPRAGMA foreign_keys = true;\nCREATE TEMP TABLE t0(c0, c1 INTEGER PRIMARY KEY AUTOINCREMENT CHECK (c0), c2 BLOB NOT NULL CHECK (LTRIM(1)) UNIQUE DEFAULT '0000000000000'\nCOLLATE BINARY, c3 BLOB UNIQUE NOT NULL ON CONFLICT ABORT CHECK ((''IN (c0, NULL, c1))) GENERATED ALWAYS AS (1), FOREIGN KEY(c1) REFERENCES t0(c2) ON DELETE CASCADE);\nCREATE UNIQUE INDEX i0 ON t0(0, 0, 0);\nCREATE UNIQUE INDEX i1 ON t0(0, 0, 0);\nCREATE UNIQUE INDEX i2 ON t0(0, 0, c1);\nCREATE UNIQUE INDEX i3 ON t0(0, 0, c1);\nCREATE UNIQUE INDEX i4 ON t0(c0, 0, c2);\nCREATE INDEX i5 ON t0(0, CASE WHEN 1 THEN 1 WHEN c2 THEN c1 END, 0);\nVACUUM;\nINSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0); -- segfault",
	  "oracle" : "crash",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "links" : {
		  "fix" : "https://www.sqlite.org/src/info/27c0fdab1ba4d499"
	  }
  },
  {
	  "date" : "08/12/2019",
	  "title" : "Query on table without rows and generated column results in \"out of memory\" error",
	  "test" : "CREATE TABLE t0(c0 AS (1), c1);\nCREATE TABLE t1(c0);\nSELECT * FROM t0, t1 WHERE t0.c0 == 0; -- out of memory",
	  "oracle" : "error",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "severity" : "Important",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=b92e5e8ec2",
		  "fix" : "https://www.sqlite.org/src/info/9d75e1ccc72e9f53"
	  }
  },
  {
	  "date" : "09/12/2019",
	  "title" : "PRAGMA integrity_check does not terminate on table with generated column",
	  "test" : "CREATE TABLE t0 (c0, c1 NOT NULL GENERATED ALWAYS AS (c0 = 0));\nINSERT INTO t0(c0) VALUES (0);\nPRAGMA integrity_check; -- hangs",
	  "oracle" : "hang",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=bd8c280671",
		  "fix" : "https://www.sqlite.org/src/info/f3b39c71b88cb672"
	  },
	  "severity" : "Important"
  },
  {
	  "date" : "11/12/2019",
	  "title" : "LEFT JOIN segfault on rtree table",
	  "test" : "CREATE TABLE t0(c0);\nCREATE VIRTUAL TABLE vt0 USING rtree(c0, c1, c2);\nINSERT INTO t0(c0) VALUES(0);\nSELECT * FROM t0 LEFT JOIN vt0 ON c2 IN (0) WHERE c1 IN (NULL);",
	  "oracle" : "crash",
	  "dbms" : "sqlite",
	  "status" : "fixed",
	  "links" : {
		  "fix" : "https://www.sqlite.org/src/info/840de36df1aaeb4b"
	  }
  },
  {
	  "date" : "10/12/2019",
	  "title" : "REINDEX results in \"UNIQUE constraint failed\" for generated column",
	  "test" : "CREATE TABLE t0(c0 AS (0 = UNLIKELY(c1)) UNIQUE, c1 TEXT);\nINSERT INTO t0(c1) VALUES (1), (0);\nREINDEX; -- UNIQUE constraint failed: t0.c0",
	  "oracle" : "error",
	  "dbms" : "sqlite",
	  "status" : "fixed",
	  "severity" : "Important",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=d7c3f125c9",
		  "fix" : "https://www.sqlite.org/src/info/d47d66e3d360d8aa"
	  }
  },
  {
	  "date" : "11/12/2019",
	  "title" : "FTS database disk image is malformed for UTF-16 encoding after update",
	  "test" : "PRAGMA encoding = 'UTF-16';\nCREATE VIRTUAL TABLE vt0 USING fts5(c0);\nINSERT INTO vt0 VALUES (x'46f0');\nUPDATE vt0 SET c0=NULL;\nINSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed",
	  "oracle" : "error",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "severity" : "Critical",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=cf36cb4e02",
		  "commit" : "https://www.sqlite.org/src/info/c16305eba0eb1436"
	  }
  },
  {
	  "date" : "14/12/2019",
	  "title" : "REINDEX segfaults on table with generated columns",
	  "test" : "CREATE TABLE t0(c0 AS(1 >= 1), c1 UNIQUE AS(TYPEOF(c0)), c2);\nCREATE VIRTUAL TABLE t1 USING fts4;\nINSERT INTO t0 VALUES(0);\nREINDEX; -- segfault",
	  "oracle" : "segfault",
	  "dbms" : "sqlite",
	  "status" : "fixed",

	  "severity" : "Important",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=b439bfcfb7",
		  "fix" : "https://www.sqlite.org/src/info/2401e04730a156aa"
	  }
  },
  {
	  "date" : "16/12/2019",
	  "title" : "LEFT JOIN malfunctions with generated column",
	  "test" : "CREATE TABLE t0(c0);\nCREATE TABLE t1(c0, c1 AS(1));\nINSERT INTO t0 VALUES(0);\nSELECT t1.c1 IS TRUE FROM t0 LEFT JOIN t1; -- expected: 0, actual: 1",
	  "oracle" : "metamorphic",
	  "dbms" : "sqlite",

	  "severity" : "Critical",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=3b84b42943",
		  "fix" : "https://www.sqlite.org/src/tktview?name=3b84b42943"
	  }
  },
  {
	  "date" : "19/12/2019",
	  "title" : "UPDATE causes \"database table is locked\" for rtree table",
	  "test" : "CREATE VIRTUAL TABLE t0 USING rtree(c0, c1, c2);\nINSERT INTO t0(c1) VALUES(0), (0);\nUPDATE t0 SET c0 = (SELECT 1 FROM t0); -- unexpected: database table is locked",
	  "oracle" : "error",
	  "dbms" : "sqlite",

	  "severity" : "Minor",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=56a74875be",
		  "fix" : "https://www.sqlite.org/src/info/eb95dac7f6482c36"
	  }
  },
  {
	  "date" : "20/12/2019",
	  "title" : "FILTER clause in window function causes a segfault",
	  "test" : "CREATE TABLE t0(c0);\nCREATE TABLE t1(c0, c1 UNIQUE);\nINSERT INTO t0(c0) VALUES(NULL);\nSELECT COUNT(*) FROM t0, t1 WHERE (SELECT AVG(0) FILTER(WHERE t1.c1)); -- segmentation fault",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "links" : {
		  "fix" : "https://www.sqlite.org/src/info/3cc2b5709e66ef60"
	  }
  },
  {
	  "date" : "20/12/2019",
	  "title" : "Incorrect result for BETWEEN and generated column",
	  "test" : "CREATE TABLE t0(c0 REAL AS(1) UNIQUE, c1 INT);\nINSERT INTO t0 VALUES('');\nSELECT * FROM t0 WHERE (1 BETWEEN CAST(t0.c0 AS TEXT) AND t0.c0); -- unexpected: row is fetched",
	  "oracle" : "metamorphic",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Important",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=e0a8120553",
		  "fix" : "https://sqlite.org/src/info/728ad39e3bd07a25"
	  }
  },
  {
	  "date" : "20/12/2019",
	  "title" : "FTS database disk image is malformed for UTF-16 encoding",
	  "test" : "PRAGMA encoding = 'UTF-16';\nCREATE VIRTUAL TABLE vt0 USING fts5(c0);\nINSERT INTO vt0 VALUES (x'3078');\nINSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed",
	  "oracle" : "error",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Critical",
	  "links" : {
		  "bugreport" : "https://sqlite.org/src/tktview?name=e431c35542",
		  "commit" : "https://sqlite.org/src/info/a1ba9a37d7a68a6d"
	  }
  },
  {
	  "date" : "21/12/2019",
	  "title" : "FTS database disk image is malformed for update on languageid",
	  "test" : "CREATE VIRTUAL TABLE vt0 USING fts4(c0, languageid=\"lid\");\nINSERT INTO vt0 VALUES (0), (1);\nBEGIN;\nUPDATE vt0 SET lid = 1;\nINSERT INTO vt0(vt0) VALUES('integrity-check'); -- unexpected: database disk image is malformed",
	  "oracle" : "error",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Critical",
	  "links" : {
		  "bugreport" : "https://sqlite.org/src/tktview?name=cd3311e323",
		  "commit" : "https://sqlite.org/src/info/70815e273f511481"
	  }
  },
  {
	  "date" : "22/12/2019",
	  "title" : "Debug assertion sqlite3VdbeMemAboutToChange: Assertion `(mFlags&MEM_Str)==0 || (pMem->n==pX->n && pMem->z==pX->z)' failed",
	  "test" : "PRAGMA encoding = 'UTF16';\nCREATE TABLE t0(c0 REAL, c1);\nINSERT INTO t0(c0) VALUES (''), (0);\nCREATE INDEX i0 ON t0(c1) WHERE c0 GLOB 3;\nUPDATE t0 SET c1=0; -- sqlite3.c:75871: sqlite3VdbeMemAboutToChange: Assertion `(mFlags&MEM_Str)==0 || (pMem->n==pX->n && pMem->z==pX->z)' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Minor", 
	  "links" : {
			"bugreport" : "https://sqlite.org/src/tktview?name=5ad2aa6921",
			"fix" : "https://www.sqlite.org/src/info/89a9dad6330270a4"
	  }
  },
  {
	  "date" : "22/12/2019",
	  "title" : "Debug assertion fts5StructureRead: Assertion `p->iStructVersion!=0' failed",
	  "test" : "PRAGMA locking_mode = EXCLUSIVE;\nPRAGMA journal_mode = PERSIST;\nCREATE VIRTUAL TABLE vt0 USING fts5(c0);\nINSERT INTO vt0(vt0) VALUES('integrity-check');\nINSERT INTO vt0(vt0, rank) VALUES('usermerge', 2); -- sqlite3.c:213961: fts5StructureRead: Assertion `p->iStructVersion!=0' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Critical",
	  "links" : {
		  "bugreport" : "https://sqlite.org/src/tktview?name=9cb7d0ef44",
		  "fix" : "https://sqlite.org/src/info/45748e2db028ffbd"
	  }
  },
  {
	  "date" : "22/12/2019",
	  "title" : "Debug assertion sqlite3VdbeExec: Assertion `memIsValid(pRec)' failed",
	  "test" : "CREATE TABLE t0(c0 UNIQUE);\nINSERT INTO t0 VALUES(0);\nSELECT * FROM t0 WHERE (0, t0.c0) IN(SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0); -- sqlite3.c:87244: sqlite3VdbeExec: Assertion `memIsValid(pRec)' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Critical",
	  "links" : {
		  "bugreport" : "https://sqlite.org/src/tktview?name=f00d096cae",
		  "fix" : "https://sqlite.org/src/info/8c856404b4e98d29"
	  }
  },
  {
	  "date" : "22/12/2019",
	  "title" : "SELECT on window function causes a segfault",
	  "test" : "CREATE TABLE t0(c0 UNIQUE);\nSELECT * FROM t0 WHERE(c0, 0) IN(SELECT FIRST_VALUE(0) OVER(), 0); -- Segmentation fault",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Critical",
	  "links" : {
		  "bugreport" : "https://sqlite.org/src/tktview?name=d9ed4ebef1",
		  "fix" : "https://www.sqlite.org/src/info/0b1dbd60f5db3abe"
	  }
  },
  {
	  "date" : "22/12/2019",
	  "title" : "Debug assertion sqlite3VdbeExec: Assertion `flags3==pIn3->flags' failed",
	  "test" : "CREATE TABLE t0(c0 CHECK(c1 IN(c1)), c1 INT);\nINSERT INTO t0(c1) VALUES('0'); -- sqlite3.c:86300: sqlite3VdbeExec: Assertion `flags3==pIn3->flags' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://sqlite.org/src/tktview?name=1b06916e01",
		  "fix" : "https://sqlite.org/src/info/ddb17d92df194337"
	  }
  },
  {
	  "date" : "22/12/2019",
	  "title" : "Debug assertion sqlite3ExprSkipCollateAndLikely: Assertion `pExpr->op==TK_COLLATE' failed",
	  "test" : "CREATE TABLE t0(c0);\nCREATE INDEX i0 ON t0((c0 NOTNULL) COLLATE BINARY);\nSELECT * FROM t0 WHERE(c0 NOTNULL) COLLATE BINARY BETWEEN 0 AND c0; -- sqlite3.c:98025: sqlite3ExprSkipCollateAndLikely: Assertion `pExpr->op==TK_COLLATE' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://sqlite.org/src/tktview?name=b0cb8aff56",
		  "fix" : "https://sqlite.org/src/info/56539e1c132632c0"
	  }
  },
  {
	  "date" : "22/12/2019",
	  "title" : "Debug assertion constructAutomaticIndex: Assertion `!ExprHasProperty(pExpr, EP_FromJoin) || pExpr->iRightJoinTable!=pSrc->iCursor || pLoop->prereq!=0' failed",
	  "test" : "CREATE VIRTUAL TABLE vt0 USING fts5(c0);\nCREATE TABLE t0(c0);\nCREATE VIEW v0(c0) AS SELECT 0 GROUP BY 1;\nSELECT * FROM v0, t0 LEFT JOIN vt0 ON vt0.c0 MATCH 1 WHERE v0.c0 == 0 -- sqlite3.c:143296: constructAutomaticIndex: Assertion `!ExprHasProperty(pExpr, EP_FromJoin) || pExpr->iRightJoinTable!=pSrc->iCursor || pLoop->prereq!=0' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://sqlite.org/src/tktview?name=7929c1efb2",
		  "fix" : "https://sqlite.org/src/info/ef604882a275d3d5"
	  }
  },
  {
	  "date" : "22/12/2019",
	  "title" : "Debug assertion sqlite3VdbeExec: Assertion `pIn1!=pIn3' failed",
	  "test" : "CREATE TABLE t0(c0 TEXT, CHECK(c0 IN (c0)));\nINSERT INTO t0 VALUES(0);\nUPDATE t0 SET c0 = 0; -- sqlite3.c:86323: sqlite3VdbeExec: Assertion `pIn1!=pIn3' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=188f912b51",
		  "fix" : "https://sqlite.org/src/info/9ab985a9c8160b90"
	  }
  },
  {
	  "date" : "23/12/2019",
	  "title" : "Debug assertion sqlite3VdbeExec: Assertion `flags3==pIn3->flags' failed (2)",
	  "test" : "CREATE TABLE t0(c0 INT, CHECK(CASE c0 WHEN c0 THEN 0 END));\nINSERT INTO t0 VALUES('0'); -- sqlite3.c:86300: sqlite3VdbeExec: Assertion `flags3==pIn3->flags' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=9d708e4742",
		  "fix" : "https://www.sqlite.org/src/info/2c44c73499154bc5"
	  }
  },
  {
	  "date" : "23/12/2019",
	  "title" : "Debug assertion sqlite3MemCompare: Assertion `pMem1->enc==pMem2->enc || pMem1->db->mallocFailed' failed",
	  "test" : "PRAGMA encoding = 'UTF16';\nCREATE VIRTUAL TABLE t0 USING fts5(c0);\nINSERT INTO t0(c0) VALUES (x'00');\nSELECT * FROM t0 WHERE CAST(SUBSTR(c0, 0) AS TEXT) > 0; -- sqlite3.c:81076: sqlite3MemCompare: Assertion `pMem1->enc==pMem2->enc || pMem1->db->mallocFailed' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Important",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=0911b5d161",
		  "fix" : "https://www.sqlite.org/src/info/f347744e0d576f02"
	  }
  },
  {
	  "date" : "23/12/2019",
	  "title" : "Debug assertion sqlite3VdbeMemAboutToChange: Assertion `(mFlags&MEM_Str)==0 || (pMem->n==pX->n && pMem->z==pX->z)' failed (2)",
	  "test" : "PRAGMA encoding = 'UTF16';\nCREATE TABLE t0(c0 TEXT);\nCREATE INDEX i0 ON t0(0 LIKE COALESCE(c0, 0));\nINSERT INTO t0(c0) VALUES (0), (0); -- sqlite3.c:75871: sqlite3VdbeMemAboutToChange: Assertion `(mFlags&MEM_Str)==0 || (pMem->n==pX->n && pMem->z==pX->z)' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=c62c5e5852",
		  "fix" : "https://www.sqlite.org/src/info/36fdeb4f0a66970a"
	  }
  },
  {
	  "date" : "23/12/2019",
	  "title" : "Debug assertion sqlite3VdbeExec: Assertion `pC!=0' failed",
	  "test" : "CREATE TABLE t0(c0 UNIQUE);\nSELECT * FROM t0 WHERE (t0.c0, 1) IN(SELECT NTILE(1) OVER(), 0 FROM t0); -- sqlite3.c:90197: sqlite3VdbeExec: Assertion `pC!=0' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Critical",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=3ab4a9f02c",
		  "fix" : "https://www.sqlite.org/src/info/0b1dbd60"
	  }
  },
  {
	  "date" : "23/12/2019",
	  "title" : "Debug assertion impliesNotNullRow: Assertion `pWalker->eCode==0' failed",
	  "test" : "CREATE TABLE t0(c0);\nCREATE TABLE t1(c0);\nSELECT * FROM t0 LEFT JOIN t1 WHERE (t1.c0 BETWEEN 0 AND 0) > ('' AND t0.c0); -- sqlite3.c:103271: impliesNotNullRow: Assertion `pWalker->eCode==0' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Critical",
	  "links" : {
		  "bugreport" : "https://sqlite.org/src/tktview?name=dfd66334cf",
		  "fix" : "https://sqlite.org/src/info/2f17974912ec5e99"
	  }
  },
  {
	  "date" : "23/12/2019",
	  "title" : "Debug assertion rtreeRelease: Assertion `pRtree->nNodeRef==0 || pRtree->bCorrupt' failed",
	  "test" : "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);\nCREATE TABLE t0(c0);\nINSERT INTO t0 VALUES (0), (1);\nINSERT INTO rt0(c0) VALUES (0), (1);\nCREATE VIEW v0 AS SELECT 0 LIMIT 0;\nSELECT * FROM t0 LEFT JOIN rt0 INNER JOIN v0; -- sqlite3.c:185720: rtreeRelease: Assertion `pRtree->nNodeRef==0 || pRtree->bCorrupt' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Important",
	  "links" : {
		  "fix" : "https://sqlite.org/src/info/4c50afafce841636",
		  "bugreport" : "https://sqlite.org/src/tktview?name=5eadca17c4"
	  }
  },
  {
	  "date" : "23/12/2019",
	  "title" : "FTS database disk image is malformed for special characters in table",
	  "test" : "CREATE VIRTUAL TABLE vt1 USING fts5(c1, c2, prefix = 1, tokenize = \"porter ascii\");\nINSERT INTO vt1 VALUES (x'e4', '+䔬+');\nINSERT INTO vt1(vt1) VALUES('integrity-check'); -- database disk image is malformed",
	  "oracle" : "error",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://sqlite.org/src/tktview?name=d62981b76d",
		  "fix" : "https://www.sqlite.org/src/info/a11b393dc2c882cf"
	  }
  },
  {
	  "date" : "23/12/2019",
	  "title" : "Debug assertion sqlite3VdbeExec: Assertion `pIn1!=pIn3' failed (2)",
	  "test" : "CREATE TABLE t0(c0 TEXT, CHECK(c0 BETWEEN 0 AND +c0));\nINSERT INTO t0 VALUES (0);\nUPDATE t0 SET c0 = 0; -- sqlite3.c:86402: sqlite3VdbeExec: Assertion `pIn1!=pIn3' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Important",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=b383b90278",
		  "fix" : "https://sqlite.org/src/info/401c9d30e06191d9"
	  }
  },
  {
	  "date" : "23/12/2019",
	  "title" : "UPDATE with complex WHERE condition on rtree results in \"database table is locked\" error",
	  "test" : "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);\nINSERT INTO rt0(c0) VALUES (0), (1), (2);\nUPDATE rt0 SET c0 = 0 WHERE(SELECT ROW_NUMBER() OVER() FROM rt0); -- database table is locked",
	  "oracle" : "error",
	  "dbms" : "sqlite",

	  "status" : "fixed (in documentation)",
	  "severity" : "Critical",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=cafeafe605"
	  },
	  "comment" : "This was not considered a bug. However, to clarify, a section \"Reading And Writing At The Same Time\" was added to the rtree documentation."
  },
  {
	  "date" : "24/12/2019",
	  "title" : "Debug assertion sqlite3Fts5HashScanNext: Assertion `!sqlite3Fts5HashScanEof(p)' failed",
	  "test" : "CREATE VIRTUAL TABLE vt0 USING fts5(c0, prefix = 71, tokenize = \"porter ascii\", prefix = 9);\nBEGIN;\nINSERT INTO vt0(c0) VALUES (x'e9');\nINSERT INTO vt0(vt0) VALUES('integrity-check'); -- sqlite3.c:213028: sqlite3Fts5HashScanNext: Assertion `!sqlite3Fts5HashScanEof(p)' failed",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Critical",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=df46a6f38e",
		  "fix" : "https://www.sqlite.org/src/info/1c0a05b09a97e6e2"
	  }
  },
  {
	  "date" : "24/12/2019",
	  "title" : "FTS database disk image is malformed for UTF-16 encoding and integrity check",
	  "test" : "PRAGMA encoding = 'UTF-16';\nCREATE VIRTUAL TABLE vt0 USING fts5(c0, c1);\nINSERT INTO vt0(vt0, rank) VALUES('pgsz', '37');\nINSERT INTO vt0(c0, c1) VALUES (0.66077, 1957391816);\nINSERT INTO vt0(vt0) VALUES('integrity-check'); -- unexpected: database disk image is malformed",
	  "oracle" : "error",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://sqlite.org/src/tktview?name=752fdbf6e7",
		  "fix" : "https://sqlite.org/src/info/bae060f382e4386c"
	  }
  },
  {
	  "date" : "25/12/2019",
	  "title" : "Debug assertion fts5CheckTransactionState: Assertion `iSavepoint<=p->ts.iSavepoint' failed",
	  "test" : "CREATE VIRTUAL TABLE vt0 USING fts5(c0);\nCREATE VIRTUAL TABLE vt1 USING fts4(c0);\nINSERT INTO vt1(c0) VALUES(0);\nBEGIN;\nUPDATE vt1 SET c0 = 0;\nINSERT INTO vt1(c0) VALUES (0), (0);\nUPDATE vt0 SET c0 = 0;\nINSERT INTO vt1(c0) VALUES (0);\nUPDATE vt1 SET c0 = 0;\nINSERT INTO vt1(vt1) VALUES('automerge=1');\nUPDATE vt1 SET c0 = 0;\nDROP TABLE vt1; -- sqlite3.c:219981: fts5CheckTransactionState: Assertion `iSavepoint<=p->ts.iSavepoint' failed",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=167b2aac34",
		  "fix" : "https://www.sqlite.org/src/info/a5d7f5d24a239f72"
	  }
  },
  {
	  "date" : "25/12/2019",
	  "title" : "Debug assertion sqlite3TableColumnAffinity: Assertion `iCol<pTab->nCol' failed.",
	  "test" : "CREATE VIRTUAL TABLE t0 USING rtree(c0, c1, c2);\nSELECT * FROM t0 WHERE ((0, 0) IN (SELECT COUNT(*), LAG(5) OVER(PARTITION BY 0) FROM t0), 0) <= (t0.c1, 0); -- sqlite3.c:98053: sqlite3TableColumnAffinity: Assertion `iCol<pTab->nCol' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Important",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=d87336c81c",
		  "fix" : "https://www.sqlite.org/src/info/fa58aad48a788802"
	  }
  },
  {
	  "date" : "26/12/2019",
	  "title" : "Debug assertion sqlite3BtreeInsert: Assertion `pCur->curFlags & BTCF_ValidNKey' failed",
	  "test" : "CREATE TABLE t0(c0 UNIQUE AS(0), c1, c2);\nINSERT INTO t0(c1) VALUES(0);\nUPDATE t0 SET c1 = 0, c2 = 0 WHERE(c0) >= 0; -- sqlite3.c:72305: sqlite3BtreeInsert: Assertion `pCur->curFlags & BTCF_ValidNKey' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=ec8abb025e",
		  "fix" : "https://www.sqlite.org/src/info/e54560495926fbb8"
	  }
  },
  {
	  "date" : "26/12/2019",
	  "title" : "Debug assertion sqlite3FinishCoding: Assertion `!pParse->isMultiWrite || sqlite3VdbeAssertMayAbort(v, pParse->mayAbort)' failed",
	  "test" : "CREATE TABLE t0(c0 PRIMARY KEY, c1, c2 UNIQUE) WITHOUT ROWID;\nINSERT OR FAIL INTO t0(c2) VALUES (0), (NULL) ON CONFLICT(c2) DO UPDATE SET c1 = c0 -- sqlite3.c:108474: sqlite3FinishCoding: Assertion `!pParse->isMultiWrite || sqlite3VdbeAssertMayAbort(v, pParse->mayAbort)' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=7c13db5c3b",
		  "fix" : "https://www.sqlite.org/src/info/f14ce948662f3445"
	  }
  },
  {
	  "date" : "27/12/2019",
	  "title" : "Debug assertion assert_pager_state: Assertion `pPager->changeCountDone==0 || pPager->eLock>=RESERVED_LOCK' failed",
	  "test" : "PRAGMA locking_mode = EXCLUSIVE;\nPRAGMA journal_mode = WAL;\nPRAGMA locking_mode = NORMAL;\nPRAGMA integrity_check;\nPRAGMA journal_mode = MEMORY; -- sqlite3.c:51926: assert_pager_state: Assertion `pPager->changeCountDone==0 || pPager->eLock>=RESERVED_LOCK' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Important",
	  "links" : {
		  "bugreport" : "https://sqlite.org/src/tktview?name=fb3b3024ea",
		  "fix" : "https://sqlite.org/src/info/846b1de6e5a9e418"
	  }
  },
  {
	  "date" : "27/12/2019",
	  "title" : "FTS4 integrity-check results in \"database disk image is malformed\" for UTF-16 encoding",
	  "test" : "PRAGMA encoding = 'UTF-16';\nCREATE VIRTUAL TABLE vt0 USING fts4(c0);\nINSERT INTO vt0 VALUES ('﻿');\nINSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed",
	  "oracle" : "error",
	  "dbms" : "sqlite",

	  "status" : "fixed (in documentation)",
	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=1dc432db3b",
		  "documentation" : "https://www.sqlite.org/fts3.html#_utf_16_byte_order_mark_problem_"
	  }
  },
  {
	  "date" : "28/12/2019",
	  "title" : "Debug assertion sqlite3VdbeExec: Assertion `memIsValid(&aMem[pOp->p1])' failed.",
	  "test" : "CREATE TABLE t0(c0 NOT NULL DEFAULT '', c1 AS(c0) NOT NULL);\nREPLACE INTO t0(c0) VALUES(NULL); -- sqlite3.c:85112: sqlite3VdbeExec: Assertion `memIsValid(&aMem[pOp->p1])' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=37823501c6",
		  "fix" : "https://www.sqlite.org/src/info/4cc12c18860bc480"
	  }
  },
  {
	  "date" : "28/12/2019",
	  "title" : "Debug assertion exprSrcCount: Assertion `0' failed",
	  "test" : "CREATE TABLE t0(c0);\nSELECT (0, 0) IN(SELECT MIN(c0), NTILE(0) OVER()) FROM t0; -- sqlite3.c:103486: exprSrcCount: Assertion `0' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://sqlite.org/src/tktview?name=36ffedcb9a",
		  "fix" : "https://sqlite.org/src/info/597896ed0ae9e296"
	  }
  },
  {
	  "date" : "28/12/2019",
	  "title" : "Debug assertion sqlite3VdbeExec: Assertion `memIsValid(pRec)' failed",
	  "test" : "CREATE TABLE t0(c0 NOT NULL DEFAULT 1, c1 AS(c0) UNIQUE);\nREPLACE INTO t0 VALUES(NULL); -- sqlite3.c:87334: sqlite3VdbeExec: Assertion `memIsValid(pRec)' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://sqlite.org/src/tktview?name=5fbc159eeb",
		  "fix" : "https://sqlite.org/src/info/4cc12c18860bc480"
	  },
	  "comment" : "According to the SQLite developers, this bug report revealed a subtle problem n the new (unreleased) generated columns feature."
  },
  {
	  "date" : "28/12/2019",
	  "title" : "Debug assertion sqlite3VdbeMemAboutToChange: Assertion `(mFlags&MEM_Real)==0 || pMem->u.r==pX->u.r' failed",
	  "test" : "PRAGMA foreign_keys = true;\nCREATE TABLE t0(c0 INT AS(2) UNIQUE, c1 TEXT UNIQUE, FOREIGN KEY(c0) REFERENCES t0(c1));\nINSERT INTO t0(c1) VALUES(0.16334143182538696), (0); -- sqlite3.c:75926: sqlite3VdbeMemAboutToChange: Assertion `(mFlags&MEM_Real)==0 || pMem->u.r==pX->u.r' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://sqlite.org/src/tktview?name=de4b04149b",
		  "fix" : "https://sqlite.org/src/info/6afadd3b3a40b0ef"
	  }
  },
  {
	  "date" : "29/12/2019",
	  "title" : "Trigger on normal table causes the database disk image to become malformed",
	  "test" : "PRAGMA recursive_triggers = true;\nCREATE TABLE t0(c0 UNIQUE ON CONFLICT REPLACE, c1, c2);\nCREATE INDEX i0 ON t0(c2\nINSERT INTO t0(c0) VALUES (0);\nCREATE TRIGGER tr0 DELETE ON t0 BEGIN\nUPDATE t0 SET c2 = c0;\nEND;\nINSERT INTO t0(c0, c2) VALUES(4, 0), (9, 0);\nUPDATE t0 SET c0 = 0;\nSELECT * FROM t0 WHERE x'' > t0.c2 GROUP BY c1; -- database disk image is malformed",
	  "oracle" : "error",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Important",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=314cc133e5",
		  "fix"  : "https://www.sqlite.org/src/info/db4b7e1dc399c1f1"
	  }
  },
  {
	  "date" : "30/12/2019",
	  "title" : "NATURAL JOIN on virtual table results in \"parse error in rank function\"",
	  "test" : "CREATE VIRTUAL TABLE vt0 USING fts5(c0, c1);\nCREATE VIRTUAL TABLE vt1 USING fts5(c0);\nINSERT INTO vt1(c0) VALUES ('');\nSELECT * FROM vt1 NATURAL JOIN vt0 WHERE vt0.c1 MATCH 'a'; -- parse error in rank function:",
	  "oracle" : "error",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Critical",
	  "links" : {
		  "bugreport" : "https://www3.sqlite.org/src/tktview?name=7c0e06b162",
		  "fix" : "https://www3.sqlite.org/src/info/ab09ef427181130b"
	  }
  },
  {
	  "date" : "30/12/2019",
	  "title" : "Debug assertion codeVectorCompare: Assertion `0' failed",
	  "test" : "CREATE TABLE t0(c0 CHECK(((0, 0) > (0, c0))));\nINSERT INTO t0(c0) VALUES(0) ON CONFLICT(c0) DO UPDATE SET c0 = 3; -- sqlite3.c:98717: codeVectorCompare: Assertion `0' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=892575cdba",
		  "fix" : "https://www.sqlite.org/src/info/f481636f1a0333c6"
	  },
	  "comment" : "Since we reported this bug 18 minutes after it was introduced, Richard Hipp sent a post titled '18 minutes 41 seconds' to the SQLite mailing list (see https://www.sqlite.org/src/info/f481636f1a0333c6)"
  },
  {
	  "date" : "30/12/2019",
	  "title" : "Inconsistent handling of subqueries in index expressions",
	  "test" : "CREATE TABLE t0(c0);\nCREATE INDEX i0 ON t0((0 AND (SELECT 1))); -- unexpected: no error\nALTER TABLE t0 RENAME COLUMN c0 TO c1; -- error in index i0: subqueries prohibited in index expressions",
	  "oracle" : "error",
	  "dbms" : "sqlite",

	  "status" : "closed (not a bug)",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=a0e88d8d7a"
	  }
  },
  {
	  "date" : "31/12/2019",
	  "title" : "Debug assertion sqlite3VdbeMemAboutToChange: Assertion `(mFlags&MEM_Real)==0 || pMem->u.r==pX->u.r' failed (2)",
	  "test" : "PRAGMA foreign_keys = true;\nCREATE TABLE t0(c0 TEXT PRIMARY KEY, c1 INT UNIQUE REFERENCES t0 CHECK(CAST(c1 AS INT) BETWEEN 0 AND CASE WHEN 1 THEN c0 END));\nREPLACE INTO t0(c0, c1) VALUES(0.7675826647230917, 0), (0, x''); -- sqlite3.c:75952: sqlite3VdbeMemAboutToChange: Assertion `(mFlags&MEM_Real)==0 || pMem->u.r==pX->u.r' failed.",
	  "oracle" : "crash",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=46fcd700b8",
		  "fix" : "https://www.sqlite.org/src/info/eca7ec9cda4606c4"
	  }
  },
  {
	  "date" : "02/01/2020",
	  "title" : "FTS5 integrity-check results in \"database disk image is malformed\" for UTF-16 encoding and SUBSTR",
	  "test" : "PRAGMA encoding = 'UTF16';\nCREATE VIRTUAL TABLE vt0 USING fts5(c0);\nINSERT INTO vt0 VALUES (SUBSTR(x'37', ''));\nINSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed",
	  "oracle" : "error",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=771fe61761",
		  "fix" : "https://www.sqlite.org/src/info/e782096aa06fcf41"
	  }
  },
  {
	  "date" : "04/01/2020",
	  "title" : "DBSTAT query computes incorrect result for aggregate column",
	  "test" : "CREATE VIRTUAL TABLE stat USING dbstat;\nSELECT * FROM stat WHERE stat.aggregate == NULL; -- unexpected: row is fetched",
	  "oracle" : "metamorphic",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=727074e2ae",
		  "fix" : "https://www.sqlite.org/src/info/74ef6f2b6d9f50ff"
	  }
  },
  {
	  "date" : "04/01/2020",
	  "title" : "DBSTAT query computes incorrect result for name column",
	  "test" : "CREATE VIRTUAL TABLE stat USING dbstat;\nSELECT * FROM stat WHERE stat.name = NULL; -- unexpected: row is fetched",
	  "oracle" : "metamorphic",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "severity" : "Minor",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=74a4c3860c",
		  "fix" : "https://www.sqlite.org/src/info/cfff5cb2279088aa"
	  }
  },
  {
	  "date" : "04/01/2020",
	  "title" : "DBSTAT query computes incorrect result for stat.aggregate = 1 condition",
	  "test" : "CREATE VIRTUAL TABLE stat USING dbstat;\nSELECT * FROM stat WHERE stat.aggregate = 1; -- unexpected: fetches one record",
	  "oracle" : "metamorphic",
	  "dbms" : "sqlite",

	  "status" : "closed (not a bug)",
	  "links" : {
	       "bugreport" : "https://www.sqlite.org/src/tktview?name=a3713a5fca"
	  }
  },
  {
	  "date" : "08/01/2020",
	  "title" : "Incorrect result for query with 0 >= t0.c0 AND t0.c0 = v0.c0 condition",
	  "test" : "CREATE TABLE t0(c0);\nINSERT INTO t0 VALUES('0');\nCREATE VIEW v0(c0) AS SELECT CAST(0 AS INT) FROM t0;\nSELECT * FROM t0, v0 WHERE 0 >= t0.c0 AND t0.c0 = v0.c0; -- unexpected: fetches row",
	  "oracle" : "metamorphic",
	  "dbms" : "sqlite",

	  "severity" : "Important",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=82ac75ba00",
		  "fix" : "https://www.sqlite.org/src/info/6db1c3498f6bfa01"
	  }
  },
  {
	  "date" : "08/01/2020",
	  "title" : "Incorrect result for COUNT(), UTF16be encoding and SUBSTR",
	  "test" : "PRAGMA encoding = 'UTF16be';\nCREATE TABLE t0(c0, c1);\nINSERT INTO t0(c0) VALUES (x'00');\nCREATE INDEX i0 ON t0(c0 COLLATE BINARY);\nINSERT INTO t0(c0) VALUES (1);\nSELECT COUNT(*) FROM t0 WHERE SUBSTR(t0.c0, ','); -- expected: 1, actual: 2",
	  "oracle" : "metamorphic",
	  "dbms" : "sqlite",

	  "severity" : "Minor",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=9eda2697f5",
		  "fix" : "https://www.sqlite.org/src/info/1c76f1d8ec0937a2"
	  }
  },
  {
	  "date" : "18/01/2020",
	  "title" : "Incorrect result for LIKE query",
	  "test" : "CREATE TABLE t0(c0 STRING UNIQUE);\nINSERT INTO t0 (c0) VALUES ('\\a');\nSELECT * FROM t0 WHERE c0 LIKE '\\a'; -- unexpected: row is fetched",
	  "oracle" : "metamorphic",
	  "dbms" : "cockroachdb",

	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44123"
	  }
  },
  {
	  "date" : "19/01/2020",
	  "title" : "Generated column causes query to omit a record in the result set",
	  "test" : "CREATE TABLE t0(c0 BOOL UNIQUE, c1 INT AS (NULL) STORED);\nINSERT INTO t0 (c0) VALUES (true);\nSELECT * FROM t0 WHERE c0; -- expected: row is fetched, actual: row is not fetched",
	  "oracle" : "metamorphic",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44132",
		  "fix" : "https://github.com/cockroachdb/cockroach/issues/44132"
	  }
  },
  {
	  "date" : "19/01/2020",
	  "title" : "Crash when using VECTORIZE=experimental_on",
	  "test" : "SET SESSION VECTORIZE=experimental_on;\nCREATE TABLE t0(c0 STRING);\nCREATE TABLE t1(c0 STRING UNIQUE NOT NULL);\nSELECT * FROM t0, t1 WHERE t0.c0 NOT BETWEEN t1.c0 AND '' AND (t1.c0 IS NULL); -- crash",
	  "oracle" : "crash",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44133",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/44144"
	  }
  },
  {
	  "date" : "20/01/2020",
	  "title" : "Internal error in expression that uses a CAST and COLLATE",
	  "test" : "CREATE TABLE t0(c0 INT);\nSELECT * FROM t0 WHERE 1 > -(('1a' COLLATE en)::INT); -- internal error",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44137"
	  }
  },
  {
	  "date" : "20/01/2020",
	  "title" : "Unexpected error when using EXPERIMENTAL SCRUB",
	  "test" : "CREATE TABLE t0(c0 STRING UNIQUE, c1 STRING COLLATE en PRIMARY KEY);\nEXPERIMENTAL SCRUB TABLE t0; -- ERROR: scrub-index: unsupported comparison operator: <collatedstring{en}> IS NOT DISTINCT FROM <unknown>",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44142",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/45260"
	  }
  },
  {
	  "date" : "20/01/2020",
	  "title" : "DEFAULT value causes unexpected syntax error when executing INSERT",
	  "test" : "CREATE TABLE t0(c0 BOOL DEFAULT (NULL BETWEEN ('' COLLATE en) AND ''));\nINSERT INTO t0(c0) VALUES(DEFAULT); -- ERROR: at or near \"collate\": syntax error",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44148",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/44775"
	  }
  },
  {
	  "date" : "21/01/2020",
	  "title" : "TO_ENGLISH(-9223372036854775808) results in an internal error",
	  "test" : "SELECT TO_ENGLISH(-9223372036854775808); -- internal error: runtime error: index out of range",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44152",
		  "fix" : "https://github.com/cockroachdb/cockroach/issues/44152"
	  }
  },
  {
	  "date" : "21/01/2020",
	  "title" : "Incorrect result for BETWEEN SYMMETRIC query",
	  "test" : "CREATE TABLE t0(c0 BOOL UNIQUE, c1 BOOL CHECK (true));\nINSERT INTO t0(c0) VALUES (true);\nSELECT * FROM t0 WHERE t0.c0 AND (false NOT BETWEEN SYMMETRIC t0.c0 AND NULL AND true); -- unexpected: row is fetched",
	  "oracle" : "metamorphic",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44154",
		  "fix1" : "https://github.com/cockroachdb/cockroach/pull/44500",
		  "fix2" : "https://github.com/cockroachdb/cockroach/pull/44668"
	  }
  },
  {
	  "date" : "21/01/2020",
	  "title" : "Internal error for BETWEEN operator and CAST to BYTES",
	  "test" : "SELECT '' BETWEEN ''::BYTES AND ''; -- ERROR: internal error: lookup for ComparisonExpr ((@1)[bytes] > ('')[string])[bool]'s CmpOp failed",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44181",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/44216"
	  }
  },
  {
	  "date" : "22/01/2020",
	  "title" : "Query on VIEW with OFFSET NULL and WHERE condition involving CURRENT_USER() unexpectedly fetches a row",
	  "test" : "CREATE TABLE t0(c0 BOOL);\nINSERT INTO t0(c0) VALUES (false);\nCREATE VIEW v0(c0) AS SELECT c0 FROM t0 WHERE t0.c0 OFFSET NULL;\nSELECT * FROM v0 WHERE CURRENT_USER() != ''; -- unexpected: a row is fetched",
	  "oracle" : "metamorphic",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44203",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/44307"
	  }
  },
  {
	  "date" : "22/01/2020",
	  "title" : "Incorrect result for query with IS NULL condition on UNIQUE column and VECTORIZE=experimental_on",
	  "test" : "SET SESSION VECTORIZE=experimental_on;\nCREATE TABLE t1(c0 INT);\nCREATE TABLE t0(c0 INT UNIQUE);\nINSERT INTO t1(c0) VALUES (0);\nINSERT INTO t0(c0) VALUES (NULL), (NULL);\nSELECT * FROM t0, t1 WHERE t0.c0 IS NULL; -- expected: two rows are fetched, actual: one row is fetched",
	  "oracle" : "metamorphic",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44207",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/44219"
	  }
  },
  {
	  "date" : "22/01/2020",
	  "title" : "SHOW EXPERIMENTAL_FINGERPRINTS error for STRING columns and character escapes",
	  "test" : "CREATE TABLE t0(c0 STRING);\nINSERT INTO t0(c0) VALUES ('\\n');\nSHOW EXPERIMENTAL_FINGERPRINTS FROM TABLE t0; -- ERROR: hash-fingerprint: could not parse \"\n\" as type bytes: bytea encoded value ends with incomplete escape sequence",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44237"
	  }
  },
  {
	  "date" : "23/01/2020",
	  "title" : "Internal error setting tracing=true",
	  "test" : "SET SESSION tracing=true; -- ERROR: internal error: expected string for set tracing argument, not *tree.DBool",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44244",
		  "fix" : "https://github.com/cockroachdb/cockroach/commit/6f7239ba84b5988951d6148f8feba6344cd40c9d"
	  }
  },
  {
	  "date" : "23/01/2020",
	  "title" : "Incorrect result for IS NULL query on VIEW using SELECT DISTINCT",
	  "test" : "CREATE TABLE t0(c0 INT UNIQUE);\nCREATE VIEW v0(c0) AS SELECT DISTINCT t0.c0 FROM t0;\nINSERT INTO t0 (c0) VALUES (NULL), (NULL);\nSELECT * FROM v0 WHERE v0.c0 IS NULL; -- expected: {NULL}, actual: {NULL, NULL}",
	  "oracle" : "metamorphic",
	  "dbms" : "cockroachdb",

	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44296",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/44386"
	  },
	  "comment" : "After we reported this bug, the CockroachDB developers added additional random testing to detect similar bugs."
  },
  {
	  "date" : "23/01/2020",
	  "title" : "Internal error for CASE expression and VECTORIZE=experimental_on",
	  "test" : "SET SESSION VECTORIZE=experimental_on;\nCREATE TABLE t0(c0 INT);\nINSERT INTO t0 (c0) VALUES (0);\nSELECT * FROM t0 WHERE CASE WHEN t0.c0 > 0 THEN NULL END; --  internal error: unexpected error from the vectorized runtime: Vec is of unknown type and should not be accessed",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44304",
		  "fix" : "https://github.com/cockroachdb/cockroach/issues/44304"
	  }
  },
  {
	 "date" : "26/01/2020",
	 "title" : "Deadlock in SHOW TABLES",
	 "test" : "--thread 1\nDROP DATABASE IF EXISTS db0;\nCREATE DATABASE db0;\nUSE db0;\nCREATE TABLE t0(c0 INT);\n--thread2\nSHOW TABLES;",
	 "oracle" : "hang",
	 "dbms" : "cockroachdb",

	 "status" : "fixed",
	 "links" : {
		 "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44385",
		 "fix" : "https://github.com/cockroachdb/cockroach/pull/46384"
	 }  
  },
  {
	  "date" : "27/01/2020",
	  "title" : "Internal error \"estimated distinct count must be non-zero\"",
	  "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0(rowid) VALUES (0), (1), (2);\nCREATE VIEW v0(c0) AS SELECT CASE WHEN t0.c0 > 0 THEN 1 ELSE t0.rowid END FROM t0;\nCREATE STATISTICS s0 FROM t0;\nDELETE FROM t0;\nINSERT INTO t0(rowid) VALUES (3);\nINSERT INTO t0(rowid) VALUES (4);\nCREATE STATISTICS s1 ON rowid FROM t0;\nSELECT * FROM v0 WHERE v0.c0 > 0; -- internal error: estimated distinct count must be non-zero",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44418",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/44430"
	  }
  },
  {
	  "date" : "29/01/2020",
	  "title" : "Multi-record UPSERT inserts duplicate values in PRIMARY KEY, resulting in inconsistent results",
	  "test" : "CREATE TABLE t0(c0 INT PRIMARY KEY, c1 BOOL, c2 INT UNIQUE);\nINSERT INTO t0(c0) VALUES (0);\nUPSERT INTO t0(c2, c0) VALUES (0, 0), (1, 0);\nSELECT * FROM t0; -- {0 | NULL | 1}",
	  "oracle" : "metamorphic",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44466",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/45372"
	  }
  },
  {
	  "date" : "30/01/2020",
	  "title" : "Internal error for NATURAL JOIN and VECTORIZE='experimental_on'",
	  "test" : "SET SESSION VECTORIZE='experimental_on';\nCREATE TABLE t0(c0 INT4);\nCREATE TABLE t1(c0 INT8);\nINSERT INTO t0(c0) VALUES(0);\nINSERT INTO t1(c0) VALUES(0);\nSELECT * FROM t0 NATURAL JOIN t1; -- internal error: unexpected error from the vectorized runtime: interface conversion: coldata.column is []int32, not []int64",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44547",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/44796"
	  }
  },
  {
	  "date" : "30/01/2020",
	  "title" : "Server exits on query with LEFT JOIN",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT);\nSELECT * FROM t0 LEFT JOIN t1 ON true LIMIT -1; -- causes server to exit",
	  "oracle" : "crash",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44565",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/44590"
	  }
  },
  {
	  "date" : "01/01/2020",
	  "title" : "Internal error for ILIKE_ESCAPE and special characters",
	  "test" : "SELECT ILIKE_ESCAPE('a', '꧕', '�'); -- internal error: runtime error: index out of range [2] with length 1",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44621",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/44633"
	  }
  },
  {
	  "date" : "01/01/2020",
	  "title" : "Complex ORDER BY clause results in internal error with VECTORIZE=experimental_on",
	  "test" : "SET SESSION VECTORIZE=experimental_on;\nCREATE TABLE t0(c0 STRING, c1 BOOL, c2 INT);\nINSERT INTO t0(c0) VALUES('');\nINSERT INTO t0(rowid, c1, c0) VALUES(0, true, '');\nSELECT * FROM t0 ORDER BY CASE WHEN t0.c1 IS NULL THEN t0.c0 WHEN true THEN t0.c0 END; -- unexpected error from the vectorized runtime: cannot overwrite value on flat Bytes: maxSetIndex=1, setIndex=0, consider using Reset",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44624",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/44660"
	  }
  },
  {
	  "date" : "02/01/2020",
	  "title" : "Internal error for SUBSTRING with negative length and VECTORIZE=experimental_on",
	  "test" : "SET SESSION VECTORIZE=experimental_on;\nCREATE TABLE t0(c0 INT);\nINSERT INTO t0(c0) VALUES(0);\nSELECT * FROM t0 WHERE SUBSTRING('', 0, -1) = ''; -- unexpected error from the vectorized runtime: negative substring length -1 not allowed",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44625"
	  }
  },
  {
	  "date" : "03/01/2020",
	  "title" : "Internal error for arithmetic operators and NULLIF",
	  "test" : "SELECT NULLIF(NULL, 0) + NULLIF(NULL, 0); -- internal error: could not find overload for binary expression plus",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44632",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/44718"
	  }
  },
  {
	  "date" : "04/01/2020",
	  "title" : "Internal error for query with negative LIMIT on view with negative LIMIT",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE VIEW v0(c0) AS SELECT 1 FROM t0 LIMIT -1;\nSELECT DISTINCT t0.c0 FROM t0, v0 LIMIT -1; -- internal error: runtime error: invalid memory address or nil pointer dereference",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44683",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/45009"
	  }
  },
  {
	  "date" : "04/01/2020",
	  "title" : "Internal error for case expression involving NULLIF and VECTORIZE=experimental_on",
	  "test" : "SET SESSION VECTORIZE=experimental_on;\nCREATE TABLE t0(c0 INT);\nINSERT INTO t0(c0) VALUES (0);\nSELECT * FROM t0 WHERE 0 > (CASE WHEN NULLIF(NULL, ILIKE_ESCAPE('', CURRENT_USER(), '')) THEN 0 ELSE t0.c0 END);",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44726",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/44756"
	  }
  },
  {
	  "date" : "05/01/2020",
	  "title" : "FULL JOIN with an SUBSTRING ON clause results in an internal error",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c1 INT);\nSELECT * FROM t0 FULL JOIN t1 ON (SUBSTRING('', ')') = '') = (t1.c1 > 0); -- cannot map variable 3 to an indexed var",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44746",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/44788"
	  }
  },
  {
	  "date" : "05/02/2020",
	  "title" : "Unexpected error for aggregate functions",
	  "test" : "CREATE TABLE t0(c0 INT);\nSELECT MIN(1), MAX(NULL AND true) FROM t0; -- ERROR: no builtin aggregate for MAX on [{InternalType:{Family:UnknownFamily Width:0 Precision:0 ArrayDimensions:[] Locale:0x6fcee60 VisibleType:0 ArrayElemType:<nil> TupleContents:[] TupleLabels:[] Oid:705 ArrayContents:<nil> TimePrecisionIsSet:false IntervalDurationField:<nil>}}]",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44757"
	  }
  },
  {
	  "date" : "06/02/2020",
	  "title" : "NOT BETWEEN query on VIEW results in an internal error with VECTORIZE=experimental_on",
	  "test" : "SET SESSION VECTORIZE=experimental_on;\nCREATE TABLE t0(c0 BYTES);\nCREATE VIEW v0(c0) AS SELECT MIN(t0.c0) FROM t0;\nSELECT * FROM v0 WHERE v0.c0 NOT BETWEEN v0.c0 AND v0.c0; -- ERROR: internal error: unexpected error from the vectorized runtime: runtime error: index out of range [2047] with length 1024",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44822",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/44829"
	  }
  },
  {
	  "date" : "07/02/2020",
	  "title" : "Internal error for SUBSTRING, INT4 cast, and VECTORIZE=experimental_on",
	  "test" : "SET SESSION VECTORIZE=experimental_on;\nCREATE TABLE t0(c0 BOOL);\nINSERT INTO t0(c0) VALUES(true);\nSELECT * FROM t0 WHERE SUBSTRING('', 0, t0.c0::INT4) > ''; -- ERROR: internal error: unexpected error from the vectorized runtime: interface conversion: coldata.column is []int32, not []int64",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44881",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/44887"
	  }
  },
  {
	  "date" : "08/02/2020",
	  "title" : "EXPERIMENTAL SCRUB TABLE results in an \"overflow during Encode\" error",
	  "test" : "CREATE TABLE t0(c0 INTERVAL, c1 BOOL CHECK (INTERVAL '9999 y' NOT BETWEEN c0 AND c0));\nCREATE INDEX ON t0(c0);\nEXPERIMENTAL SCRUB TABLE t0; -- ERROR: check-constraint: overflow during Encode",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44891"
	  }
  },
  {
	  "date" : "09/02/2020",
	  "title" : "Internal error when setting VECTORIZE = experimental_on and DEFAULT_INT_SIZE = 4",
	  "test" : "SET VECTORIZE = experimental_on;\nSET DEFAULT_INT_SIZE = 4;\nCREATE TABLE t0(c0 INT);\nINSERT INTO t0 VALUES(0);\nSELECT CAST(0 BETWEEN(CASE NULL WHEN t0.c0 = 0 THEN NULL END) AND 0 IS TRUE AS INT) FROM t0; -- ERROR: internal error: unexpected error from the vectorized runtime: interface conversion: coldata.column is []int64, not []int32",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44904",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/44930"
	  }
  },
  {
	  "date" : "11/02/2020",
	  "title" : "Internal error for NATURAL JOIN on INT and INT4 column for VECTORIZE=experimental_on",
	  "test" : "SET SESSION VECTORIZE=experimental_on;\nCREATE TABLE t0(c0 INT UNIQUE);\nCREATE TABLE t1(c0 INT4 UNIQUE);\nINSERT INTO t0(c0) VALUES(0);\nINSERT INTO t1(c0) VALUES(0);\nSELECT * FROM t0 NATURAL JOIN t1; -- ERROR: internal error: unexpected error from the vectorized runtime: interface conversion: coldata.column is []int64, not []int32",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "closed (duplicate)",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44982",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/44942"
	  }
  },
  {
	  "date" : "12/02/2020",
	  "title" : "EXPERIMENTAL SCRUB TABLE crashes server for table with TIMESTAMP column",
	  "test" : "CREATE TABLE t0(c0 TIMESTAMP UNIQUE);\nINSERT INTO t0(c0) VALUES(TIMESTAMP '1969-1-1');\nINSERT INTO t0(c0) VALUES(TIMESTAMP '1969-1-2');\nEXPERIMENTAL SCRUB TABLE t0; -- crashes server",
	  "oracle" : "crash",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/44992",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/45410"
	  }
  },
  {
	  "date" : "12/02/2020",
	  "title" : "Internal error for VECTORIZE=experimental_on, DEFAULT_INT_SIZE=4, and aggregate query",
	  "test" : "SET VECTORIZE=experimental_on;\nSET DEFAULT_INT_SIZE=4;\nCREATE TABLE t0(c0 INT);\nINSERT INTO t0 VALUES(NULL);\nSELECT SUM(c) FROM (SELECT CAST((IF(IF(false, false, c0 IS NULL), NULL, NULL)) BETWEEN 0 AND 0 IS TRUE AS INT) c FROM t0); -- internal error: unexpected error from the vectorized runtime: interface conversion: coldata.column is []int64, not []int32",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/45038",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/45042"
	  }
  },
  {
	  "date" : "17/02/2020",
	  "title" : "Syntax error for multi-valued comparison and COLLATE",
	  "test" : "CREATE TABLE t0(c0 STRING COLLATE en);\nSELECT * FROM t0 WHERE t0.c0 < SOME ('' COLLATE en, CASE WHEN true THEN NULL END); -- ERROR: at or near \")\": syntax error",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/45142"
	  }
  },
  {
	  "date" : "26/02/2020",
	  "title" : "COUNT_ROWS() malfunctions for GROUP BY",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE VIEW v0(c0) AS SELECT COUNT_ROWS() FROM t0 GROUP BY 0+0;\nSELECT * FROM v0; -- expected: {}, actual: {0}",
	  "oracle" : "pqs",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/45453",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/46879"
	  }
  },
  {
	  "date" : "14/03/2020",
	  "title" : "EXPLAIN (VEC) SELECT results in an internal error \"zero length schema unsupported\"",
	  "test" : "CREATE TABLE t0(c0 STRING);\nCREATE TABLE t1(c0 STRING);\nEXPLAIN (VEC) SELECT t0.c0 FROM t0, t1; -- unexpected error from the vectorized runtime: zero length schema unsupported",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/46122",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/46204"
	  }
  },
  {
	  "date" : "14/03/2020",
	  "title" : "EXPLAIN (VEC) SELECT results in an internal error \"input to aggregatorBase is not an execinfra.OpNode\"",
	  "test" : "CREATE TABLE t0(c0 INT);\nEXPLAIN (VEC) SELECT STDDEV(0) FROM t0 WHERE ('' COLLATE en)::BOOL; -- internal error: unexpected error from the vectorized runtime: ",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/46123",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/46200"
	  }
  },
  {
	  "date" : "16/03/2020",
	  "title" : "Incorrect result for MAX, INTERLEAVE IN PARENT, and vectorize=experimental_on",
	  "test" : "SET vectorize=experimental_on;\nCREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 BOOL) INTERLEAVE IN PARENT t0(rowid);\nINSERT INTO t0(c0) VALUES (0);\nINSERT INTO t1(rowid, c0) VALUES(0, TRUE);\nSELECT MAX(t1.rowid) FROM t1 WHERE t1.c0; -- { NULL }",
	  "oracle" : "qp-aggregate",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/46140",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/46494"
	  }
  },
  {
	  "date" : "17/03/2020",
	  "title" : "Query with negative LIMIT results in an internal error \"node lookup-join with MaxCost added to the memo\"",
	  "test" : "CREATE TABLE t0(c0 INT UNIQUE);\nCREATE TABLE t1(c0 INT);\nCREATE VIEW v0(c0) AS SELECT 0 FROM t1 LIMIT -1;\nSELECT * FROM v0, t0 NATURAL JOIN t1 LIMIT -1; -- internal error: node lookup-join with MaxCost added to the memo",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/46187",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/46440"
	  }
  },
  {
	  "date" : "17/03/2020",
	  "title" : "VALUES table expression malfunctions with MAX",
	  "test" : "SELECT MAX(t0.c0) FROM (VALUES (NULL), (NULL)) t0(c0); -- expected: {NULL}, actual: {NULL, NULL}",
	  "oracle" : "notable",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/46196",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/46649"
	  }
  },
  {
	  "date" : "21/03/2020",
	  "title" : "DROP DATABASE issue with TEMP tables",
	  "test" : "CREATE DATABASE db11;\nUSE db11;\nSET experimental_enable_temp_tables = 'on';\nCREATE TEMP TABLE t0(c0 INT); -- end session\nDROP DATABASE db11 CASCADE; -- cannot access temporary tables of other sessions",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/46393",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/46422"
	  }
  },
  {
	  "date" : "21/03/2020",
	  "title" : "UPSERT causes a decoding error in collated string column",
	  "test" : "CREATE TABLE t0(c0 BOOL, c1 STRING COLLATE en);\nCREATE INDEX ON t0(rowid, c1 DESC);\nINSERT INTO t0(c1, rowid) VALUES('' COLLATE en, 0);\nUPSERT INTO t0(rowid) VALUES (0), (1); -- error decoding 11 bytes: did not find marker 0x12 in buffer 0x13ff00ff00ff00ff00fffe",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/46394",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/46570"
	  },
	  "comment" : "https://github.com/cockroachdb/cockroach/pull/46570#pullrequestreview-381413671"
  },
  {
	  "date" : "21/03/2020",
	  "title" : "INSERT ... DO NOTHING results in an error \"UPSERT or INSERT...ON CONFLICT command cannot affect row a second time\"",
	  "test" : "CREATE TABLE t0(c0 INT UNIQUE DEFAULT 0);\nINSERT INTO t0(rowid) VALUES (0), (1) ON CONFLICT (c0) DO NOTHING; -- UPSERT or INSERT...ON CONFLICT command cannot affect row a second time",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/46395",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/46408"
	  }
  },
  {
	  "date" : "21/03/2020",
	  "title" : "UPSERT on table with FOREIGN KEY constraint results in an internal error \"cannot convert int to type bool\"",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 BOOL, c1 SERIAL2 CHECK (FALSE), FOREIGN KEY (c1) REFERENCES t0(rowid));\nUPSERT INTO t1(c0) VALUES (false); -- internal error: cannot convert int to type bool",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/46397",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/46409"
	  }
  },
  {
	  "date" : "21/03/2020",
	  "title" : "SCRUB fails for table that has a FOREIGN KEY constraint on a rowid column",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT UNIQUE, FOREIGN KEY (c0) REFERENCES t0(rowid));\nEXPERIMENTAL SCRUB table t1; -- scrub-fk: column \"t.rowid\" does not exist",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/46401"
	  }
  },
  {
	  "date" : "21/03/2020",
	  "title" : "NATURAL JOIN fails with \"duplicate column name\" on view",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE VIEW v0(c0, c1) AS SELECT DISTINCT c0, c0 FROM t0;\nSELECT * FROM v0 NATURAL JOIN t0; -- duplicate column name: \"c1\"",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/46403",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/47099"
	  }
  },
  {
	  "date" : "21/03/2020",
	  "title" : "EXPLAIN (VEC) results in an internal error \"input to aggregatorBase is not an execinfra.OpNode\"",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT);\nEXPLAIN (VEC) SELECT STDDEV((t1.c0 > ANY (0, 0))::INT) FROM t0, t1 GROUP BY t0.rowid; -- unexpected error from the vectorized runtime: input to aggregatorBase is not an execinfra.OpNode",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/46404",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/46439"
	  }
  },
  {
	  "date" : "22/03/2020",
	  "title" : "HAVING clause incorrectly evaluates to TRUE for VARIANCE(0) IS NOT NULL predicate",
	  "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0(c0) VALUES(0);\nSELECT t0.c0 FROM t0 GROUP BY t0.c0 HAVING NOT (VARIANCE(0) IS NULL); -- expected: {}, actual: {0}",
	  "oracle" : "qp-having",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/46412",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/46436"
	  }
  },
  {
	  "date" : "10/03/2020",
	  "title" : "GROUP BY causes unexpected conversion",
	  "test" : "CREATE TABLE t0(c0 REAL, c1 REAL GENERATED ALWAYS AS (c0));\nINSERT INTO t0(c0) VALUES (1);\nSELECT * FROM t0 GROUP BY c0; -- expected: 1.0|1.0, actual: 1.0|1\nSELECT * FROM t0; -- 1.0|1.0",
	  "oracle" : "qp-aggregate",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=e0c2ad1aa8",
		  "fix" : "https://www.sqlite.org/src/info/101f7dea75a203f1"
	  }
  },
  {
	  "date" : "04/03/2020",
	  "title" : "MAX yields unexpected result for UTF-16",
	  "test" : "PRAGMA encoding = 'UTF-16';\nCREATE TABLE t0(c0 TEXT);\nINSERT INTO t0(c0) VALUES ('윆'), (1);\nSELECT MAX(CASE 1 WHEN 1 THEN t0.c0 END) FROM t0; -- 윆\nSELECT MAX(t0.c0) FROM t0; -- 1",
	  "oracle" : "qp-aggregate",
	  "dbms" : "sqlite",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=1b8d726456",
		  "fix" : "https://www.sqlite.org/src/info/4a5851893c3d71cc"
	  }
  },
  {
	  "date" : "05/03/2020",
	  "title" : "Unexpected result for MIN on string that contains a null character",
	  "test" : "SELECT HEX(MIN(a)) FROM (SELECT CHAR(0, 1) COLLATE NOCASE as a UNION SELECT CHAR(0, 0) as a); -- 0000\nSELECT HEX(MIN(a)) FROM (SELECT CHAR(0, 0) COLLATE NOCASE as a UNION SELECT CHAR(0, 1) as a); -- 0001",
	  "oracle" : "qp-aggregate",
	  "dbms" : "sqlite",

	  "status" : "fixed (in documentation)",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=fa146dcfe6",
		  "fix" : "https://www.sqlite.org/docsrc/info/e751b0c91a80dd31"
	  }
  },
  {
	  "date" : "24/03/2020",
	  "title" : "Query with HAVING clause, DISTSQL=off, and vectorize=on results in an internal error",
	  "test" : "SET SESSION DISTSQL=off;\nSET vectorize=on;\nCREATE TABLE t0(c0 INT);\nINSERT INTO t0(c0) VALUES(0);\nSELECT * FROM t0 GROUP BY t0.c0 HAVING MAX(CASE WHEN NULL THEN t0.c0::SMALLINT ELSE 0 END)::BOOL IS NULL; -- internal error: unexpected error from the vectorized runtime: interface conversion: coldata.column is []int64, not []int16",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/46503"
	  }
  },
  {
	  "date" : "26/03/2020",
	  "title" : "Double negation causes incorrect result",
	  "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0(c0) VALUES (2);\nSELECT t0.c0 FROM t0 WHERE (NOT NOT t0.c0) = t0.c0; -- expected: {}, actual: {2}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15725",
		  "fix" : "https://github.com/pingcap/tidb/pull/16108"
	  }
  },
  {
	  "date" : "26/03/2020",
	  "title" : "Incorrect result for an UNION query and a generated column",
	  "test" : "CREATE TABLE t0(c0 INT, c1 TEXT AS (0.9));\nINSERT INTO t0(c0) VALUES (0);\nSELECT 0 FROM t0 WHERE false UNION SELECT 0 FROM t0 WHERE NOT t0.c1; -- expected: {0}, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15733"
	  }
  },
  {
	  "date" : "26/03/2020",
	  "title" : "Incorrect result for query that uses an AND operator on floats",
	  "test" : "CREATE TABLE t0(c0 BOOL);\nINSERT INTO t0 VALUES (0);\nSELECT * FROM t0 WHERE 1 AND 0.4; -- expected: {0}, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",

	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15743"
	  }
  },
  {
	  "date" : "26/03/2020",
	  "title" : "ANALYZE TABLE causes SIGSEGV on latest trunk",
	  "test" : "CREATE TABLE t0(c0 INT UNIQUE, c2 INT UNIQUE);\nREPLACE INTO t0(c0, c2) VALUES (0, 0), (0, 0), (0, 1);\nANALYZE TABLE t0; -- SIGSEGV",
	  "oracle" : "crash",
	  "dbms" : "tidb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15746",
		  "fix" : "https://github.com/pingcap/tidb/pull/15765"
	  }
  },
  {
	  "date" : "26/03/2020",
	  "title" : "ANALYZE TABLE results in \"analyze worker panic\" with tidb_enable_fast_analyze=1",
	  "test" : "set @@tidb_enable_fast_analyze=1;\nCREATE TABLE t0(c0 INT, c1 INT, PRIMARY KEY(c0, c1));\nINSERT INTO t0 VALUES (0, 0);\nANALYZE TABLE t0; -- analyze worker panic",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "fixed",

	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15751",
		  "fix" : "https://github.com/pingcap/tidb/pull/15845"
	  }
  },
  {
	  "date" : "26/03/2020",
	  "title" : "ANALYZE TABLE results in \"invalid encoded key\" with tidb_enable_fast_analyze=1",
	  "test" : "set @@tidb_enable_fast_analyze=1;\nCREATE TABLE t0(c0 INT);\nINSERT INTO t0 VALUES (0);\nCREATE INDEX i0 ON t0(c0);\nANALYZE TABLE t0 INDEX i0; -- invalid encoded key",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "fixed",

	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15752",
		  "fix" : "https://github.com/pingcap/tidb/pull/15889"
	  } 
  },
  {
	  "date" : "27/03/2020",
	  "title" : "COLLATE causes an incorrect result in the presence of an index",
	  "test" : "CREATE TABLE t0(c0 INT, c1 CHAR);\nCREATE INDEX i0 ON t0(c1, c0);\nINSERT INTO t0(c1) VALUES (0);\nSELECT t0.c0 FROM t0 WHERE t0.c1 = CHAR(1 COLLATE 'latin1_bin'); -- expected: {}, actual: {NULL}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15789",
		  "fix" : "https://github.com/pingcap/tidb/issues/15789"
	  }
  },
  {
	  "date" : "27/03/2020",
	  "title" : "Unexpected \"Data truncation: %s value is out of range in '%s'\" error in UNION query",
	  "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0(c0) VALUES (0);\nSELECT * FROM t0 WHERE -10000000000000000000 | t0.c0 UNION SELECT * FROM t0; -- unexpected: %s value is out of range in '%s'",
	  "oracle" : "error",
	  "dbms" : "tidb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15790",
		  "fix" : "https://github.com/pingcap/tidb/pull/16073"
	  }
  },
  {
	  "date" : "29/03/2020",
	  "title" : "Internal error for vectorize=on and multiplication of INT4 values",
	  "test" : "SET vectorize=on;\nCREATE TABLE t0(c0 INT4);\nCREATE TABLE t1(c0 INT4);\nINSERT INTO t0(c0) VALUES(0);\nINSERT INTO t1(c0) VALUES (0);\nSELECT 1 FROM t0, t1 GROUP BY t0.c0 * t1.c0; -- unexpected error from the vectorized runtime: interface conversion: coldata.column is []int32, not []int64",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/46714",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/46712"
	  }
  },
  {
	 "date" : "29/03/2020",
	 "title" : "GROUP BY clause nondeterministically results in an incorrect result or error",
	 "test" : "CREATE TABLE t0(c0 INT, c1 INT);\nCREATE TABLE t1(c0 INT, c1 INT);\nCREATE TABLE t2(c0 INT, c1 INT );\nINSERT INTO t1(c0) VALUES (8, 58), (19, 79);\nINSERT INTO t1 VALUES (22, 19), (91, 69);\nINSERT INTO t0 VALUES (29, 5), (11, NULL);\nINSERT INTO t1 VALUES (NULL, 60), (0, 49), (23, NULL);\nINSERT INTO t1(c1, c0) VALUES (58, 33), (11, 82);\nINSERT INTO t1 VALUES (18, 65), (33, 10), (31, 13), (98, 30);\nINSERT INTO t1(c0, c1) VALUES (NULL, 8), (17, 99), (70, 63), (22, 28);\nINSERT INTO t2(c0, c1) VALUES (90, NULL), (88, 89), (11, 26);\nINSERT INTO t0 VALUES (75, 68);\nINSERT INTO t0(c0, c1) VALUES (54, 19);\nINSERT INTO t1 VALUES (14, 53);\nINSERT INTO t1 VALUES (72, NULL);\nINSERT INTO t0 VALUES (29, 94), (48, 3);\nINSERT INTO t0(c0, c1) VALUES (29, 9), (66, 39);\nINSERT INTO t2 VALUES (92, 75);\nINSERT INTO t2(c1) VALUES (23), (67);\nINSERT INTO t1 VALUES (69, NULL), (NULL, 78);\nINSERT INTO t0(c0) VALUES (71), (59);\nINSERT INTO t2 VALUES (97, 8), (92, 45);\nINSERT INTO t1 VALUES (37, 57), (46, 89);\nINSERT INTO t1(c1) VALUES (51);\nINSERT INTO t0 VALUES (24, 70), (14, 87);\nINSERT INTO t2 VALUES (33, NULL), (77, 68);\nINSERT INTO t1 VALUES (48, 44);\nINSERT INTO t2(c0, c1) VALUES (56, 51), (80, NULL), (NULL, 27);\nINSERT INTO t0(c0) VALUES (88), (90), (58);\nINSERT INTO t2 VALUES (43, 16);\nANALYZE TABLE t1, t2;\nSELECT t1.c0 LIKE t1.c0 FROM t1, t2, t0 GROUP BY t1.c0 LIKE t1.c0; -- non-deterministic result or \"runtime error: index out of range [1] with length 1\"",
	 "oracle" : "qp-groupby",
	 "dbms" : "tidb",

	 "status" : "fixed",
	 "links" : {
		 "bugreport" : "https://github.com/pingcap/tidb/issues/15810",
		 "fix" : "https://github.com/pingcap/tidb/pull/16600"
	 }  
  },
  {
	  "date" : "29/03/2020",
	  "title" : "A predicate column1 = -column2 incorrectly evaluates to false for 0 values",
	  "test" : "CREATE TABLE t0(c0 FLOAT);\nCREATE TABLE t1(c0 FLOAT);\nINSERT INTO t1(c0) VALUES (0);\nINSERT INTO t0(c0) VALUES (0);\nSELECT t1.c0 FROM t1, t0 WHERE t0.c0=-t1.c0; -- expected: {0}, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15812",
		  "fix" : "https://github.com/pingcap/tidb/pull/15837"
	  }
  },
  {
	  "date" : "29/03/2020",
	  "title" : "Join on tables with redundant indexes causes a server panic",
	  "test" : "CREATE TABLE t0(c0 INT PRIMARY KEY);\nCREATE TABLE t1(c0 INT PRIMARY KEY);\nCREATE INDEX i0 ON t1(c0);\nCREATE INDEX i0 ON t0(c0);\nSELECT * FROM t0, t1 WHERE t1.c0=t0.c0;",
	  "oracle" : "crash",
	  "dbms" : "tidb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15813",
		  "fix" : "https://github.com/pingcap/tidb/pull/15840"
	  }
  },
  {
	  "date" : "30/03/2020",
	  "title" : "NATURAL RIGHT JOIN results in an unexpected \"Unknown column\" error",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT);\nSELECT t0.c0 FROM t0 NATURAL RIGHT JOIN t1 WHERE t1.c0; -- Unknown column 't0.c0' in 'field list'",
	  "oracle" : "error",
	  "dbms" : "tidb",

	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15844"
	  }
  },
  {
	  "date" : "30/03/2020",
	  "title" : "Incorrect result for LEFT JOIN and NULL values",
	  "test" : "CREATE TABLE t0(t0 INT UNIQUE);\nCREATE TABLE t1(c0 FLOAT);\nINSERT INTO t1(c0) VALUES (0);\nINSERT INTO t0(t0) VALUES (NULL), (NULL);\nSELECT t1.c0 FROM t1 LEFT JOIN t0 ON 1; -- expected: {0, 0}, actual: {0}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15846",
		  "fix" : "https://github.com/pingcap/tidb/pull/15894"
	  }
  },
  {
	  "date" : "30/03/2020",
	  "title" : "Query results in \"baseBuiltinFunc.vecEvalString() should never be called\" error",
	  "test" : "CREATE VIEW v0(c0) AS SELECT NULL;\nSELECT * FROM v0 WHERE (NOT (IF(v0.c0, NULL, NULL))); -- baseBuiltinFunc.vecEvalString() should never be called, please contact the TiDB team for help",
	  "oracle" : "error",
	  "dbms" : "tidb",

	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15847"
	  }
  },
  {
	  "date" : "30/03/2020",
	  "title" : "Query with a NATURAL LEFT JOIN unexpectedly results in an error",
	  "test" : "CREATE TABLE t0(c0 TEXT);\nCREATE VIEW v0(c0) AS SELECT NULL;\nSELECT * FROM v0 NATURAL LEFT JOIN t0; -- unsupport column type for encode 6",
	  "oracle" : "error",
	  "dbms" : "tidb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15850",
		  "fix" : "https://github.com/pingcap/tidb/pull/15984"
	  }
  },
  {
	  "date" : "30/03/2020",
	  "title" : "Query with RIGHT JOIN causes a server panic",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE VIEW v0(c0) AS SELECT 0 FROM t0 ORDER BY -t0.c0;\nSELECT * FROM v0 RIGHT JOIN t0 ON false; -- connection running loop panic",
	  "oracle" : "crash",
	  "dbms" : "tidb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15858",
		  "fix" : "https://github.com/pingcap/tidb/pull/15947"
	  }
  },
  {
	  "date" : "31/03/2020",
	  "title" : "Incorrect result for query that uses an AND operator on floats",
	  "test" : "CREATE TABLE t0(c0 BOOL);\nINSERT INTO t0 VALUES (0);\nSELECT * FROM t0 WHERE 1 AND 0.4; -- expected: {0}, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "mysql",

	  "status" : "closed (not a bug)",
	  "version" : "5.5 and 5.6",
	  "links" : {
		  "bugreport" : "https://bugs.mysql.com/bug.php?id=99120"
	  }
  },
  {
	  "date" : "31/03/2020",
	  "title" : "A predicate that compares 0 with -0 yields an incorrect result",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 DOUBLE);\nINSERT INTO t0 VALUES(0);\nINSERT INTO t1 VALUES('-0');\nSELECT * FROM t0, t1 WHERE t0.c0 = t1.c0; -- expected: {0, -0}, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "mysql",

	  "status" : "fixed",
	  "version" : "8.0.19",
	  "fixed_version" : "8.0.21",
	  "links" : {
		  "bugreport" : "https://bugs.mysql.com/bug.php?id=99122"
	  }
  },
  {
	  "date" : "31/03/2020",
	  "title" : "Incorrect result when comparing an UNSIGNED INT with a floating-point number",
	  "test" : "CREATE TABLE t0(c0 INT UNSIGNED);\nINSERT INTO t0(c0) VALUES(0);\nSELECT * FROM t0 WHERE 0.9 > t0.c0; -- expected: {0}, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "mysql",

	  "status" : "verified",
	  "version" : "8.0.19",
	  "links" : {
		  "bugreport" : "https://bugs.mysql.com/bug.php?id=99127"
	  }
  },
  {
	  "date" : "31/03/2020",
	  "title" : "BETWEEN malfunctions when comparing a string containing a newline",
	  "test" : "CREATE TABLE t0(c0 INT, c1 INT UNIQUE);\nINSERT INTO t0(c1) VALUES(1);\nSELECT * FROM t0 WHERE t0.c1 BETWEEN 0 AND (\"\\n2\"); -- expected: {NULL, 1}, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "mysql",

	  "status" : "verified",
	  "version" : "8.0.19",
	  "links" : {
		  "bugreport" : "https://bugs.mysql.com/bug.php?id=99130"
	  }
  },
  {
	  "date" : "31/03/2020",
	  "title" : "BETWEEN malfunctions when comparing large numbers",
	  "test" : "CREATE TABLE t0(c0 INT UNIQUE);\nINSERT INTO t0(c0) VALUES(0);\nSELECT * FROM t0 WHERE t0.c0 BETWEEN 18446744073561222871 AND 0; -- expected: {0}, actual: {}?",
	  "oracle" : "qp-where",
	  "dbms" : "mysql",

	  "status" : "verified",
	  "version" : "8.0.19",
	  "links" : {
		  "bugreport" : "https://bugs.mysql.com/bug.php?id=99135"
	  }
  },
  {
	  "date" : "01/04/2020",
	  "title" : "Incorrect result for a predicate that uses the CHAR() function",
	  "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0(c0) VALUES (0);\nSELECT t0.c0 FROM t0 WHERE CHAR(204355900); -- expected: {0}, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15986",
		  "fix" : "https://github.com/pingcap/tidb/pull/16014"
	  }
  },
  {
	  "date" : "01/04/2020",
	  "title" : "OR clause on FLOAT/DOUBLE column unexpectedly evaluates to TRUE",
	  "test" : "CREATE TABLE t0(c0 FLOAT);\nINSERT INTO t0(c0) VALUES (NULL);\nSELECT * FROM t0 WHERE NOT(0 OR t0.c0); -- expected: {}, actual: {NULL}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",

	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15987"
	  }
  },
  {
	  "date" : "01/04/2020",
	  "title" : "LIKE operator malfunctions for COLLATE 'latin1_bin'",
	  "test" : "CREATE TABLE t0(c0 INT, c1 TEXT(10), PRIMARY KEY(c0));\nCREATE INDEX i0 ON t0(c1(10));\nINSERT INTO t0(c0, c1) VALUES (0, NULL);\nSELECT * FROM t0 WHERE t0.c1 LIKE '@%' COLLATE 'latin1_bin'; -- expected: {}, actual: {0, NULL}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15988",
		  "fix" : "https://github.com/pingcap/tidb/pull/16380"
	  }
  },
  {
	  "date" : "01/04/2020",
	  "title" : "Using a column both in a string comparison and as a boolean yields an incorrect result",
	  "test" : "CREATE TABLE t0(c0 TEXT(10));\nINSERT INTO t0(c0) VALUES (1);\nCREATE INDEX i0 ON t0(c0(10));\nSELECT * FROM t0 WHERE ('a' != t0.c0) AND t0.c0; -- expected: {1}, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15990",
		  "fix" : "https://github.com/pingcap/tidb/pull/16135"
	  }
  },
  {
	  "date" : "01/04/2020",
	  "title" : "A USE_INDEX_MERGE hint causes a server panic",
	  "test" : "CREATE TABLE t0(c0 INT, c1 INT, PRIMARY KEY(c1));\nCREATE INDEX i0 ON t0(c0);\nSELECT /*+ USE_INDEX_MERGE(t0, PRIMARY) */ * FROM t0 WHERE 1 OR t0.c1;",
	  "oracle" : "error",
	  "dbms" : "tidb",

	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15991",
		  "fix" : "https://github.com/pingcap/tidb/issues/15991"
	  }
  },
  {
	  "date" : "01/04/2020",
	  "title" : "USE_INDEX_MERGE on table with generated column causes a server crash",
	  "test" : "CREATE TABLE t0(c0 INT, c1 INT AS (c0));\nCREATE INDEX i0 ON t0(c1);\nSELECT /*+ USE_INDEX_MERGE(t0, c0_2) */ t0.c0 FROM t0 UNION ALL SELECT 0 FROM t0;",
	  "oracle" : "crash",
	  "dbms" : "tidb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15992",
		  "fix" : "https://github.com/pingcap/tidb/pull/16376"
	  }
  },
  {
	  "date" : "01/04/2020",
	  "title" : "fast ANALYZE TABLE on INDEX PRIMARY causes an error \"analyze worker panic\"",
	  "test" : "set @@tidb_enable_fast_analyze=1;\nCREATE TABLE t0(c0 INT PRIMARY KEY);\nANALYZE TABLE t0 INDEX PRIMARY; -- analyze worker panic",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15993",
		  "fix" : "https://github.com/pingcap/tidb/issues/15993"
	  }
  },
  {
	  "date" : "01/04/2020",
	  "title" : "USE_INDEX_MERGE results in an incorrect result for a generated column",
	  "test" : "CREATE TABLE t0(c0 INT AS (1), c1 INT PRIMARY KEY);\nINSERT INTO t0(c1) VALUES (0);\nCREATE INDEX i0 ON t0(c0);\nSELECT /*+ USE_INDEX_MERGE(t0, i0, PRIMARY)*/ t0.c0 FROM t0 WHERE t0.c1 OR t0.c0;\nSELECT t0.c0 FROM t0 WHERE t0.c1 OR t0.c0; -- expected: {1}, actual: {NULL}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/15994",
		  "fix" : "https://github.com/pingcap/tidb/pull/16002"
	  }
  },
  {
	  "date" : "01/04/2020",
	  "title" : "Incorrect result when comparing a floating-point number with an integer",
	  "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0(c0) VALUES (0);\nSELECT * FROM t0 WHERE 0.9 > t0.c0; -- expected: {0}, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "mysql",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://bugs.mysql.com/bug.php?id=99145"
	  }
  },
  {
	  "date" : "01/04/2020",
	  "title" : "Comparison on FLOAT column and large value malfunctions",
	  "test" : "CREATE TABLE t0(c0 FLOAT UNIQUE);\nINSERT INTO t0(c0) VALUES (0);\nSELECT * FROM t0 WHERE t0.c0 BETWEEN 0 AND '1e500'; -- expected: {0}, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "mysql",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://bugs.mysql.com/bug.php?id=99146"
	  }
  },
  {
	  "date" : "01/04/2020",
	  "title" : "BETWEEN query malfunctions for special character and TEXT index",
	  "test" : "CREATE TABLE t0(c0 TEXT);\nINSERT INTO t0(c0) VALUES(0);\nCREATE INDEX i0 ON t0(c0(1));\nSELECT * FROM t0 WHERE t0.c0 NOT BETWEEN '֣a' AND NULL; -- expected: {0}, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "mysql",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://bugs.mysql.com/bug.php?id=99149"
	  }
  },
  {
	  "date" : "01/04/2020",
	  "title" : "The IN operator malfunctions for floating-poing numbers",
	  "test" : "CREATE TABLE t0(c0 FLOAT UNIQUE);\nINSERT INTO t0(c0) VALUES (296088496), (0), (2080822651);\nSELECT * FROM t0 WHERE t0.c0 NOT IN (622120376, -1.421821436E9, 296088496); -- expected: {0, 296089000, 2080820000}, actual: {0, 296089000}",
	  "oracle" : "qp-where",
	  "dbms" : "mysql",
	  "status" : "closed (not a bug)",
	  "links" : {
		  "bugreport" : "https://bugs.mysql.com/bug.php?id=99150"
	  }
  },
  {
	  "date" : "02/04/2020",
	  "title" : "Internal error: lookup for ComparisonExpr ((@2)[float] != ('NaN')[string])[bool]'s CmpOp failed",
	  "test" : "CREATE TABLE t0(c0 INT);\nSELECT * FROM t0 GROUP BY t0.c0 HAVING MIN((CASE WHEN false THEN NULL END):::FLOAT) IS NOT NAN; -- internal error: lookup for ComparisonExpr ((@2)[float] != ('NaN')[string])[bool]'s CmpOp failed",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/46914",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/50815"
	  }
  },
  {
	  "date" : "02/04/2020",
	  "title" : "Unexpected syntax error for expression involving ARRAY[NULL]",
	  "test" : "CREATE TABLE t0(c0 INT);\nSELECT COUNT(CASE WHEN false THEN ARRAY[NULL] END) FROM t0; -- at or near \"unknown\": syntax error",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/46915"
	  }
  },
  {
	  "date" : "02/04/2020",
	  "title" : "INL_MERGE_JOIN hint results in an error \"Internal : Can't find a proper physical plan for this query\"",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT);\nSELECT /*+ INL_MERGE_JOIN(t1) */ * FROM t0 NATURAL JOIN t1 WHERE t0.c0 IS NULL;",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/16017"
	  }
  },
  {
	  "date" : "02/04/2020",
	  "title" : "SELECT on table with generated column causes a server panic",
	  "test" : "CREATE TABLE t0(c0 CHAR AS (c1) UNIQUE, c1 INT);\nINSERT INTO t0(c1) VALUES (0), (1);\nSELECT * FROM t0; -- connection running loop panic",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/16020",
		  "fix" : "https://github.com/pingcap/tidb/pull/16316"
	  }
  },
  {
	  "date" : "02/04/2020",
	  "title" : "RIGHT JOIN with CONCAT_WS fails to fetch a row",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT);\nINSERT INTO t0(c0) VALUES (NULL);\nSELECT * FROM t1 RIGHT JOIN t0 ON TRUE WHERE CONCAT_WS(t0.c0=t0.c0, 0, NULL) IS NULL; -- expected: {NULL}, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/16023",
		  "fix" : "https://github.com/pingcap/tidb/pull/16444"
	  }
  },
  {
	  "date" : "02/04/2020",
	  "title" : "INSERT IGNORE causes an incorrect result for a query on a DECIMAL column",
	  "test" : "CREATE TABLE t0(c0 NUMERIC PRIMARY KEY);\nINSERT IGNORE INTO t0(c0) VALUES (NULL);\nSELECT * FROM t0 WHERE c0; -- expected: {}, actual: {0}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/16025",
		  "fix" : "https://github.com/pingcap/tidb/pull/16518"
	  }
  },
  {
	  "date" : "02/04/2020",
	  "title" : "LEFT JOIN on a view results in \"runtime error: slice bounds out of range [:264] with capacity 256\"",
	  "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0(c0) VALUES (1), (1), (1), (1), (1), (1);\nCREATE VIEW v0(c0) AS SELECT NULL FROM t0;\nSELECT * FROM t0 LEFT JOIN v0 ON TRUE WHERE v0.c0 IS NULL; -- runtime error: slice bounds out of range [:264] with capacity 256",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/16027"
	  }
  },
  {
	  "date" : "02/04/2020",
	  "title" : "Incorrect result when comparing a FLOAT/DOUBLE UNSIGNED with a negative number",
	  "test" : "CREATE TABLE t0(c0 DOUBLE UNSIGNED UNIQUE);\nINSERT INTO t0(c0) VALUES (0);\nSELECT * FROM t0 WHERE t0.c0 = -1; -- expected: {}, actual: {0}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/16028"
	  }
  },
  {
	  "date" : "02/04/2020",
	  "title" : "REGEXP predicate unexpectedly results in an error \"No valid regexp pattern found\"",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT);\nINSERT INTO t0 VALUES (NULL), (1);\nINSERT INTO t1 VALUES (0);\nSELECT t0.c0 FROM t0 JOIN t1 ON (t0.c0 REGEXP 1) | t1.c0  WHERE BINARY STRCMP(t1.c0, t0.c0); --  No valid regexp pattern found",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/16029",
		  "fix" : "https://github.com/pingcap/tidb/pull/16405"
	  }
  },
  {
	  "date" : "03/04/2020",
	  "title" : "CREATE STATISTICS on table with ARRAY column",
	  "test" : "CREATE TABLE t0(c0 STRING[]);\nINSERT INTO t0(c0) VALUES(ARRAY[]);\nCREATE STATISTICS s0 ON c0 FROM t0; -- ERROR: unable to encode table key: *tree.DArray",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/46964",
		  "fixed" : "https://github.com/cockroachdb/cockroach/pull/47281"
	  }
  },
  {
	  "date" : "03/04/2020",
	  "title" : "CAST to INT2 yields an incorrect/inconsistent result",
	  "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0 VALUES(-1292691042);\nSELECT t0.c0::SMALLINT FROM t0; -- expected: {6558}, actual: {-1292691042}",
	  "oracle" : "qp-aggregate",
	  "dbms" : "cockroachdb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/46970"
	  }
  },
  {
	  "date" : "03/04/2020",
	  "title" : "Comparison with (-9223372036854775808)::TIMESTAMP results in an unexpected error",
	  "test" : "CREATE TABLE t0(c0 TIMESTAMP UNIQUE);\nSELECT * FROM t0 WHERE (-9223372036854775808)::TIMESTAMP!=t0.c0; -- ERROR: unordered spans (/Table/1208/2/{!NULL-292277026596-12-04T15:30:07.999999001Z} /Table/1208/{2/292277026596-12-04T15:30:08.000001Z-3})",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/46973",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/47077"
	  }
  },
  {
	  "date" : "03/04/2020",
	  "title" : "Query with an invalid regular expression unexpectedly does not fail",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE VIEW v0(c0) AS SELECT COUNT_ROWS() FROM t0;\nSELECT * FROM v0 WHERE '' !~ '+'; -- expected: error parsing regexp: missing argument to repetition operator: `+`, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "cockroachdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/46981",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/47036"
	  }
  },
  {
	  "date" : "04/04/2020",
	  "title" : "Incorrect result for query on interleaved index when vectorize=on",
	  "test" : "SET vectorize=on;\nCREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT);\nINSERT INTO t0(c0) VALUES(0);\nINSERT INTO t1(c0) VALUES(NULL);\nCREATE INDEX ON t1(c0) INTERLEAVE IN PARENT t0(c0);\nSELECT * FROM t0 WHERE t0.rowid > 0; -- expected: {}, actual: {0}",
	  "oracle" : "qp-aggregate",
	  "dbms" : "cockroachdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/47029",
		  "fix" : "https://github.com/cockroachdb/cockroach/issues/47029"
	  },
	  "comment" : "could also be found by the qp-where oracle"
  },
  {
	  "date" : "04/04/2020",
	  "title" : "TRUNCATE on temporary table results in \"unexpected value: <nil>\"",
	  "test" : "SET experimental_enable_temp_tables = 'on';\nCREATE TEMP TABLE t0(c0 INT);\nTRUNCATE t0; -- ERROR: unexpected value: <nil>",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/47030",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/47482"
	  }
  },
  {
	  "date" : "04/04/2020",
	  "title" : "SCRUB on a temporary table that has a hash-sharded index results in an error",
	  "test" : "SET experimental_enable_temp_tables = 'on';\nCREATE TEMP TABLE t0(c0 INT);\nCREATE INDEX ON t0(c0) USING HASH WITH BUCKET_COUNT=1;\nEXPERIMENTAL SCRUB table t0; -- ERROR: check-constraint: cannot access temporary tables of other sessions",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/47031"
	  }
  },
  {
	  "date" : "04/04/2020",
	  "title" : "BETWEEN computes incorrect result when comparing DECIMAL with a string",
	  "test" : "CREATE TABLE t0(c0 DECIMAL UNIQUE);\nINSERT INTO t0(c0) VALUES(0);\nSELECT * FROM t0 WHERE '' BETWEEN t0.c0 AND t0.c0; -- expected: {0}, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "mysql",
	  "status" : "closed (not a bug)",
	  "links" : {
		  "bugreport" : "https://bugs.mysql.com/bug.php?id=99182"
	  }
  },
  {
	  "date" : "04/04/2020",
	  "title" : "Internal error for an invalid CREATE INDEX statement",
	  "test" : "set experimental_enable_hash_sharded_indexes = 'on';\nCREATE TABLE t0();\nCREATE INDEX ON t0(c0) USING HASH WITH BUCKET_COUNT = 1;",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/47037",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/47090"
	  }
  },
  {
	  "date" : "04/04/2020",
	  "title" : "SELECT statement on table with a hash-sharded index results in an internal error",
	  "test" : "set experimental_enable_hash_sharded_indexes = 'on';\nCREATE TABLE t0(c0 INT);\nCREATE INDEX ON t0(c0) USING HASH WITH BUCKET_COUNT = 1;\nSELECT 1 FROM t0 WHERE 0 < rowid GROUP BY crdb_internal_c0_shard_1, c0 ORDER BY crdb_internal_c0_shard_1; -- ERROR: internal error: no output column equivalent to 1",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/47041",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/47159"
	  }
  },
  {
	"date" : "07/04/2020",
	"title" : "Disconnecting from server results in crash with \"unexpected leftover bytes\"",
	"test" : "",
	"oracle" : "crash",
	"dbms" : "cockroachdb",
	"status" : "verified",
	"links" : {
		"bugreport" : "https://github.com/cockroachdb/cockroach/issues/47114"
	}  
  },
  {
	  "date" : "07/04/2020",
	  "title" : "ORDER BY unexpectedly causes a value to be represented in E notation when VECTORIZE=on",
	  "test" : "SET SESSION VECTORIZE=on;\nCREATE TABLE t0 (c0 DECIMAL PRIMARY KEY, c1 INT UNIQUE);\nINSERT INTO t0(c0) VALUES (1819487610);\nSELECT t0.c0 FROM t0 ORDER by t0.c1; -- expected: {1819487610}, actual: {1.81948761E+9}",
	  "oracle" : "qp-where",
	  "dbms" : "cockroachdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/47115",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/48052"
	  }
  },
  {
	  "date" : "07/04/2020",
	  "title" : "SCRUB on a table with FLOAT PRIMARY KEY and INTERLEAVE IN PARENT index causes server to exit",
	  "test" : "CREATE TABLE t0(c0 FLOAT PRIMARY KEY);\nCREATE INDEX ON t0(c0) INTERLEAVE IN PARENT t0(c0);\nINSERT INTO t0 VALUES(0);\nEXPERIMENTAL SCRUB table t0; -- server exits",
	  "oracle" : "crash",
	  "dbms" : "cockroachdb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/47116"
	  }
  },
  {
	  "date" : "07/04/2020",
	  "title" : "CREATE INDEX results in \"invalid interleave backreference\" and prevents database from being dropped",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT AS (0) STORED);\nINSERT INTO t1(rowid) VALUES (1), (2);\nCREATE UNIQUE INDEX ON t1(c0) INTERLEAVE IN PARENT t0(c0);\nCREATE INDEX ON t0(c0); -- invalid interleave backreference table=t1 index=2: index-id \"2\" does not exist",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/47122"
	  }
  },
  {
	  "date" : "07/04/2020",
	  "title" : "Column that is used both as an INT2 and INT4 results in an internal error",
	  "test" : "SET vectorize=on;\nCREATE TABLE t0(c0 INT2 UNIQUE);\nINSERT INTO t0 VALUES(1);\nSELECT * FROM t0 WHERE (t0.c0 + t0.c0::INT4) = 0; -- unexpected error from the vectorized runtime: interface conversion: coldata.column is []int32, not []int64",
	  "oracle" : "error",
	  "dbms" : "cockroachdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/47131",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/47174"
	  }
  },
  {
	  "date" : "07/04/2020",
	  "title" : "A predicate NOT(NULL OR TRUE) unexpectedly evaluates to TRUE",
	  "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0(c0) VALUES (0);\nSELECT * FROM t0 WHERE NOT(NULL OR TRUE); -- expected: {}, actual: {1}",
	  "oracle" : "qp-where",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/489",
		  "fix1" : "https://github.com/cwida/duckdb/commit/b838c589e26c47c342dd29b890438f5fb9dce4d4",
		  "fix2" : "https://github.com/cwida/duckdb/commit/ef2286faef94a75d1ed02de0e86b804610da281e"
	  }
  },
  {
	  "date" : "07/04/2020",
	  "title" : "A comparison column=column unexpectedly evaluates to TRUE for column=NULL",
	  "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0(c0) VALUES (NULL);\nSELECT * FROM t0 WHERE c0 = c0; -- expected: {}, actual: {NULL}",
	  "oracle" : "qp-where",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/490",
		  "fix" : "https://github.com/cwida/duckdb/commit/f18ef427cfbe75f76abc40a00937dc1bea675012"
	  }
  },
  {
	  "date" : "07/04/2020",
	  "title" : "PRAGMA table_info provides no output",
	  "test" : "CREATE TABLE t0(c0 INT);\nPRAGMA table_info('t0'); -- expected: {0|c0|INTEGER|false|NULL|false}, actual: {}",
	  "oracle" : "manuel",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/491",
		  "fix" : "https://github.com/cwida/duckdb/pull/499/commits/b8a64e13c8c8a0dda3efd276c6f676503bb79052"
	  }
  },
  {
	  "date" : "08/04/2020",
	  "title" : "SIMILAR TO results in an \"Unknown error -1\"",
	  "test" : "SELECT '' SIMILAR TO ''; -- Error: Unknown error -1",
	  "oracle" : "error",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/493",
		  "fix" : "https://github.com/cwida/duckdb/commit/403219728c302ad1eba1cf9e30934b85539a8945"
	  }
  },
  {
	  "date" : "08/04/2020",
	  "title" : "Comparison on UNIQUE NUMERIC column causes a query to omit a row in the result set",
	  "test" : "CREATE TABLE t0(c0 NUMERIC UNIQUE);\nINSERT INTO t0(c0) VALUES (1163404482), (0), (488566);\nSELECT * FROM t0 WHERE 0.1 < c0; -- expected: {}, actual: {1163404482.0, 488566.0}",
	  "oracle" : "qp-where",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/495",
		  "fix" : "https://github.com/cwida/duckdb/commit/7156b358369203ab45fc55eac8605e475c7fdce4"
	  }
  },
  {
	  "date" : "08/04/2020",
	  "title" : "INSERT causes an abort with \"terminate called after throwing an instance of 'duckdb::InvalidTypeException'\"",
	  "test" : "CREATE TABLE t0(c0 BOOLEAN, c1 INT);\nCREATE INDEX i0 ON t0(c1, c0);\nINSERT INTO t0(c1) VALUES (0); -- terminate called after throwing an instance of 'duckdb::InvalidTypeException'",
	  "oracle" : "crash",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/496",
		  "fix" : "https://github.com/cwida/duckdb/commit/f11d74a04e5326bde44058b0724ab33ac33547f8"
	  }
  },
  {
	  "date" : "08/04/2020",
	  "title" : "Comparison of two boolean columns in different tables results in an error \"Not implemented: Unimplemented type for sort\"",
	  "test" : "CREATE TABLE t0(c0 BOOL);\nCREATE TABLE t1(c0 BOOL);\nINSERT INTO t1(c0) VALUES (0);\nINSERT INTO t0(c0) VALUES (0);\nSELECT t0.c0 FROM t0, t1 WHERE t1.c0 < t0.c0; -- Error: Not implemented: Unimplemented type for sort",
	  "oracle" : "error",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/497",
		  "fix" : "https://github.com/cwida/duckdb/commit/a90e05ae7d4995ff094c3f0551c4564006f095f2"
	  }
  },
  {
	  "date" : "09/04/2020",
	  "title" : "SELECT causes JDBC driver to crash",
	  "test" : "CREATE TABLE t0(c0 VARCHAR, c1 DOUBLE);\nCREATE TABLE t1(c0 DOUBLE, PRIMARY KEY(c0));\nINSERT INTO t0(c0) VALUES (0), (0), (0), (0);\nINSERT INTO t0(c0) VALUES (NULL), (NULL);\nINSERT INTO t1(c0) VALUES (0), (1);\n\nSELECT t0.c0 FROM t0, t1; -- A fatal error has been detected by the Java Runtime Environment",
	  "oracle" : "crash",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/500",
		  "fix" : "https://github.com/cwida/duckdb/commit/57c3f002e6017a11964c598b377f849cc7722438"
	  }
  },
  {
	  "date" : "10/04/2020",
	  "title" : "BETWEEN expression with an INTERVAL and DECIMAL cast results in an incorrect result",
	  "test" : "CREATE TABLE t0(c0 DECIMAL UNIQUE);\nINSERT INTO t0(c0) VALUES(0);\nSELECT t0.c0 FROM t0 WHERE t0.c0 BETWEEN t0.c0 AND INTERVAL '-1'::DECIMAL; -- expected: {}, actual: {0}"  ,
	  "oracle" : "qp-where",
	  "dbms" : "cockroachdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cockroachdb/cockroach/issues/47327",
		  "fix" : "https://github.com/cockroachdb/cockroach/pull/47483"
	  }
  },
  {
	  "date" : "10/04/2020",
	  "title" : "RIGHT JOIN with a predicate that compares two integer columns results in an \"Unhandled type\" error",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT);\nSELECT * FROM t0 RIGHT JOIN t1 ON t0.c0!=t1.c0; -- Error: Unhandled type for empty NL join",
	  "oracle" : "error",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/503",
		  "fix" : "https://github.com/cwida/duckdb/commit/1014b562dcd8228e7bdb3f984323034d3f0ae3ca"
	  }
  },
  {
	  "date" : "10/04/2020",
	  "title" : "INSERT results in an error \"Not implemented: Cannot create data from this type\"",
	  "test" : "CREATE TABLE t0(c0 BOOLEAN, c1 INT, PRIMARY KEY(c0, c1));\nINSERT INTO t0(c1, c0) VALUES (0, 0); -- Error: Not implemented: Cannot create data from this type",
	  "oracle" : "error",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/504",
		  "fix" : "https://github.com/cwida/duckdb/commit/3a536f71d9ef1ee9feab8cb0870e425c0cdae9d6"
	  }
  },
  {
	  "date" : "10/04/2020",
	  "title" : "A RIGHT JOIN unexpectedly fetches rows",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c1 BOOLEAN);\nINSERT INTO t0(c0) VALUES (1);\nSELECT * FROM t0 RIGHT JOIN t1 on true; -- expected: {}, actual: {1|false}",
	  "oracle" : "qp-where",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/505",
		  "fix" : "https://github.com/cwida/duckdb/issues/505"
	  }
  },
  {
	  "date" : "10/04/2020",
	  "title" : "Query results in an error \"INTERNAL: Failed to bind column reference \"c0\" [5.0] (bindings: [6.0])\"",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT);\nSELECT * FROM t1 JOIN t0 ON t1.c0 < t1.c0 - t0.c0 WHERE t0.c0 <= t1.c0; -- Error: INTERNAL: Failed to bind column reference \"c0\" [5.0] (bindings: [6.0])",
	  "oracle" : "error",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/506",
		  "fix" : "https://github.com/cwida/duckdb/commit/801101000f874aac259bb8f5af30983a03475fba"
	  }
  },
  {
	  "date" : "10/04/2020",
	  "title" : "Creating an empty table results in a crash",
	  "test" : "CREATE TABLE t0();",
	  "oracle" : "crash",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/507",
		  "fix" : "https://github.com/cwida/duckdb/commit/a56a90108d8e0e012abbbd0b97bfc224555c6a11"
	  }
  },
  {
	  "date" : "10/04/2020",
	  "title" : "LEFT JOIN on column with NULL value results in a segmentation fault",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT);\nINSERT INTO t0(c0) VALUES (0);\nINSERT INTO t1(c0) VALUES (NULL);\nSELECT * FROM t1 LEFT JOIN t0 ON t0.c0=t1.c0; -- Segmentation fault",
	  "oracle" : "crash",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/508",
		  "fix" : "https://github.com/cwida/duckdb/commit/c40e4ca4b08c65213d74f6f4349d46cf5c25f430"
	  }
  },
  {
	  "date" : "10/04/2020",
	  "title" : "SIMILAR TO results in an incorrect result",
	  "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0(c0) VALUES (-10);\nSELECT * FROM t0 WHERE t0.c0 NOT SIMILAR TO 0; -- expected: {-10}, actual: {}",
	  "oracle" : "qp-where",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/510",
		  "fix" : "https://github.com/cwida/duckdb/commit/0ba277225e9748b805dd9bf0270da75ec8db286b"
	  }
  },
  {
	  "date" : "11/04/2020",
	  "title" : "LEFT JOIN with comparison on integer columns results in \"Not implemented: Unimplemented type for nested loop join!\"",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT);\nINSERT INTO t1(c0) VALUES (0);\nINSERT INTO t0(c0) VALUES (0);\nSELECT * FROM t0 LEFT JOIN t1 ON t0.c0 <= t1.c0; -- Not implemented: Unimplemented type for nested loop join!",
	  "oracle" : "error",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/513",
		  "fix" : "https://github.com/cwida/duckdb/commit/215e40cd5cdb7eee68797df4982219c63f04e2a9"
	  }
  },
  {
	  "date" : "11/04/2020",
	  "title" : "Incorrect result after an INSERT violates a UNIQUE constraint",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE UNIQUE INDEX i0 ON t0(c0);\nINSERT INTO t0(c0) VALUES (1);\nINSERT INTO t0(c0) VALUES (1); -- Failed to commit: Constraint: PRIMARY KEY or UNIQUE constraint violated: duplicated key\nSELECT * FROM t0 WHERE t0.c0 = 1; -- expected: {1}, actual: {}",
	  "oracle" : "qp-where",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/514",
		  "fix" : "https://github.com/cwida/duckdb/commit/0d29535fe6aefdf2fbe8a7de0775c253f8038a1a"
	  }
  },
  {
	  "date" : "11/04/2020",
	  "title" : "Query with a negative shift predicate yields an incorrect result",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT8, c1 DOUBLE);\nINSERT INTO t1(c0) VALUES (0);\nINSERT INTO t1(c1, c0) VALUES (1, 1);\nINSERT INTO t0 VALUES (0);\nSELECT * FROM t1 JOIN t0 ON t1.c1 WHERE NOT (t1.c0<<-1); -- expected: {1|1|0}, actual: {}",
	  "oracle" : "qp-where",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/515",
		  "fix" : "https://github.com/cwida/duckdb/commit/7e1234d8f414f1e1de4e15a57939594036d74f37"
	  }
  },
  {
	  "date" : "11/04/2020",
	  "title" : "Query with comparison on boolean column results in \"Invalid type: Invalid Type [BOOL]: Invalid type for index\"",
	  "test" : "CREATE TABLE t0(c0 BOOL UNIQUE);\nINSERT INTO t0(c0) VALUES (0);\nSELECT * FROM t0 WHERE t0.c0 = true; -- Error: Invalid type: Invalid Type [BOOL]: Invalid type for index",
	  "oracle" : "error",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/516",
		  "fix" : "https://github.com/cwida/duckdb/commit/331cce4a0c88ee1b477d5859de7211c455664349"
	  }
  },
  {
	  "date" : "11/04/2020",
	  "title" : "Query with an AND predicate, NOT and comparison yields an incorrect result",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT);\nINSERT INTO t0(c0) VALUES (0);\nINSERT INTO t1(c0) VALUES (0);\nSELECT * FROM t1, t0 WHERE NOT ((t1.c0 AND t0.c0) < 0); -- expected: {0|0}, actual: {}",
	  "oracle" : "qp-where",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/517",
		  "fix" : "https://github.com/cwida/duckdb/commit/d88e21d926e732096081ee8afda03d70310bee2d"
	  }
  },
  {
	  "date" : "11/04/2020",
	  "title" : "Query using the LN() function does not terminate",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT);\nINSERT INTO t0(c0) VALUES (0);\nINSERT INTO t1(c0) VALUES (0), (0), (1), (-1);\nSELECT * FROM t0, t1 WHERE LN(t1.c0) < t0.c0; -- does not terminate",
	  "oracle" : "crash",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/518",
		  "fix" : "https://github.com/cwida/duckdb/commit/230785f2e6dceac410cfd894db214d21e356b127"
	  }
  },
  {
	  "date" : "11/04/2020",
	  "title" : "ROUND() evaluates to -nan",
	  "test" : "SELECT ROUND(0.1, 1000); -- -nan",
	  "oracle" : "qp-where",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/521",
		  "fix" : "https://github.com/cwida/duckdb/commit/e399d40eb76f2fbe97c9e139551171862ab7848d"
	  },
	  "additional_testcase" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c1 INT);\nINSERT INTO t1(c1) VALUES (0);\nINSERT INTO t0(c0) VALUES (0);\nSELECT t1.c1 FROM t0, t1;\nSELECT t1.c1 FROM t0, t1 WHERE ((ROUND(0.1, 1000))=((t1.c1 < t0.c0))) UNION ALL\nSELECT t1.c1 FROM t0, t1 WHERE (NOT ((ROUND(0.1, 1000))=((t1.c1 < t0.c0)))) UNION ALL\nSELECT t1.c1 FROM t0, t1 WHERE ((((ROUND(0.1, 1000))=((t1.c1 < t0.c0)))) IS NULL);\n"
  },
  {
	  "date" : "11/04/2020",
	  "title" : "Casting a large number to REAL and multiplying it with zero results in -nan",
	  "test" : "SELECT 1e100::real*0; -- -nan",
	  "oracle" : "qp-where",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/522",
		  "fix" : "https://github.com/cwida/duckdb/pull/541"
	  },
	  "additional_testcase" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c1 INT);\nINSERT INTO t1(c1) VALUES (0);\nINSERT INTO t0(c0) VALUES (0);\nSELECT t1.c1 FROM t0, t1;\nSELECT t1.c1 FROM t0, t1 WHERE (1e100::real*0=((t1.c1 < t0.c0))) UNION ALL\nSELECT t1.c1 FROM t0, t1 WHERE (NOT (1e100::real*0=((t1.c1 < t0.c0)))) UNION ALL\nSELECT t1.c1 FROM t0, t1 WHERE (((1e100::real*0=((t1.c1 < t0.c0)))) IS NULL);"
  },
  {
	  "date" : "11/04/2020",
	  "title" : "The trigonometric functions can result in -nan",
	  "test" : "SELECT SIN(1e1000); -- -nan",
	  "oracle" : "qp-where",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/523",
		  "fix" : "https://github.com/cwida/duckdb/pull/541"
	  },
	  "additional_testcase" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c1 INT);\nINSERT INTO t1(c1) VALUES (0);\nINSERT INTO t0(c0) VALUES (0);\nSELECT t1.c1 FROM t0, t1;\nSELECT t1.c1 FROM t0, t1 WHERE (SIN(1e1000)=((t1.c1 < t0.c0))) UNION ALL\nSELECT t1.c1 FROM t0, t1 WHERE (NOT (SIN(1e1000)=((t1.c1 < t0.c0)))) UNION ALL\nSELECT t1.c1 FROM t0, t1 WHERE (((SIN(1e1000)=((t1.c1 < t0.c0)))) IS NULL);"
  },
  {
	  "date" : "12/04/2020",
	  "title" : "Incorrect result for a JOIN predicate t1.c0 IN (t0.c0) and WHERE predicate t1.c0<=t0.c0",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 FLOAT);\nINSERT INTO t0(c0) VALUES (1), (0);\nINSERT INTO t1(c0) VALUES (1);\nSELECT t1.c0 FROM t1 JOIN t0 ON t1.c0 IN (t0.c0) WHERE t1.c0<=t0.c0; -- expected: {1.0}, actual: {4.67454452791745e-310}",
	  "oracle" : "qp-where",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/525",
		  "fix" : "https://github.com/cwida/duckdb/commit/0e5a3c47eb28c8b6b9797c0c7f64e8ed5c322cb6"
	  }
  },
  {
	  "date" : "12/04/2020",
	  "title" : "Query that uses the CONCAT() function and OR expression crashes",
	  "test" : "CREATE TABLE t0(c0 REAL);\nCREATE TABLE t1(c0 INT2);\nCREATE TABLE t2(c0 INT);\nINSERT INTO t0 VALUES (-1);\nINSERT INTO t1 VALUES (0);\nINSERT INTO t2 VALUES (0), (0);\nSELECT * FROM t1, t2, t0 WHERE CONCAT(t1.c0) OR t0.c0; -- Segmentation fault",
	  "oracle" : "crash",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/526",
		  "fix" : "https://github.com/cwida/duckdb/commit/a5a88b41f8346a582d6cecb80a12e7287d300bf1"
	  }
  },
  {
	  "date" : "12/04/2020",
	  "title" : "Query with JOIN and WHERE condition unexpectedly fetches a value not present in the table",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT);\nINSERT INTO t0 VALUES (0);\nINSERT INTO t1 VALUES (1), (1);\nSELECT t0.c0 FROM t0 JOIN t1 ON t0.c0=(t1.c0 IS NULL) WHERE t0.c0 NOT IN (t1.c0); -- expected: {0, 0}, actual: {1, 1}",
	  "oracle" : "qp-where",
	  "status" : "closed (duplicate)",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/527"
	  }
  },
  {
	  "date" : "12/04/2020",
	  "title" : "Incorrect result for query that uses REGEXP_MATCHES()",
	  "test" : "CREATE TABLE t0(c0 VARCHAR);\nINSERT INTO t0(c0) VALUES (0.1);\nSELECT * FROM t0 WHERE REGEXP_MATCHES(t0.c0, '1'); -- expected: {0.1}, actual: {}",
	  "oracle" : "qp-where",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/528",
		  "fix" : "https://github.com/cwida/duckdb/commit/1035a091f6feba4cc1c37bea5dda3d3ccfcacd17"
	  }
  },
  {
	  "date" : "12/04/2020",
	  "title" : "SELECT on DATE column with a large negative value results in a \"double free or corruption\"",
	  "test" : "CREATE TABLE t0(c0 DATE);\nINSERT INTO t0 VALUES (-10000000);\nSELECT c0 FROM t0; -- double free or corruption (out)",
	  "oracle" : "crash",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/531",
		  "fix" : "https://github.com/cwida/duckdb/commit/409b26b96fd9daeb9117ec620f9046f6f657b8eb"
	  }
  },
  {
	  "date" : "12/04/2020",
	  "title" : "Overflow when casting from REAL to INT results in \"Invalid TypeId -1\"",
	  "test" : "CREATE TABLE t0(c0 REAL);\nINSERT INTO t0(c0) VALUES (10000000000);\nSELECT t0.c0 ::INT FROM t0; -- Error: Conversion: Invalid TypeId -1",
	  "oracle" : "error",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/533",
		  "fix" : "https://github.com/cwida/duckdb/commit/7905e332b02cd069c238c0ea878afdf4cf8c0419"
	  }
  },
  {
	  "date" : "12/04/2020",
	  "title" : "UPDATE causes subsequent query to segfault",
	  "test" : "CREATE TABLE t0(c0 VARCHAR, c1 DOUBLE UNIQUE);\nINSERT INTO t0(c0) VALUES (NULL);\nUPDATE t0 SET c0=0;\nINSERT INTO t0(c0, c1) VALUES (0, 0);\nSELECT * FROM t0 WHERE 1 > c1; -- Segmentation fault",
	  "oracle" : "crash",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/534",
		  "fix" : "https://github.com/cwida/duckdb/commit/1866e91805ddcc6ac0e0236d44209325334524e4"
	  }
  },
  {
	  "date" : "12/04/2020",
	  "title" : "GROUP BY clause results in non-deterministic result",
	  "test" : "CREATE TABLE t0(c0 NUMERIC);\nINSERT INTO t0(c0) VALUES (-515965088);\nINSERT INTO t0(c0) VALUES (1), (-5.15965088E8);\nCREATE INDEX i0 ON t0(c0);\nSELECT t0.c0 FROM t0 GROUP BY t0.c0, REVERSE(t0.c0); -- non-deterministic result",
	  "oracle" : "qp-having",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/535",
		  "fix" : "https://github.com/cwida/duckdb/commit/03eafe5d77900714f56f0c6e3d6fb3f0204926cf"
	  }
  },
  {
	  "date" : "12/04/2020",
	  "title" : "Nondeterministic clause when using an UNION query and HAVING clause",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 VARCHAR);\nINSERT INTO t1 VALUES (0.9201898334673894), (0);\nINSERT INTO t0 VALUES (0);\nSELECT * FROM t0, t1 GROUP BY t0.c0, t1.c0 HAVING t1.c0!=MAX(t1.c0) UNION ALL SELECT * FROM t0, t1 GROUP BY t0.c0, t1.c0 HAVING NOT t1.c0>MAX(t1.c0); -- nondeterministic",
	  "oracle" : "qp-having",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/536",
		  "fix" : "https://github.com/cwida/duckdb/commit/7548d0244bd24cd5da20ec1fdb8f722b39367016"
	  }
  },
  {
	  "date" : "12/04/2020",
	  "title" : "Fetching from table and view results in a crash",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE VIEW v0 AS SELECT 0, 1 FROM t0 ORDER BY t0.c0;\nSELECT t0.c0 FROM t0, v0; -- Conversion: Invalid TypeId <int>",
	  "oracle" : "crash",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/537",
		  "fix" : "https://github.com/cwida/duckdb/commit/504eb1a3e14c5db4ef46fa8c7dff09702e32d9d4"
	  }
  },
  {
	  "date" : "12/04/2020",
	  "title" : "Incorrect result for predicate with shift on a BIGINT column",
	  "test" : "CREATE TABLE t0(c0 BIGINT);\nINSERT INTO t0(c0) VALUES (-1);\nINSERT INTO t0(c0) VALUES (0);\nSELECT * FROM t0 WHERE t0.c0 AND (t0.c0<<64);-- expected: {}, actual: {-1}",
	  "oracle" : "qp-where",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/538",
		  "fix" : "https://github.com/cwida/duckdb/commit/faf41956b6363882ef217b81e0c0db9fb7f39970"
	  }
  },
  {
	  "date" : "13/04/2020",
	  "title" : "[JDBC] Special character causes the JVM to terminate with \"basic_string::_M_construct null not valid\"",
	  "test" : "CREATE TABLE(c0 VARCHAR);\nINSERT INTO t0 VALUES('?'); -- terminate called after throwing an instance of 'std::logic_error'",
	  "oracle" : "crash",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/539",
		  "fix" : "https://github.com/cwida/duckdb/pull/550/commits/7d5ea9f7eb3b249b57f3e42afca6eeac885ae151"
	  }
  },
  {
	  "date" : "13/04/2020",
	  "title" : "Nested MAX() results in nondeterministic result or double free",
	  "test" : "CREATE TABLE t0(c0 VARCHAR);\nINSERT INTO t0 VALUES ('aaaaaaaaaaaa');\nSELECT MAX(agg0) FROM (SELECT MAX(t0.c0) AS agg0 FROM t0) as s0; -- nondeterministic result or crash",
	  "oracle" : "qp-aggregate",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/540",
		  "fix" : "https://github.com/cwida/duckdb/commit/7945aa5c9e591b715cf16d8ef0dc4c9612f08219"
	  }
  },
  {
	  "date" : "13/04/2020",
	  "title" : "Unexpected result for SUM() upon overflow",
	  "test" : "CREATE TABLE t0(c1 BIGINT);\nINSERT INTO t0(c1) VALUES (2);\nINSERT INTO t0(c1) VALUES (9223372036854775807);\nSELECT SUM(t0.c1) FROM t0; -- expected: {9223372036854776000}, actual: {-9223372036854775807}",
	  "oracle" : "qp-aggregate",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/543",
		  "fix" : "https://github.com/cwida/duckdb/pull/558/commits/fda8813bb208886a310d927f35566a2f74862aeb"
	  }
  },
  {
	  "date" : "13/04/2020",
	  "title" : "SELECT on view with text constant in ORDER BY crashes",
	  "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0(c0) VALUES (0);\nCREATE VIEW v0(c0) AS SELECT 1 FROM t0;\nSELECT * FROM v0 ORDER BY 'a'; --  Assertion `types.size() > 0' failed (original test case crashed)",
	  "oracle" : "crash",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/544",
		  "fix" : "https://github.com/cwida/duckdb/commit/72491b0046cd45cd0702fc60d5f42d4234f82d54"
	  }
  },
  {
	  "date" : "13/04/2020",
	  "title" : "Query with SIMILAR TO results in \"Assertion `strlen(dataptr) == length' failed\"",
	  "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0 VALUES (0);\nSELECT * FROM t0 WHERE t0.c0 SIMILAR TO '.'; -- Assertion `strlen(dataptr) == length' failed",
	  "oracle" : "crash",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		"bugreport" : "https://github.com/cwida/duckdb/issues/547",
		"fix" : "https://github.com/cwida/duckdb/commit/09565d0bf0df4968defedc23dc00dacbd5afbd8e"
	  }
  },
  {
	  "date" : "13/04/2020",
	  "title" : "Nested CASE expression results in Assertion `other.auxiliary->type == VectorBufferType::STRING_BUFFER' failed",
	  "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0 VALUES (NULL), (0), (1);\nSELECT * FROM t0 WHERE CASE WHEN c0 THEN 0 ELSE CASE '0.1' WHEN c0 THEN '' END END; -- Assertion `other.auxiliary->type == VectorBufferType::STRING_BUFFER' failed.",
	  "status" : "fixed",
	  "oracle" : "crash",
	  "dbms" : "duckdb",
	  "links" : {
		"bugreport" : "https://github.com/cwida/duckdb/issues/549",
		"fix" : "https://github.com/cwida/duckdb/pull/558/commits/13c37227d777be60e5653830d12c894944bcd549"
	  }
  },
  {
	  "date" : "14/04/2020",
	  "title" : "RIGHT JOIN results in Assertion `filter->expressions.size() == 1' failed",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT);\nSELECT * FROM t0 RIGHT JOIN t1 ON 0 WHERE t0.c0 OR t1.c0 BETWEEN t0.c0 AND 1; -- Assertion `filter->expressions.size() == 1' failed.",
	  "status" : "fixed",
	  "oracle" : "crash",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/552"
	  }
  },
  {
	  "date" : "15/04/2020",
	  "title" : "RIGHT JOIN with ELT() predicate returns an incorrect result",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT);\nINSERT INTO t0(c0) VALUES (NULL);\nSELECT * FROM t1 RIGHT JOIN t0 ON true WHERE (ELT(1^t0.c0, 0, NULL, 0)) IS NULL; -- expected: {NULL, NULL}, actual: {}",
	  "status" : "verified",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/4"
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "15/04/2020",
	  "title" : "NATURAL LEFT JOIN results in incorrect result for <=> operator",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT);\nINSERT INTO t0 VALUES (0);\nINSERT INTO t1 VALUES (0);\nSELECT * FROM t1 NATURAL LEFT JOIN t0 WHERE NOT(t0.c0<=>t1.c0); -- expected: {}, actual: {0}",
	  "status" : "verified",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/5"
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "15/04/2020",
	  "title" : "Incorrect result when using SPACE() in a predicate",
	  "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0 VALUES (100000);\nSELECT * FROM t0 WHERE NOT SPACE(t0.c0); -- expected: {100000}, actual: {}",
	  "status" : "verified",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/6"
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "15/04/2020",
	  "title" : "Incorrect result when using the empty string as a predicate in a RIGHT JOIN",
	  "test" : "CREATE TABLE t0(c0 CHAR);\nCREATE TABLE t1(c0 CHAR UNIQUE);\nINSERT INTO t1(c0) VALUES ('');\nSELECT t0.c0 FROM t0 RIGHT JOIN t1 ON true WHERE t1.c0; -- expected: {}, actual: {NULL}",
	  "status" : "verified",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/7"
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "15/04/2020",
	  "title" : "Incorrect result when fetching from a view",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE VIEW v0(c0, c1) AS SELECT t0.c0, 1 FROM t0;\nINSERT INTO t0 VALUES (0);\nSELECT v0.c0 FROM v0, t0 WHERE v0.c1; -- expected: {0}, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/8"
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "15/04/2020",
	  "title" : "Server panic for predicate t0.c0=9223372036854775808 when using partitions",
	  "test" : "CREATE TABLE t0(c0 INT) PARTITION BY HASH(c0) PARTITIONS 3;\nSELECT * FROM t0 WHERE t0.c0=9223372036854775808;",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/9"
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "15/04/2020",
	  "title" : "Incorrect result or run-time error after changing column type",
	  "test" : "CREATE TABLE t0(c0 INT, c1 DECIMAL UNIQUE);\nCREATE TABLE t1(c0 INT);\nINSERT INTO t0(c1) VALUES (0), (1);\nINSERT INTO t1(c0) VALUES (0);\nALTER TABLE t0 MODIFY c1 INT;\nSELECT t1.c0 FROM t1, t0 WHERE t0.c1; -- expected: {0}, actual: {0, 0}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/10"
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "15/04/2020",
	  "title" : "NATURAL LEFT JOIN with a NOT predicate results in a server panic",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT);\nSELECT * FROM t1 NATURAL LEFT JOIN t0 WHERE NOT t1.c0;",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/16419",
		  "fix" : "https://github.com/pingcap/tidb/pull/16430"
	  }
  },
  {
	  "date" : "15/04/2020",
	  "title" : "A NOT NULL predicate unexpectedly evaluates to TRUE",
	  "test" : "CREATE TABLE t1(c0 INT);\nINSERT INTO t1(c0) VALUES (NULL);\nSELECT t1.c0 FROM t1 WHERE NOT t1.c0; -- expected: {}, actual: {NULL}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",
	  "status" : "closed (duplicate)",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/16440"
	  }
  },
  {
	  "date" : "15/04/2020",
	  "title" : "Incorrect result for CAST to DATETIME",
	  "test" : "CREATE TABLE t0(c0 DOUBLE);\nINSERT INTO t0(c0) VALUES (0);\nSELECT CAST(t0.c0 AS DATETIME) FROM t0; -- expected: {0000-00-00 00:00:00}, actual: {NULL}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/13"
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "15/04/2020",
	  "title" : "Server panic for NATURAL LEFT JOIN on partitioned table",
	  "test" : "CREATE TABLE t0(c0 NUMERIC PRIMARY KEY);\nCREATE TABLE t1(c0 INT) PARTITION BY HASH(NOT c0) PARTITIONS 2;\nSELECT * FROM t1 NATURAL LEFT JOIN t0; -- ERROR 2013 (HY000): Lost connection to MySQL server during query",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		"bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/14"  
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "15/04/2020",
	  "title" : "Using the DEFAULT() function results in an ambiguous column error",
	  "test" : "CREATE TABLE t0(c0 INT DEFAULT 1);\nSELECT t0.c0, t0.c0 FROM t0 ORDER BY DEFAULT(t0.c0); -- Column 'c0' in field list is ambiguous",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/15"
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "15/04/2020",
	  "title" : "Internal error message when using CASE in partitioned table",
	  "test" : "CREATE TABLE t0(c0 INT) PARTITION BY HASH((CASE WHEN 0 THEN 0 ELSE c0 END )) PARTITIONS 1; -- ERROR 1105 (HY000): UnknownType: *ast.WhenClause",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/16"
	  },
	  "severity" : "P2"
  },
  {
	  "date" : "15/04/2020",
	  "title" : "Inserting into a partitioned table results in an \"Missing session variable when eval builtin\" error",
	  "test" : "CREATE TABLE t0(c0 INT) PARTITION BY HASH((c0<CURRENT_USER())) PARTITIONS 1;\nINSERT INTO t0 VALUES (0); -- Missing session variable when eval builtin",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/18"
	  },
	  "severity" : "P2"
  },
  {
	  "date" : "15/04/2020",
	  "title" : "Incorrect result for LEFT JOIN and CASE operator",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT);\nINSERT INTO t0 VALUES (0);\nINSERT INTO t1 VALUES (0);\nSELECT * FROM t1 LEFT JOIN t0 ON t0.c0 = t1.c0 WHERE (CASE t0.c0 WHEN 0 THEN t1.c0 ELSE 1 END); -- expected: {}, actual: {0|NULL}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/19"
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "15/04/2020",
	  "title" : "Incorrect result for SUM() and negative number",
	  "test" : "CREATE TABLE t0 (c0 INT);\nINSERT INTO t0 VALUES (0);\nSELECT SUM(-1) FROM t0; -- expected: {-1}, actual: {1.8446744073709552e+19}",
	  "oracle" : "qp-aggregate",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/560",
		  "fix" : "https://github.com/cwida/duckdb/commit/db0e6131397d4a09cd2c997fb86a9974b6c356e3"
	  }
  },
  {
	  "date" : "15/04/2020",
	  "title" : "SELECT with CASE expression causes an assertion failure \"Assertion `!entry.first->Equals(&expr)' failed\"",
	  "test" : "CREATE TABLE t0(c0 INT);\nSELECT * FROM t0 GROUP BY -4.40304405E8 ORDER BY (CASE 1 WHEN 0 THEN 0 ELSE -440304405 END); -- Assertion `!entry.first->Equals(&expr)' failed.",
	  "oracle" : "crash",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/562",
		  "fix" : "https://github.com/cwida/duckdb/commit/ae863586dc73d4113ad508a04a8b2aa892038eec"
	  }
  },
  {
	  "date" : "16/04/2020",
	  "title" : "REVERSE() on special character results in \"Assertion `strcmp(dataptr, normalized) == 0' failed.\"",
	  "test" : "SELECT REVERSE('S̈a︍'); --  Assertion `strcmp(dataptr, normalized) == 0' failed.",
	  "oracle" : "crash",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/567",
		  "fix" : "https://github.com/cwida/duckdb/commit/2927f7835bdee40695b8cf946890cca86c42623a"
	  }
  },
  {
	  "date" : "19/04/2020",
	  "title" : "Incorrect result for BETWEEN query that casts column to boolean",
	  "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0 VALUES (-1);\nSELECT t0.c0 FROM t0 WHERE NOT (0 BETWEEN 0 AND t0.c0::BOOL); -- expected: {}, actual: {-1}",
	  "oracle" : "qp-where",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/571",
		  "fix" : "https://github.com/cwida/duckdb/commit/e913dacbdfc00fa6686a5c470e3deeb1a5893ee0"
	  }
  },
  {
	  "date" : "19/04/2020",
	  "title" : "Query using PREFIX() results in an error std::bad_alloc",
	  "test" : "CREATE TABLE t0(c0 VARCHAR);\nSELECT * FROM t0 WHERE PREFIX(t0.c0, ''); -- Error: std::bad_alloc",
	  "oracle" : "error",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/572",
		  "fix" : "https://github.com/cwida/duckdb/pull/573"
	  }
  },
  {
	  "date" : "19/04/2020",
	  "title" : "Unexpected error \"Data Too Long\" when using a WHERE clause in an UPDATE",
	  "test" : "CREATE TABLE t0(c0 DOUBLE);\nINSERT INTO t0 VALUES (1e30);\nUPDATE t0 SET c0=0 WHERE t0.c0 LIKE 0; -- Data Too Long, field len 22, data len 31",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/43"
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "20/04/2020",
	  "title" : "Incorrect result for LEFT JOIN AND NULLIF",
	  "test" : "CREATE TABLE t0(c0 INTEGER);\nCREATE TABLE t1(c0 INTEGER);\nINSERT INTO t1 VALUES (0);\nINSERT INTO t0 VALUES (0);\nSELECT * FROM t1 LEFT JOIN t0 ON t0.c0=t1.c0 WHERE NOT NULLIF(t1.c0, t0.c0); --expected: {}, actual: {0, NULL}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/45"
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "22/04/2020",
	  "title" : "Using an index twice in an index hint results in an incorrect result",
	  "test" : "CREATE TABLE t0(c0 INT, c1 INT);\nCREATE INDEX i0 ON t0(c0, c1);\nINSERT INTO t0 VALUES (0, 0);\nSELECT /*+ USE_INDEX(t0, i0, i0)*/t0.c0 FROM t0 WHERE t0.c1; -- expected: {}, actual: {0}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/47"
	  },
	  "severity" : "P2"
  },
  {
	  "date" : "22/04/2020",
	  "title" : "UNIQUE constraint on DECIMAL/floating-point columns causes incorrect result for NULL in AND",
	  "test" : "CREATE TABLE t0(c0 DOUBLE UNIQUE);\nINSERT INTO t0(c0) VALUES (NULL);\nSELECT t0.c0 FROM t0 WHERE NOT (t0.c0 AND 1); -- expected: {}, actual: {NULL}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/48"
	  },
	  "severity" : "P2"
  },
  {
	  "date" : "22/04/2020",
	  "title" : "UNIQUE constraint on boolean column results in an incorrect result in a comparison",
	  "test" : "CREATE TABLE t0(c1 BOOL UNIQUE);\nINSERT INTO t0(c1) VALUES (-128);\nSELECT t0.c1 FROM t0 WHERE t0.c1=-129; -- expected: {}, actual: {-128}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/49"
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "22/04/2020",
	  "title" : "INL_HASH_JOIN hint causes an incorrect result for a table with a generated column",
	  "test" : "CREATE TABLE t0(c0 INT AS (0) VIRTUAL, c1 INT);\nCREATE TABLE t1(c0 INT);\nINSERT INTO t1(c0) VALUES (0);\nSELECT /*+ INL_HASH_JOIN(t1, t0)*/t1.c0 FROM t1 NATURAL LEFT JOIN t0 WHERE NOT t1.c0; -- expected: {0}, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/50"
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "22/04/2020",
	  "title" : "CREATE TABLE with generated column unexpectedly causes a syntax error",
	  "test" : "CREATE TABLE t0(c0 BINARY AS (CAST(0 AS BINARY))); -- ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your TiDB version for the right syntax to use line 1 column 30 near \"binary)\"",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/52"
	  },
	  "severity" : "P2"
  },
  {
	  "date" : "22/04/2020",
	  "title" : "CREATE TABLE with generated column and escaped backslash causes a syntax error",
	  "test" : "CREATE TABLE t0(c0 TEXT AS ('\\')); -- ERROR 1064 (42000): You have an error in your SQL syntax",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/53"
	  },
	  "severity" : "P2"
  },
  {
	  "date" : "22/04/2020",
	  "title" : "INSERT INTO with ON DUPLICATE clause results in an unexpected \"Miss column\" error",
	  "test" : "CREATE TABLE t0(c0 INT UNIQUE, c1 INT AS (c0) VIRTUAL NOT NULL);\nINSERT INTO t0(c0) VALUES (1);\nINSERT INTO t0(c0) VALUES (1) ON DUPLICATE KEY UPDATE c0=0;",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/54"
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "22/04/2020",
	  "title" : "INSERT INTO with ON DUPLICATE clause results in an unexpected \"key not exist\" error",
	  "test" : "CREATE TABLE t0(c0 INT AS ('a') UNIQUE, c1 INT);\nINSERT IGNORE INTO t0(c1) VALUES (0);\nDELETE FROM t0;\nINSERT IGNORE INTO t0(c1) VALUES (0) ON DUPLICATE KEY UPDATE c1=t0.c0; -- Error: key not exist",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/55"
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "22/04/2020",
	  "title" : "INSERT IGNORE allows NULL value in a NOT NULL generated column",
	  "test" : "CREATE TABLE t0(c0 INTEGER AS (NULL) NOT NULL, c1 INT);\nCREATE INDEX i0 ON t0(c0, c1);\nINSERT IGNORE INTO t0(c1) VALUES (0);\nSELECT * FROM t0 WHERE t0.c0 IS NULL; -- expected: {NULL|0}, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/56"
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "22/04/2020",
	  "title" : "Inf value in FLOAT column causes JDBC driver error",
	  "test" : "CREATE TABLE t0(c0 FLOAT);\nINSERT INTO t0 VALUES (1e100);\nSELECT t0.c0 FROM t0; -- +Inf",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/57"
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "22/04/2020",
	  "title" : "SELECT with ORDER BY results in an \"inconsistent index\" error",
	  "test" : "CREATE TABLE t0(c0 INT, c1 INT AS ('a') UNIQUE);\nINSERT IGNORE INTO t0(c0) VALUES (0);\nDELETE FROM t0;\nSELECT * FROM t0 ORDER BY t0.c1; -- inconsistent index c1 handle count 1 isn't equal to value count 0",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/58"
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "23/04/2020",
	  "title" : "Value in generated column depends on a WHERE clause",
	  "test" : "CREATE TABLE t0(c0 INT AS (c1) UNIQUE, c1 TEXT);\nINSERT INTO t0(c1) VALUES (0.5);\nSELECT t0.c0 FROM t0 WHERE t0.c1 + 0.5; -- expected: {1}, actual: {0} ",
	  "oracle" : "qp-where",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/62"
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "23/04/2020",
	  "title" : "A predicate with COLLATE 'binary' results in a server panic \"invalid memory address or nil pointer dereference\"",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT);\nSELECT * FROM t1 LEFT JOIN t0 ON TRUE WHERE BINARY EXPORT_SET(0, 0, 0 COLLATE 'binary', t0.c0, 0 COLLATE 'binary'); -- server panic",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/pingcap/tidb/issues/16779",
		  "fix" : "https://github.com/pingcap/tidb/pull/16866"
	  }
  },
  {
	  "date" : "23/04/2020",
	  "title" : "Fetching from a view with an escaped backslash results in an unexpected syntax error",
	  "test" : "CREATE VIEW v0(c0) AS SELECT '\\\\';\nSELECT * FROM v0; -- ERROR 1105 (HY000): line 1 column 10",
	  "oracle" : "error",
	  "dbms" : "tidb",
	  "status" : "verified",
	  "links" : {
		  "bugreport" : "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/63"
	  },
	  "severity" : "P1"
  },
  {
	  "date" : "24/04/2020",
	  "title" : "Updated value in column is not visible in a SELECT",
	  "test" : "CREATE TABLE t0(c0 VARCHAR, c1 VARCHAR);\nINSERT INTO t0(c0) VALUES(0), ('');\nUPDATE t0 SET c1 = 1;\nSELECT t0.c1 FROM t0 WHERE '' = t0.c0; -- expected: {1}, actual: {''}",
	  "oracle" : "qp-where",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/579",
		  "fix" : "https://github.com/cwida/duckdb/commit/f77519c6fb26fc1df1f503f182525b7af68c59fb"
	  }
  },
  {
	  "date" : "24/04/2020",
	  "title" : "SUBSTRING with an invalid start position causes a segmentation fault",
	  "test" : "SELECT SUBSTRING(0, 3, 0); -- segmentation fault",
	  "oracle" : "crash",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/580",
		  "fix" : "https://github.com/cwida/duckdb/commit/184f51539e3df106c148f5816dccfb1927e85c5d"
	  }
  },
  {
	  "date" : "24/04/2020",
	  "title" : "DISTINCT malfunctions for BOOLEAN",
	  "test" : "CREATE TABLE t0(c0 BOOLEAN);\nINSERT INTO t0 VALUES (NULL), (false);\nSELECT DISTINCT t0.c0 FROM t0; -- expected: {NULL, false}, actual: {NULL, NULL}",
	  "oracle" : "qp-distinct",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/581",
		  "fix" : "https://github.com/cwida/duckdb/commit/0cb8b09273b37ee9ab0ccfaa677926a0e970c51b"
	  }
  },
  {
	  "date" : "25/04/2020",
	  "title" : "UNION operator malfunctions in LEFT JOIN on view",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE VIEW v0(c0) AS SELECT CAST(t0.c0 AS INTEGER) FROM t0;\nINSERT INTO t0(c0) VALUES (0);\nSELECT * FROM t0 LEFT JOIN v0 ON v0.c0 >= '0' WHERE TRUE UNION SELECT 0,0 WHERE 0; -- expected: {0|0}, actual:{0|NULL}",
	  "oracle" : "qp-distinct",
	  "dbms" : "sqlite",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=45f4bf4eb4",
		  "fix" : "https://www.sqlite.org/src/info/ac31edd3eeafcef4"
	  }
  },
  {
	  "date" : "25/04/2020",
	  "title" : "Comparing a string with a boolean yields an incorrect result after UPDATE",
	  "test" : "CREATE TABLE t0(c0 VARCHAR);\nINSERT INTO t0(c0) VALUES (0);\nUPDATE t0 SET c0=0;\nUPDATE t0 SET c0=true;\nSELECT * FROM t0 WHERE t0.c0 = true; -- expected: {true}, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/583",
		  "fix" : "https://github.com/cwida/duckdb/commit/bc96c1ef70867fc402906739b5133c1674f054cf"
	  }
  },
  {
	  "date" : "25/04/2020",
	  "title" : "A select with BETWEEN and VARCHAR cast results in an incorrect result",
	  "test" : "CREATE TABLE t0(c0 INTEGER);\nINSERT INTO t0(c0) VALUES (-2);\nSELECT t0.c0 FROM t0 WHERE -1 BETWEEN t0.c0::VARCHAR AND 1; -- expected: {-2}, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/584",
		  "fix" : "https://github.com/cwida/duckdb/commit/e8ec15172fab1dd5c0547f4259ed3dc8ce31f8e9"
	  }
  },
  {
	  "date" : "25/04/2020",
	  "title" : "Predicate checking for an empty string yields an incorrect result",
	  "test" : "CREATE TABLE t0(c0 VARCHAR);\nINSERT INTO t0(c0) VALUES (''), (0);\nSELECT * FROM t0 WHERE t0.c0 = ''; -- expected: {''}, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/585",
		  "fix" : "https://github.com/cwida/duckdb/commit/dc352a3729f57252a1f6bfa18077fed9c4598a54"
	  }
  },
  {
	  "date" : "25/04/2020",
	  "title" : "NOACCENT.NOCASE comparison with a special character results in a segmentation fault",
	  "test" : "SELECT '' COLLATE NOACCENT.NOCASE='Ʇ';",
	  "oracle" : "crash",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/586",
		  "fix" : "https://github.com/cwida/duckdb/commit/77f3151ecfa85dfa894f3a23feb2271a4cac1ddc"
	  }
  },
  {
	  "date" : "25/04/2020",
	  "title" : "A negative DATE results in a \"double free or corruption\" crash",
	  "test" : "SELECT DATE '-10000-01-01'; -- double free or corruption",
	  "oracle" : "crash",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/587",
		  "fix" : "https://github.com/cwida/duckdb/commit/a750473a7e4979a5237471268a752e46dee36e24"
	  }
  },
  {
	  "date" : "25/04/2020",
	  "title" : "Query with complex ORDER BY causes an incorrect rowid value",
	  "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0 VALUES (1), (0), (1);\nSELECT t0.rowid FROM t0 WHERE t0.rowid ORDER BY CASE ((t0.c0) ::BOOL) WHEN 1 THEN t0.rowid END; -- expected: {0, 2}, actual: {140671047175328, 2}",
	  "oracle" : "qp-where",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/588",
		  "fix" : "https://github.com/cwida/duckdb/commit/8a7cf974f7372a66e837b9cfa5d5c3929e1f625f"
	  }
  },
  {
	  "date" : "25/04/2020",
	  "title" : "Creating an index on rowid results in an internal error \"Failed to bind column reference\"",
	  "test" : "CREATE TABLE t0(c0 INT);\nCREATE INDEX i0 ON t0(rowid, c0); -- INTERNAL: Failed to bind column reference \"c0\" [0.1] (bindings: [0.0])",
	  "oracle" : "error",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/589",
		  "fix" : "https://github.com/cwida/duckdb/commit/0bfdbf39638c8b623056698850389349ec463ccc"
	  }
  },
  {
	  "date" : "25/04/2020",
	  "title" : "Comparison with a DATE yields an incorrect result",
	  "test" : "CREATE TABLE t0(c0 VARCHAR);\nINSERT INTO t0(c0) VALUES (DATE '2000-01-02');\nSELECT * FROM t0 WHERE DATE '2000-01-01' < t0.c0; -- expected: {2000-01-02}, actual: {}",
	  "oracle" : "qp-where",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/590",
		  "fix" : "https://github.com/cwida/duckdb/issues/590"
	  }
  },
  {
	  "date" : "25/04/2020",
	  "title" : "Subtracting a large integer from a DATE results in a \"double free or corruption\"",
	  "test" : "SELECT - 41756167 + '1969-12-11 032657' ::DATE; -- double free or corruption",
	  "oracle" : "crash",
	  "dbms" : "duckdb",
	  "status" : "closed (duplicate)",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/591"
	  }
  },
  {
	  "date" : "26/04/2020",
	  "title" : "Expression with LIKE and comparison causes an assertion failure",
	  "test" : "CREATE TABLE t0(c0 VARCHAR);\nINSERT INTO t0 VALUES (0);\nSELECT * FROM t0 WHERE c0 LIKE '' AND c0 < true; -- Assertion `tableFilter[0].comparison_type == ExpressionType::COMPARE_GREATERTHAN || tableFilter[0].comparison_type == ExpressionType::COMPARE_GREATERTHANOREQUALTO' failed.",
	  "oracle" : "crash",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/592",
		  "fix" : "https://github.com/cwida/duckdb/commit/96d5ae2e3a4b3aa52eab3878b78c5bdb8f6946b9"
	  }
  },
  {
	  "date" : "27/04/2020",
	  "title" : "STDDEV_POP unexpectedly does not fetch any rows",
	  "test" : "CREATE TABLE t0(c0 DOUBLE);\nINSERT INTO t0(c0) VALUES(1E200), (0);\nSELECT STDDEV_POP(c0) FROM t0; -- unexpected: does not fetch a row",
	  "oracle" : "crash",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/596",
		  "fix" : "https://github.com/cwida/duckdb/commit/2e03516e04ae94c33bff66201cb4290c1dc86662"
	  }
  },
  {
	  "date" : "28/04/2020",
	  "title" : "UPDATE results in crash or assertion failure",
	  "test" : "CREATE TABLE t0(c0 INT, c1 VARCHAR);\nINSERT INTO t0 VALUES (0, 0), (NULL, 0);\nUPDATE t0 SET c1 = c0; -- SEGV on unknown address 0x000000000000",
	  "oracle" : "crash",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/599",
		  "fix" : "https://github.com/cwida/duckdb/commit/29e801a7a8c1d219f5633b35dca5c88ced20abdd"
	  }
  },
  {
	  "date" : "29/04/2020",
	  "title" : "GROUP BY does not take COLLATE into account",
	  "test" : "CREATE TABLE t0(c0 VARCHAR COLLATE NOCASE);\nINSERT INTO t0(c0) VALUES ('a'), ('A');\nSELECT t0.c0 FROM t0 GROUP BY t0.c0; -- expected: {'a'} or {'A'}, actual: {'a', 'A'}",
	  "oracle" : "qp-groupby",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/602",
		  "fix" : "https://github.com/cwida/duckdb/pull/601/commits/ef292aa079f4a1c6b477d9eb052220d0d1f30c46"
	  }
  },
  {
	  "date" : "29/04/2020",
	  "title" : "BETWEEN with COLLATE NOACCENT.NOCASE expression results in a segfault/ASan failure",
	  "test" : "CREATE TABLE t0(c0 DATE, c1 VARCHAR);\nINSERT INTO t0(c0) VALUES (NULL), ('2000-01-01');\nSELECT * FROM t0 WHERE 'a' BETWEEN c0 AND c1 COLLATE NOACCENT.NOCASE; -- segfault",
	  "oracle" : "crash",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/603",
		  "fix" : "https://github.com/cwida/duckdb/commit/67368aa3793590fe503269118c1312b73097be40"
	  }
  },
  {
	  "date" : "01/05/2020",
	  "title" : "Incorrect result for MIN() on expression involving rowid",
	  "test" : "CREATE TABLE t0(c0 INT);\nINSERT INTO t0 VALUES (-1);\nSELECT MIN(CAST(c0 AS BIGINT) << 63) FROM t0; -- expected: {-9223372036854775808}, actual: {NULL}",
	  "oracle" : "qp-aggregate",
	  "dbms" : "duckdb",
	  "status" : "fixed",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/609",
		  "fix" : "https://github.com/cwida/duckdb/commit/7cf32b2983e6b579e4e3ec17cc62673a13eae9ee"
	  }
  },
  {
	  "date" : "01/05/2020",
	  "title" : "Large argument to RPAD results in std::bad_alloc",
	  "test" : "SELECT RPAD('a', 100000000000000000, 0); -- Error: std::bad_alloc",
	  "oracle" : "error",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/610",
		  "fix" : "https://github.com/cwida/duckdb/pull/611/commits/fa0e59bef20c9ed8fd64eaca59405b1f2254903b"
	  }
  },
  {
	  "date" : "04/05/2020",
	  "title" : "Failed ALTER COLUMN results in a \"Transaction conflict\" error that cannot be aborted",
	  "test" : "CREATE TABLE t0(c0 DATE);\nINSERT INTO t0 VALUES (DATE '2000-01-01');\nALTER TABLE t0 ALTER COLUMN c0 SET DATA TYPE INT;\nINSERT INTO t0 VALUES (DEFAULT); -- TransactionContext: Transaction conflict: adding entries to a table that has been altered!",
	  "oracle" : "error",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/618",
		  "fix" : "https://github.com/cwida/duckdb/commit/1a1990c786bfd5b3a327e97d8c8028319b2ebef8"
	  }
  },
  {
	  "date" : "04/05/2020",
	  "title" : "Query on altered table results in a segmentation fault",
	  "test" : "CREATE TABLE t0(c0 INT UNIQUE, c1 DATE);\nALTER TABLE t0 ALTER c1 TYPE INT;\nINSERT INTO t0(c0) VALUES(-1);\nSELECT * FROM t0 WHERE c0 < 0; -- Segmentation fault",
	  "oracle" : "crash",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/619",
		  "fix" : "https://github.com/cwida/duckdb/commit/6ef7f2f0202d9d6a8556de022dbe3c9d02851eb5"
	  }
  },
  {
	  "date" : "05/05/2020",
	  "title" : "UPDATE on altered table results in an error \"Could not find node in column segment tree\"",
	  "test" : "CREATE TABLE t0(c0 TIMESTAMP);\nINSERT INTO t0 VALUES(NULL);\nDELETE FROM t0;\nALTER TABLE t0 ALTER c0 TYPE DATE;\nINSERT INTO t0 VALUES(NULL);\nUPDATE t0 SET c0 = '1969-12-18'; -- Error: Could not find node in column segment tree!",
	  "oracle" : "error",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/622",
		  "fix" : "https://github.com/cwida/duckdb/commit/289b2eaa836d22d7994154a912f8b786be48984b"
	  }
  },
  {
	  "date" : "05/05/2020",
	  "title" : "ALTER TABLE results in an assertion failure \"Assertion `expr.return_type == vector.type' failed\"",
	  "test" : "CREATE TABLE t0(c0 INT, c1 VARCHAR);\nINSERT INTO t0(c1) VALUES(NULL);\nALTER TABLE t0 ALTER c1 TYPE TIMESTAMP;",
	  "oracle" : "crash",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/624",
		  "fix" : "https://github.com/cwida/duckdb/commit/b6a065d6ebbab25ae8e023cf1105c5237f26de46"
	  }
  },
  {
	  "date" : "05/05/2020",
	  "title" : "DROP column results in an assertion failure unique.index < base.columns.size().",
	  "test" : "CREATE TABLE t0(c0 INT, c INT UNIQUE);\nALTER TABLE t0 DROP c0; -- Assertion `unique.index < base.columns.size()' failed.",
	  "oracle" : "crash",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/625",
		  "fix" : "https://github.com/cwida/duckdb/commit/b6665e723c5f3d9cbd7b0018ce8c242260ac6dc3"
	  },
	  "status" : "fixed"
  },
  {
	  "date" : "05/05/2020",
	  "title" : "DROP column results in an assertion failure unique.index < base.columns.size() 2",
	  "test" : "CREATE TABLE t0(c0 INT, c1 INT UNIQUE);\nALTER TABLE t0 DROP c1; -- Assertion `unique.index < base.columns.size()' failed.",
	  "oracle" : "crash",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/628",
		  "fix" : "https://github.com/cwida/duckdb/commit/5624a825ce7de0844b22356a76c1894bd90f9093"
	  }
  },
  {
	  "date" : "05/05/2020",
	  "title" : "ALTER TYPE with USING results in an assertion failure \"types.size() > 0\"",
	  "test" : "CREATE TABLE t0(c0 INT);\nALTER TABLE t0 ALTER c0 TYPE VARCHAR USING ''; -- Assertion `types.size() > 0' failed.",
	  "oracle" : "crash",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/629",
		  "fix" : "https://github.com/cwida/duckdb/commit/ea6cd8245fd192cd181bdd05fe5ecce5d9a48aa8"
	  }
  },
  {
	  "date" : "06/05/2020",
	  "title" : "Query using LEFT() results in a segmentation fault",
	  "test" : "CREATE TABLE t0(c0 BOOL);\nINSERT INTO t0(c0) VALUES (NULL);\nSELECT * FROM t0 WHERE LEFT(t0.c0, -1); -- Segmentation fault",
	  "oracle" : "crash",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/633",
		  "fix" : "https://github.com/cwida/duckdb/commit/e05902abc4358bcbaacf41c4075290a0bf6432ee"
	  }
  },
  {
	  "date" : "07/05/2020",
	  "title" : "SELECT with RIGHT JOIN causes an assertion failure \"Assertion `!finalized' failed\"",
	  "test" : "CREATE TABLE t0(c0 VARCHAR);\nCREATE TABLE t1(c0 VARCHAR);\nINSERT INTO t0 VALUES('');\nINSERT INTO t1 VALUES(0);\nCREATE VIEW v0 AS SELECT 0 FROM t0, t1 WHERE t0.c0 = t1.c0;\nSELECT * FROM v0 RIGHT JOIN t1 ON 1; -- Assertion `!finalized' failed",
	  "oracle" : "crash",
	  "status" : "fixed",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/637",
		  "fix" : "https://github.com/cwida/duckdb/pull/690"
	  }
  },
  {
	 "date" : "12/08/2020",
	 "title" : "Query with an expression \"NOT NOT - C0\" causes a NullPointerException",
	 "test" : "CREATE TABLE t0(c0 INT);\nSELECT * FROM t0 WHERE NOT NOT - C0; -- General error: \"java.lang.NullPointerException\" [50000-200] HY000/50000",
	 "oracle" : "error",
	 "status" : "fixed",
	 "dbms" : "h2",
	 "links" : {
		 "bugreport" : "https://github.com/h2database/h2database/issues/2804",
		 "fix" : "https://github.com/h2database/h2database/pull/2805/commits/e07127455669a116b25a099ccc8c898ea8f0700b"
	 }
  },
  {
	 "date" : "12/08/2020",
	 "title" : "Incorrect result for query and NOT (c0 != -1 AND c0) predicate",
	 "test" : "CREATE TABLE T0(c0 BOOL);\nINSERT INTO T0(c0) VALUES (true);\nSELECT * FROM t0 WHERE NOT (c0 != 2 AND c0) -- expected: {}, actual: {TRUE}",
	 "oracle" : "qp-where",
	 "status" : "fixed",
	 "dbms" : "h2",
	 "links" : {
		 "bugreport" : "https://github.com/h2database/h2database/issues/2803",
		 "fix" : "https://github.com/h2database/h2database/pull/2808"
	 }
  },
  {
	 "date" : "12/08/2020",
	 "title" : "Expression NOT(c0 AND c0) unexpectedly evaluates to FALSE",
	 "test" : "CREATE TABLE T0(c0 VARCHAR);\nINSERT INTO T0(C0) VALUES ('f');\nSELECT * FROM T0 WHERE NOT(C0 AND C0); -- expected: {'f'}, actual: {}",
	 "oracle" : "qp-where",
	 "status" : "closed (duplicate)",
	 "dbms" : "h2",
	 "links" : {
		 "bugreport" : "https://github.com/h2database/h2database/issues/2807"
	 }
  },
  {
	 "date" : "14/08/2020",
	 "title" : "Unexpected result for query that compares an integer with a string",
	 "test" : "CREATE TABLE T0(c0 VARCHAR UNIQUE);\nINSERT INTO T0(C0) VALUES (-1), (-2);\nSELECT * FROM T0 WHERE c0 >= -1; -- expected: {-1, -2}, actual: {-2}",
	 "oracle" : "qp-where",
	 "status" : "open",
	 "dbms" : "h2",
	 "links" : {
		 "bugreport" : "https://github.com/h2database/h2database/issues/2812"
	 }
  },
  {
	 "date" : "14/08/2020",
	 "title" : "Query with CASE operator unexpectedly results in \"Column must be in the GROUP BY list\" error",
	 "test" : "CREATE TABLE T0(c0 INT);\nCREATE TABLE T1(c0 BOOL);\nINSERT INTO T0 VALUES (0);\nSELECT * FROM T0, T1 WHERE (CASE T1.c0 WHEN T1.c0 THEN T1.c0 END); -- Column \"T1.C0\" must be in the GROUP BY list",
	 "oracle" : "error",
	 "status" : "fixed",
	 "dbms" : "h2",
	 "links" : {
		 "bugreport" : "https://github.com/h2database/h2database/issues/2813",
		 "fix" : "https://github.com/h2database/h2database/pull/2814/commits/47996fd10483512806f83d81281294c15865d0f3"
	 }
  },
  {
	 "date" : "15/08/2020",
	 "title" : "Query on view that uses the BETWEEN operator results in an unexpected syntax error",
	 "test" : "CREATE TABLE t0(c1 INT);\nCREATE VIEW v0(c0) AS SELECT * FROM t0 WHERE false BETWEEN (t0.C1 IS NULL) AND true;\nSELECT * FROM v0; -- View \"PUBLIC.V0\" is invalid: \"Syntax error in SQL statement [...]",
	 "oracle" : "error",
	 "status" : "fixed",
	 "dbms" : "h2",
	 "links" : {
		 "bugreport" : "https://github.com/h2database/h2database/issues/2816",
		 "fix" : "https://github.com/h2database/h2database/pull/2817/commits/909d130d662fd3be8845d6b105a936aa19c87c51"
	 }
  },
  {
	 "date" : "18/08/2020",
	 "title" : "Query with % operator results in a ClassCastException",
	 "test" : "CREATE TABLE T0(c0 DOUBLE);\nINSERT INTO T0(c0) VALUES (0);\nSELECT * FROM T0 WHERE c0 % 0.1; -- General error: \"java.lang.ClassCastException: class org.h2.value.ValueDecfloat cannot be cast to class org.h2.value.ValueNumeric (org.h2.value.ValueDecfloat and org.h2.value.ValueNumeric are in unnamed module of loader 'app')\";",
	 "oracle" : "error",
	 "status" : "fixed",
	 "dbms" : "h2",
	 "links" : {
		 "bugreport" : "https://github.com/h2database/h2database/issues/2825",
		 "fix" : "https://github.com/h2database/h2database/pull/2827/commits/938ae0ded2a0f3b72dca4d9f7fae57f8e12206a3"
	 }
  },
  {
	 "date" : "18/08/2020",
	 "title" : "Table with a generated column cycle results in a NullPointerException",
	 "test" : "CREATE TABLE t0(c0 BOOL AS (NOT c1), c1 BOOL AS (c0)); -- General error: \"java.lang.NullPointerException\"",
	 "oracle" : "error",
	 "status" : "fixed",
	 "dbms" : "h2",
	 "links" : {
		 "bugreport" : "https://github.com/h2database/h2database/issues/2826",
		 "fix" : "https://github.com/h2database/h2database/pull/2827/commits/8361cc902df325960ac9afaa70096cbbe1b4cf63"
	 }
  },
  {
	 "date" : "18/08/2020",
	 "title" : "Query on view with BINARY column results in an unexpected syntax error",
	 "test" : "CREATE TABLE T0(c0 BINARY);\nCREATE VIEW V0(c0) AS SELECT T0.C0 FROM T0 WHERE (CASE NULL WHEN (NOT T0.C0) THEN 1 END);\nSELECT * FROM V0;",
	 "oracle" : "error",
	 "status" : "fixed",
	 "dbms" : "h2",
	 "links" : {
		 "bugreport" : "https://github.com/h2database/h2database/issues/2828",
		 "fix" : "https://github.com/h2database/h2database/pull/2830/commits/24c4240ff685f9d8b4f2ee33c40a9184f734e6df"
	 }
  },
  {
	 "date" : "19/08/2020",
	 "title" : "MERGE INTO fails with an error \"Timeout trying to lock table\"",
	 "test" : "CREATE TABLE T0(c0 BOOL, PRIMARY KEY(c0));\nMERGE INTO T0(C0) VALUES (TRUE);\nMERGE INTO T0(C0) VALUES (2); -- Timeout trying to lock table {0};",
	 "oracle" : "error",
	 "status" : "open",
	 "dbms" : "h2",
	 "links" : {
		 "bugreport" : "https://github.com/h2database/h2database/issues/2834"
	 }
  },
  {
	 "date" : "19/08/2020",
	 "title" : "Restore YEAR data type for MySQL compatibility mode",
	 "test" : "SELECT CAST(1 AS YEAR); -- Syntax error in SQL statement",
	 "oracle" : "error",
	 "status" : "fixed",
	 "dbms" : "h2",
	 "links" : {
		 "bugreport" : "https://github.com/h2database/h2database/issues/2831",
		 "fix" : "https://github.com/h2database/h2database/pull/2836/commits/61514ae8309115bf69a34d60b6be92fd443eaab2"
	 }
  },
  {
	 "date" : "19/08/2020",
	 "title" : "Calling math functions with a string argument results in a NullPointerException",
	 "test" : "SELECT CEIL('a'); -- NullPointerException",
	 "oracle" : "error",
	 "status" : "fixed",
	 "dbms" : "h2",
	 "links" : {
		 "bugreport" : "https://github.com/h2database/h2database/issues/2835",
		 "fix" : "https://github.com/h2database/h2database/pull/2836/commits/49e3559ad79204b321f726db13a925d541e49985"
	 }
  },
  {
	 "date" : "19/08/2020",
	 "title" : "MERGE INTO causes an unexpected syntax error",
	 "test" : "CREATE TABLE T0(c0 INT AS (1), c1 INT);\nMERGE INTO T0(C0) KEY(C1) VALUES (1); -- Syntax error in SQL statement \"UPDATE \"\"PUBLIC\"\".\"\"T0\"\" SET  WHERE[*] \"\"C1\"\"=?\"",
	 "oracle" : "error",
	 "status" : "fixed",
	 "dbms" : "h2",
	 "links" : {
		 "bugreport" : "https://github.com/h2database/h2database/issues/2833",
		 "fix" : "https://github.com/h2database/h2database/pull/2836/commits/4b2441e0629b8fea2bafca453128b7f7194625b8"
	 }
  },
  {
	 "date" : "19/08/2020",
	 "title" : "ROUND() function runs very long",
	 "test" : "SELECT ROUND(1, 10000000);",
	 "oracle" : "crash",
	 "status" : "fixed",
	 "dbms" : "h2",
	 "links" : {
		 "bugreport" : "https://github.com/h2database/h2database/issues/2837",
		 "fix" : "https://github.com/h2database/h2database/pull/2840/commits/21c86dd18621adbfdc534c6f77ed73f54ef26e68"
	 }
  },
  {
	 "date" : "19/08/2020",
	 "title" : "INSERT() with NULL arguments for the original string and string to be added results in NPE",
	 "test" : "SELECT INSERT(NULL, 0, 0, NULL); -- NullPointerException",
	 "oracle" : "error",
	 "status" : "fixed",
	 "dbms" : "h2",
	 "links" : {
		 "bugreport" : "https://github.com/h2database/h2database/issues/2838",
		 "fix" : "https://github.com/h2database/h2database/pull/2840/commits/23ca1f8d587e39cbc9e2173f9c558f3a29c9beb6"
	 }
  },
  {
	 "date" : "19/08/2020",
	 "title" : "Querying a view that uses the POSITION() function results in an unexpected syntax error",
	 "test" : "CREATE TABLE T0(c0 INT);\nCREATE VIEW v0(c0) AS SELECT * FROM T0 WHERE POSITION((C0 > 0), 0);\nSELECT * FROM V0; -- Syntax error in SQL statement",
	 "oracle" : "error",
	 "status" : "fixed",
	 "dbms" : "h2",
	 "links" : {
		 "bugreport" : "https://github.com/h2database/h2database/issues/2839",
		 "fix" : "https://github.com/h2database/h2database/pull/2840/commits/40d925d33cfacc74d4f407aa947ca4e1dc43cbce"
	 }
  },
  {
	 "date" : "20/08/2020",
	 "title" : "Call to STRINGDECODE results in StringIndexOutOfBoundsException",
	 "test" : "SELECT STRINGDECODE(X'5c38'); -- StringIndexOutOfBoundsException",
	 "oracle" : "error",
	 "status" : "fixed",
	 "dbms" : "h2",
	 "links" : {
		 "bugreport" : "https://github.com/h2database/h2database/issues/2841",
		 "fix" : "https://github.com/h2database/h2database/pull/2844"
	 }
  },
  {
	 "date" : "20/08/2020",
	 "title" : "Querying view that uses LTRIM/RTRIM results in a syntax error",
	 "test" : "CREATE TABLE T0(c0 VARCHAR);\nCREATE VIEW v0(c0) AS SELECT RTRIM(c0) FROM T0;\nSELECT * FROM V0; -- Syntax error in SQL statement",
	 "oracle" : "error",
	 "status" : "fixed",
	 "dbms" : "h2",
	 "links" : {
		 "bugreport" : "https://github.com/h2database/h2database/issues/2842",
		 "fix" : "https://github.com/h2database/h2database/pull/2844"
	 }
  },
  {
	 "date" : "25/08/2020",
	 "title" : "CREATE TABLE with a BINARY column and large size specification results in a NegativeArraySizeException",
	 "test" : "CREATE TABLE T0(c0 BINARY(1500000000));\nINSERT INTO T0(c0) VALUES (0);\nDELETE FROM T0; -- General error: \"java.lang.NegativeArraySizeException: -1294959092\"",
	 "oracle" : "error",
	 "status" : "fixed",
	 "dbms" : "h2",
	 "links" : {
		 "bugreport" : "https://github.com/h2database/h2database/issues/2832",
		 "fix" : "https://github.com/h2database/h2database/pull/2850"
	 }
  },
  {
	"date" : "24/08/2020",
	"title" : "Incorrect result for IN expression with right-hand IS TRUE sub-expression",
	"test" : "SELECT (1 IN (2 IS TRUE)); -- expected: {1}, actual: {0}",
	"oracle" : "pqs",
	"status" : "fixed",
	"dbms" : "sqlite",
	"links" : {
		"bugreports" : "https://www.sqlite.org/src/tktview?name=f3ff147288",
		"fix" : "https://www.sqlite.org/src/info/4236103379df0b3d"
	}  
  },
  {
	  "date" : "27/08/2020",
	  "title" : "Unexpected result for % and '1E1'",
	  "test" : "SELECT 1 % '1E1'; -- expected: {1.0}, actual: {0.0}",
	  "oracle" : "pqs",
	  "status" : "fixed (in documentation)",
	  "dbms" : "sqlite",
	  "links" : {
		  "bugreport" : "https://www.sqlite.org/src/tktview?name=be31cf009c",
		  "fix" : "https://www.sqlite.org/docsrc/info/153857859d220dbd"
	  }
  },
  {
	  "date" : "24/09/2020",
	  "title" : "Buffer overflow in duckdb::ART::IteratorNext",
	  "test" : "CREATE TABLE t0(c0 VARCHAR UNIQUE);\nINSERT INTO t0 VALUES('19691214 051350'), (1), ('19700118'), (0), ('1969-1214 102704'), ('1969-12-14'), ('1969-12-14 114142'), ('1969-12-30 040325'), ('1969-12-18 044750'), ('1969-12-14 100915');\nSELECT * FROM t0 WHERE '19691' > c0;",
	  "oracle" : "crash",
	  "status" : "open",
	  "dbms" : "duckdb",
	  "links" : {
		  "bugreport" : "https://github.com/cwida/duckdb/issues/956"
	  }
  }
]

